
#Область ПрограммныйИнтерфейс

Процедура ФормаПриОткрытии(Форма, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДопПараметры.Вставить("Форма", Форма);

	УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект,
		ДопПараметры));
КонецПроцедуры

Функция ВсеРедакторыФормыИнициализированы(РедакторыФормы) 
	Результат = Истина;
	Для Каждого КлючЗначение Из РедакторыФормы Цикл
		Если Не КлючЗначение.Значение.Инициализирован Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ИнициализироватьРедаторыФормыПослеФормированияПолейHTML(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора)
	Если ВидРедактора <> ВидыРедактора.Monaco Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из РедакторыФормы Цикл
		ПараметрыРедактора = КлючЗначение.Значение;
			
		ДокументView = Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;

		Инфо = Новый СистемнаяИнформация;
		ДокументView.init(Инфо.ВерсияПриложения);
		ДокументView.hideScrollX();
		ДокументView.hideScrollY();
		ДокументView.showStatusBar();
		ДокументView.enableQuickSuggestions();
//		ДокументView.disableContextMenu();
		
//		ДокументView.bslMetadata
		ТемыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыТемыРедактораMonaco();
		Если ПараметрыРедактора.Тема = ТемыРедактора.Темная Тогда
			ДокументView.setTheme("bsl-dark");
		Иначе
			ДокументView.setTheme("bsl-white");
		КонецЕсли;

		ЯзыкиРедактора = УИ_РедакторКодаКлиентСервер.ВариантыЯзыкаСинтаксисаРедактораMonaco();
		Если ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Английский Тогда
			ДокументView.switchLang();
		ИначеЕсли ПараметрыРедактора.ЯзыкСинтаксиса = ЯзыкиРедактора.Авто Тогда 
			ЯзыкСинтаксиса = УИ_ПараметрыПриложения["ЯзыкСинтаксисаКонфигурации"];
			Если ЯзыкСинтаксиса = "Английский" Тогда
				ДокументView.switchLang();
			КонецЕсли;
		КонецЕсли;
	
		ДокументView.minimap(ПараметрыРедактора.ИспользоватьКартуКода);
		
		Если ПараметрыРедактора.СкрытьНомераСтрок Тогда
			ДокументView.hideLineNumbers();
		КонецЕсли;
		
		ДокументView.clearMetadata();

		ОписаниеКонфигурацииДляИнициализации = УИ_РедакторКодаВызовСервера.ОписнаиеМетаданныйДляИнициализацииРедактораMonaco();

//		МетаданныеКонфигурации = ОписаниеМетаданныхКонфигурацииДляРедактораMonaco();
		ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
			ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
			ОписаниеКонфигурацииДляИнициализации.ОбщиеМодули)), "commonModules.items");
//		ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(КоллекцияМетаданных.roles), "roles.items");
//		ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(КоллекцияМетаданных.сommonForms), "сommonForms.items");
			
		
	КонецЦикла;	
КонецПроцедуры

Процедура РедакторКодаОтложеннаяИнициализацияРедакторов(Форма) Экспорт
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ИнициализироватьРедаторыФормыПослеФормированияПолейHTML(Форма, РедакторыФормы, ВидРедактора, ВидыРедактора);
	Форма.Подключаемый_РедакторКодаЗавершениеИнициализации();
//	Форма.Подключаемый_ПолеРедактораЗавершениеИнициализации(УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент));
КонецПроцедуры

Процедура ПолеРедактораHTMLДокументСформирован(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	ПараметрыРедактора.Вставить("Инициализирован", Истина);

	Если Не ВсеРедакторыФормыИнициализированы(РедакторыФормы) Тогда
		Возврат;
	КонецЕсли;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_РедакторКодаОтложеннаяИнициализацияРедакторов", 0.2, Истина);
КонецПроцедуры

Процедура ПолеРедактораHTMLПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();

	Если ВидРедактора = ВидыРедактора.Monaco Тогда
		ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьТекстРедактораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст);
КонецПроцедуры

Процедура УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];

	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		Форма[ПараметрыРедактора.ИмяРеквизита] = Текст;
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.setValue(Текст, -1);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.updateText(Текст);
	КонецЕсли;
КонецПроцедуры

Функция ТекстКодаРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	ТекстКода="";

	Если ВидРедактора = ВидыРедакторов.Текст Тогда
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.getText();
	КонецЕсли;

	Возврат СокрЛП(ТекстКода);
КонецФункции

Функция ТекстКодаРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = УИ_РедакторКодаКлиентСервер.ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ТекстКодаРедактора(Форма, ИдентификаторРедактора);
КонецФункции

Процедура ДобавитьКонтекстРедактораКода(Форма, ИдентификаторРедактора, ДобавляемыйКонтекст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];

	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];

	Если ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;

		СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();

		ОбъектыДобавления = Новый Структура;

		Для Каждого КлючЗначение Из ДобавляемыйКонтекст Цикл
			ОбъектДобавляемый = Новый Структура("ref", ТипРедактораМонакоПоСтрокеТипа1С(
				КлючЗначение.Значение, СоответствиеТипов));
			ОбъектыДобавления.Вставить(КлючЗначение.Ключ, ОбъектДобавляемый);
		КонецЦикла;

		ДокументHTML.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(Новый Структура("customObjects",
			ОбъектыДобавления)));
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапроса(ТекстЗапроса, ОписаниеОповещенияОЗавершении, РежимКомпоновки = Ложь) Экспорт
#Если Не МобильныйКлиент Тогда
	Конструктор=Новый КонструкторЗапроса;
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше_8_3_14() Тогда
		Конструктор.РежимКомпоновкиДанных=РежимКомпоновки;
	КонецЕсли;

	Если ЗначениеЗаполнено(СокрЛП(ТекстЗапроса)) Тогда
		Конструктор.Текст=ТекстЗапроса;
	КонецЕсли;

	Конструктор.Показать(ОписаниеОповещенияОЗавершении);
#КонецЕсли
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ОписаниеОповещенияОЗавершении) Экспорт
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка			
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
    Конструктор.Показать(ОписаниеОповещенияОЗавершении);
КонецПроцедуры


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	АдресБиблиотеки =  ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаАдресБиблиотеки()];
	Если АдресБиблиотеки = Неопределено Или Не ЗначениеЗаполнено(АдресБиблиотеки) Тогда
		ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Истина, ДополнительныеПараметры);
	Иначе
		ВидРедактора = ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];

		СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора,
			Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора", ЭтотОбъект,
			ДополнительныеПараметры));
	КонецЕсли;
КонецПроцедуры

Процедура ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();

	Если УИ_РедакторКодаКлиентСервер.РедакторКодаИспользуетПолеHTML(ВидРедактора) Тогда
		Для Каждого КлючЗначение Из Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()] Цикл
			//ИмяРеквизитаРедактора = УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(КлючЗначение.Значение.ИмяРеквизита);	

			Если ВидРедактора = ВидыРедакторов.Monaco Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = КаталогСохраненияРедактора(ВидРедактора)
					+ ПолучитьРазделительПути() + "index.html";
			ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = ИмяФайлаРедактораAceДляЯзыка(КлючЗначение.Значение.Язык);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Оповестим о готовности всех редакторов формы, если они текстовые
		Форма.Подключаемый_РедакторКодаЗавершениеИнициализации();
	КонецЕсли;
	
	// Оповестим о завершении обработки инициализации редакторов при открытии формы
	ОписаниеОповещенияОЗавершении= ДополнительныеПараметры.ОписаниеОповещенияОЗавершении;
	Если ОписаниеОповещенияОЗавершении = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки(ИмяКаталога, ДополнительныеПараметры) Экспорт

	АдресБиблиотеки = ДополнительныеПараметры.АдресБиблиотеки;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	МассивСохраненныхФайлов = Новый Массив;
	СоответствиеФайловБиблиотеки=ПолучитьИзВременногоХранилища(АдресБиблиотеки);

	Если ДополнительныеПараметры.ВидРедактора = "Ace" Тогда
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "bsl");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "css");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "javascript");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
			КаталогСохраненияБибилиотеки, "html");
	КонецЕсли;

	ДополнительныеПараметры.Вставить("МассивСохраненныхФайлов", МассивСохраненныхФайлов);
	ДополнительныеПараметры.Вставить("СоответствиеФайловБиблиотеки", СоответствиеФайловБиблиотеки);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение(ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение(Результат,
	ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске(Существует,
	ДополнительныеПараметры) Экспорт
	Если Существует Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;

	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;

	НачатьСозданиеКаталога(
		Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки", ЭтотОбъект,
		ДополнительныеПараметры), КаталогСохраненияБибилиотеки);

КонецПроцедуры

#Область Monaco

Процедура ПриЗавершенииРедактированияФорматнойСтрокиMonaco(Текст, ДополнительныеПараметры) Экспорт
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ФорматнаяСтрока = СтрЗаменить(Текст, "'", "");		
	ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
	
	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;
	
	Если ДополнительныеПараметры.Свойство("Позиция") Тогда
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(ДополнительныеПараметры.Позиция), Истина);
	Иначе
		УстановитьТекстMonaco(ДокументView, ФорматнаяСтрока, , Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗавершенииРедактированияЗапросаMonaco(Текст, ДополнительныеПараметры) Экспорт
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", """""");
	ТекстЗапроса = """" + ТекстЗапроса + """";
	
	ДокументView = ДополнительныеПараметры.Форма.Элементы[ДополнительныеПараметры.Элемент.Имя].Документ.defaultView;
	
	Если ДополнительныеПараметры.Свойство("Позиция") Тогда
		УстановитьТекстMonaco(ДокументView, ТекстЗапроса, УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(ДополнительныеПараметры.Позиция), Истина);
	Иначе
		УстановитьТекстMonaco(ДокументView, ТекстЗапроса, , Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОткрытьКонструкторЗапроса("", Новый ОписаниеОповещения("ПриЗавершенииРедактированияЗапросаMonaco",
		ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ОткрытьКонструкторФорматнойСтроки("", Новый ОписаниеОповещения("ПриЗавершенииРедактированияФорматнойСтрокиMonaco",
		ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры



#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТекстЗапросаДляКонструктора(Текст)

	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");

	Возврат ТекстЗапроса;
КонецФункции

#Область Monaco



Процедура УстановитьТекстMonaco(ДокументView, Текст, Позиция = Неопределено, УчитыватьОтступПервойСтроки = Истина) 
	ДокументView.setText(Текст, Позиция);	
КонецПроцедуры

Процедура ОткрытьКонструкторФорматнойСтрокиMonaco(ПараметрыСобытия, ДополнительныеПараметры)
	Если ПараметрыСобытия = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(
			Новый ОписаниеОповещения("ОткрытьКонструкторФорматнойСтрокиMonacoЗавершениеВопроса", ЭтотОбъект, ДополнительныеПараметры),
			"Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?", РежимДиалогаВопрос.ДаНет)
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСобытия.text, "|", ""), """", "");
		
		ПараметрыОповещения = ДополнительныеПараметры;
		
		Позиция = Новый Структура;
		Позиция.Вставить("startLineNumber",ПараметрыСобытия.range.startLineNumber);
		Позиция.Вставить("startColumn",ПараметрыСобытия.range.startColumn);
		Позиция.Вставить("endLineNumber",ПараметрыСобытия.range.endLineNumber);
		Позиция.Вставить("endColumn",ПараметрыСобытия.range.endColumn);
		
		ПараметрыОповещения.Вставить("Позиция", Позиция);
		
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, Новый ОписаниеОповещения("ПриЗавершенииРедактированияФорматнойСтрокиMonaco",
			ЭтотОбъект, ПараметрыОповещения));
	КонецЕсли;
КонецПроцедуры

Процедура ОткрытьКонструкторЗапросаMonaco(ПараметрыСобытия, ДополнительныеПараметры) 
	Если ПараметрыСобытия = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиент.ПоказатьВопросПользователю(
			Новый ОписаниеОповещения("ОткрытьКонструкторЗапросаMonacoЗавершениеВопроса", ЭтотОбъект, ДополнительныеПараметры),
			"Не найден текст запроса." + Символы.ПС + "Создать новый запрос?", РежимДиалогаВопрос.ДаНет)
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапросаДляКонструктора(ПараметрыСобытия.text);
		
		ПараметрыОповещения = ДополнительныеПараметры;
		
		Позиция = Новый Структура;
		Позиция.Вставить("startLineNumber",ПараметрыСобытия.range.startLineNumber);
		Позиция.Вставить("startColumn",ПараметрыСобытия.range.startColumn);
		Позиция.Вставить("endLineNumber",ПараметрыСобытия.range.endLineNumber);
		Позиция.Вставить("endColumn",ПараметрыСобытия.range.endColumn);
		
		ПараметрыОповещения.Вставить("Позиция", Позиция);
		
		ОткрытьКонструкторЗапроса(ТекстЗапроса, Новый ОписаниеОповещения("ПриЗавершенииРедактированияЗапросаMonaco",
			ЭтотОбъект, ПараметрыОповещения));
	КонецЕсли;
КонецПроцедуры

Процедура ПолеРедактораHTMLПриНажатииMonaco(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) 
	Событие = ДанныеСобытия.Event.eventData1C;

	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОткрытьКонструкторЗапросаMonaco(Событие.params, ДополнительныеПараметры);
	ИначеЕсли Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		ОткрытьКонструкторФорматнойСтрокиMonaco(Событие.params, ДополнительныеПараметры);
			//	ВызватьКонструкторФорматнойСтроки(Событие.params);
	ИначеЕсли Событие.event = "EVENT_GET_METADATA" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
		УстановитьОписаниеМетаданныхДляРедактораMonaco(Событие.params, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОписаниеМетаданныхДляРедактораMonaco(ОбновляемыйОбъектМетаданных, ДополнительныеПараметры) Экспорт

	МассивИменМетаданного = СтрРазделить(ОбновляемыйОбъектМетаданных, ".");
	
	ВидОбъекта = МассивИменМетаданного[0];

	СоответствиеОбновляемыхОбъектовМетаданных = СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных();
	ОбновляемаяКоллекцияРедактора = СоответствиеОбновляемыхОбъектовМетаданных[ВидОбъекта];

	Если МассивИменМетаданного.Количество() = 1 Тогда
		ОбновляемыеДанные = Новый Структура;

		МассивИмен = УИ_РедакторКодаВызовСервера.СписокМетаданныхПоВиду(ВидОбъекта);
		Для Каждого ТекИмя Из МассивИмен Цикл
			ОбновляемыеДанные.Вставить(ТекИмя, Новый Структура);
		КонецЦикла;
	Иначе
	
		Если ВидОбъекта = "module" Тогда
			ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени("ОбщиеМодули", МассивИменМетаданного[1]);
				
			ОбновляемыеДанные = Новый Структура;

//			Метод = Новый Структура;
//			Метод.Вставить("name", "_От");
//			Метод.Вставить("name_en", "_От");
//			Метод.Вставить("description", "Выполняет запуск соответсвующего инструмента для толстого клиента или производит запись данных в базу для дальнейшей отладки
//										  |// 
//										  |// Если контекст запуска отладки является толстым клиентом открытие формы консоли происходит сразу по окончании выполнения вызова кода
//										  |// Если отладка вызывается в контексте сервера или тонкого или веб клиента, необходимая информация сохраняется в справочник Данные для отладки. 
//										  |// В таком случае вызов отладки проиходит потом из списка справочника ""Данные для отладки"".
//										  |// 
//										  |// Параметры:
//										  |// 	ОбъектОтладки - Объект типа Запрос
//										  |// Возвращаемое значение:
//										  |// СсылкаНаДанныеОтладки- Тип Строка.
//										  |// Результат выполнения сохранения данных отладки");
//			Метод.Вставить("detail",
//				"Выполняет запуск соответсвующего инструмента для толстого клиента или производит запись данных в базу для дальнейшей отладки");
//			Метод.Вставить("returns", "Строка");
//			
//			Метод.Вставить("signature", Новый Структура);
//			Метод.signature.Вставить("default", Новый Структура);
//			Метод.signature.default.Вставить("СтрокаПараметров","ОбъектОтладки, НастройкиСКДИлиСоединениеHTTP = Неопределено, ВнешниеНаборыДанных = Неопределено");
//			Метод.signature.default.Вставить("Параметры", Новый Структура);
//			Метод.signature.default.Параметры.Вставить("ОбъектОтладки", "Объект типа Запрос");
//			Метод.signature.default.Параметры.Вставить("НастройкиСКДИлиСоединениеHTTP", "");
//			Метод.signature.default.Параметры.Вставить("ВнешниеНаборыДанных", "Структура");
//
//			ОбновляемыеДанные.Вставить("_От", Метод);
		Иначе
			ОписаниеОбъектаМетаданных = УИ_РедакторКодаВызовСервера.ОписаниеОбъектаМетаданныхКонфигурацииПоИмени(ВидОбъекта, МассивИменМетаданного[1]);
			Описание = ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных);

			ОбновляемыеДанные = Описание;
		КонецЕсли;	
			
		ОбновляемаяКоллекцияРедактора = ОбновляемаяКоллекцияРедактора +"."+ОписаниеОбъектаМетаданных.Имя;
	КонецЕсли;

	ДокументView = ДополнительныеПараметры.Элемент.Документ.defaultView;
	ДокументView.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(
			ОбновляемыеДанные), ОбновляемаяКоллекцияРедактора);
	
	ДокументView.triggerSuggestions();
КонецПроцедуры

Функция ТипРедактораМонакоПоСтрокеТипа1С(Тип1СИлиСтрока, СоответствиеСсылочныхТипов)
	Если СоответствиеСсылочныхТипов = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Тип1С = Тип1СИлиСтрока;
	Если ТипЗнч(Тип1С) = Тип("Строка") Тогда
		Попытка
			Тип1С = Тип(Тип1С);
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;

	МетаданныеТипа=СоответствиеСсылочныхТипов[Тип1С];

	Если МетаданныеТипа = Неопределено Тогда
		Если ТипЗнч(Тип1СИлиСтрока) = Тип("Строка") Тогда
			Возврат "classes." + Тип1СИлиСтрока;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Если МетаданныеТипа.ВидОбъекта = "Справочник" Тогда
		Возврат "catalogs." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Документ" Тогда
		Возврат "documents." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Задача" Тогда
		Возврат "tasks." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовРасчета" Тогда
		Возврат "chartsOfCalculationTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат "chartsOfCharacteristicTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланОбмена" Тогда
		Возврат "exchangePlans." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланСчетов" Тогда
		Возврат "сhartsOfAccounts." + МетаданныеТипа.Имя;
	КонецЕсли;

	Возврат "";
КонецФункции

Функция ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов)

	Связь = "";

	Типы = Реквизит.СсылочныйТип.Типы();

	Индекс = 0;

	Для Каждого ТекТип Из Типы Цикл
		Связь = ТипРедактораМонакоПоСтрокеТипа1С(ТекТип, СоответствиеТипов);

		Если ЗначениеЗаполнено(Связь) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Связь;

КонецФункции

Процедура ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, Реквизит, ПолучатьСвязиРеквизита,
	СоответствиеТипов)

	Связь = "";
	Если ПолучатьСвязиРеквизита Тогда
		Связь= ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов);
	КонецЕсли;

	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);

	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;

	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);

КонецПроцедуры

Функция ОписаниеОбъектаМетаданныхДляРедактораMonaco(ОписаниеОбъектаМетаданных)
	СоответствиеТипов = СоответствиеСсылочныхТиповКонфигурации();


	ОписаниеРеквизитов = Новый Структура;
	ОписаниеРесурсов = Новый Структура;
	ОписаниеПредопределенных = Новый Структура;
	ОписаниеТабличныхЧастей = Новый Структура;
	ДополнительныеСвойства = Новый Структура;

	Если ОписаниеОбъектаМетаданных.ВидОбъекта = "Перечисление"
		Или ОписаниеОбъектаМетаданных.ВидОбъекта = "перечисления" Тогда

		Для Каждого КлючЗначениеЗначенияПеречисления Из ОписаниеОбъектаМетаданных.ЗначенияПеречисления Цикл
			ОписаниеРеквизитов.Вставить(КлючЗначениеЗначенияПеречисления.Ключ, Новый Структура("name",
				КлючЗначениеЗначенияПеречисления.Значение));
		КонецЦикла;

	Иначе

		Если ОписаниеОбъектаМетаданных.Свойство("Реквизиты") Тогда
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Реквизиты Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("СтандартныеРеквизиты") Тогда
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.СтандартныеРеквизиты Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Ложь,
					СоответствиеТипов);
			КонецЦикла;
		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("Предопределенные") Тогда
				
				//Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
				//	
				//	Запрос = Новый Запрос(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	
				//	Пока Выборка.Следующий() Цикл 
				//		ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	КонецЦикла;
				//	
				//Иначе				
			Для Каждого КлючЗначениеИмя Из ОписаниеОбъектаМетаданных.Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(КлючЗначениеИмя.Ключ, "");
			КонецЦикла;
				
				//КонецЕсли;

		КонецЕсли;

		Если ОписаниеОбъектаМетаданных.Свойство("Измерения") Тогда

			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Измерения Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
			Для Каждого КлючЗначениеРеквизит Из ОписаниеОбъектаМетаданных.Ресурсы Цикл
				ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,
					СоответствиеТипов);
			КонецЦикла;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

		КонецЕсли;

		Если ОписаниеОбъектаМетаданных.Свойство("ТабличныеЧасти") Тогда

			Для Каждого КлючЗначениеТабличнаяЧасть Из ОписаниеОбъектаМетаданных.ТабличныеЧасти Цикл

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = Новый Структура;

				Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
						ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					КонецЦикла;
				КонецЕсли;

				Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							Истина, СоответствиеТипов);
					КонецЦикла;
				КонецЕсли;

				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			КонецЦикла;

		КонецЕсли;
		Если ОписаниеОбъектаМетаданных.Свойство("СтандартныеТабличныеЧасти") Тогда

			Для Каждого КлючЗначениеТабличнаяЧасть Из ОписаниеОбъектаМетаданных.СтандартныеТабличныеЧасти Цикл

				ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
				ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
					+ ТабличнаяЧасть.Синоним));

				ОписаниеТабличнойЧасти = Новый Структура;

				Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
						ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
					КонецЦикла;
				КонецЕсли;

				Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
					Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
						ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
							Истина, СоответствиеТипов);
					КонецЦикла;
				КонецЕсли;

				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

	Для Каждого Обход Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
	КонецЦикла;

	Если  ОписаниеРесурсов.Количество()>0 Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;

	Если ОписаниеПредопределенных.Количество()>0 Тогда
		СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
	КонецЕсли;

	Если ОписаниеТабличныхЧастей.Количество()>0 Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
	КонецЕсли;

	Возврат СтруктураОбъекта;
КонецФункции

Функция ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(Коллекция, СоответствиеТипов)

	ОписаниеКоллекции = Новый Структура;

	Для Каждого КлючЗначениеЭлементКоллекции Из Коллекция Цикл

		ОписаниеРеквизитов = Новый Структура;
		ОписаниеРесурсов = Новый Структура;
		ОписаниеПредопределенных = Новый Структура;
		ОписаниеТабличныхЧастей = Новый Структура;
		ДополнительныеСвойства = Новый Структура;

		ОбъектМетаданных = КлючЗначениеЭлементКоллекции.Значение;

		Если ОбъектМетаданных.ВидОбъекта = "Перечисление" Тогда

			Для Каждого КлючЗначениеЗначенияПеречисления Из ОбъектМетаданных.ЗначенияПеречисления Цикл
				ОписаниеРеквизитов.Вставить(КлючЗначениеЗначенияПеречисления.Ключ, Новый Структура("name",
					КлючЗначениеЗначенияПеречисления.Значение));
			КонецЦикла;

		Иначе

			Если ОбъектМетаданных.Свойство("Реквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Реквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеРеквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Ложь,
						СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("Предопределенные") Тогда
				
				//Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
				//	
				//	Запрос = Новый Запрос(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	
				//	Пока Выборка.Следующий() Цикл 
				//		ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	КонецЦикла;
				//	
				//Иначе				
				Для Каждого КлючЗначениеИмя Из ОбъектМетаданных.Предопределенные Цикл
					ОписаниеПредопределенных.Вставить(КлючЗначениеИмя.Ключ, Новый Структура("name, ref", КлючЗначениеИмя.Ключ, ""));
				КонецЦикла;
				
				//КонецЕсли;

			КонецЕсли;

			Если ОбъектМетаданных.Свойство("Измерения") Тогда

				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Измерения Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
				Для Каждого КлючЗначениеРеквизит Из ОбъектМетаданных.Ресурсы Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение,
						Истина, СоответствиеТипов);
				КонецЦикла;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				

			КонецЕсли;

			Если ОбъектМетаданных.Свойство("ТабличныеЧасти") Тогда

				Для Каждого КлючЗначениеТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = Новый Структура;

					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;

					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								Истина, СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;

					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				КонецЦикла;

			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеТабличныеЧасти") Тогда

				Для Каждого КлючЗначениеТабличнаяЧасть Из ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл

					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: "
						+ ТабличнаяЧасть.Синоним));

					ОписаниеТабличнойЧасти = Новый Структура;

					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;

					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение,
								Истина, СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;

					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);

		Для Каждого Обход Из ДополнительныеСвойства Цикл
			СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
		КонецЦикла;

		Если 0 < ОписаниеРесурсов.Количество() Тогда
			СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
		КонецЕсли;

		Если 0 < ОписаниеПредопределенных.Количество() Тогда
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных);
		КонецЕсли;

		Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
			СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей);
		КонецЕсли;

		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, СтруктураОбъекта);

	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(Коллекция)

	ОписаниеКоллекции = Новый Структура;

	Для Каждого КлючЗначение Из Коллекция Цикл
		ОписаниеКоллекции.Вставить(КлючЗначение.Ключ, Новый Структура);
	КонецЦикла;

	Возврат ОписаниеКоллекции;

КонецФункции

Функция СоответствиеСсылочныхТиповКонфигурации() 
	Соответствие = УИ_ПараметрыПриложения["СоответствиеСсылочныхТиповКонфигурации"];
	Если Соответствие <> Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;

	СоответствиеТипов = УИ_РедакторКодаВызовСервера.СоответствиеСсылочныхТипов();
	УИ_ПараметрыПриложения.Вставить("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);
	
	Возврат СоответствиеТипов;
КонецФункции

Функция ОписаниеМетаданныхКонфигурацииДляРедактораMonaco()
	ОписаниеМетаданных = УИ_ПараметрыПриложения["ОписаниеМетаданныхДляРедактораMonaco"];
	Если ОписаниеМетаданных<>Неопределено Тогда
		Возврат ОписаниеМетаданных;
	КонецЕсли;
	
	АдресОписанияМетаданных = УИ_ПараметрыПриложения["АдресОписанияМетаданныхКонфигурации"];
	Если Не ЭтоАдресВременногоХранилища(АдресОписанияМетаданных) Тогда
		АдресОписанияМетаданных = УИ_ОбщегоНазначенияВызовСервера.АдресОписанияМетаданныхКонфигурации();
		УИ_ПараметрыПриложения.Вставить("АдресОписанияМетаданныхКонфигурации", АдресОписанияМетаданных);
	КонецЕсли;
	МетаданныеКонфигурации = ПолучитьИзВременногоХранилища(АдресОписанияМетаданных);

	СоответствиеТипов = МетаданныеКонфигурации.СоответствиеСсылочныхТипов;

	КоллекцияМетаданных = Новый Структура;
	КоллекцияМетаданных.Вставить("catalogs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Справочники, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("documents", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Документы, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("infoRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыСведений, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accumRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыНакопления, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accountRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыБухгалтерии, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("calcRegs", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.РегистрыРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("dataProc", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Обработки, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("reports", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Отчеты, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("enums", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Перечисления, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("commonModules", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		МетаданныеКонфигурации.ОбщиеМодули));
	КоллекцияМетаданных.Вставить("сhartsOfAccounts", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыСчетов, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("businessProcesses", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.БизнесПроцессы, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("tasks", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.Задачи, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("exchangePlans", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыОбмена, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("chartsOfCharacteristicTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыВидовХарактеристик, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("chartsOfCalculationTypes", ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(
		МетаданныеКонфигурации.ПланыВидовРасчета, СоответствиеТипов));
	КоллекцияМетаданных.Вставить("constants", ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(
		МетаданныеКонфигурации.Константы));

	УИ_ПараметрыПриложения.Вставить("ОписаниеМетаданныхДляРедактораMonaco", УИ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(КоллекцияМетаданных));
	УИ_ПараметрыПриложения.Вставить("СоответствиеСсылочныхТиповКонфигурации", СоответствиеТипов);
	
	Возврат КоллекцияМетаданных;
КонецФункции

Функция СоответствиеОбновляемыхОбъектовМетаданныхРедактораMonacoИПараметровСобытияОблновленияМетаданных()
	Соответствие = Новый Структура;
	Соответствие.Вставить("справочники",			"catalogs.items");
	Соответствие.Вставить("catalogs",				"catalogs.items");
	Соответствие.Вставить("документы",				"documents.items");
	Соответствие.Вставить("documents",				"documents.items");
	Соответствие.Вставить("регистрысведений",		"infoRegs.items");
	Соответствие.Вставить("informationregisters",	"infoRegs.items");
	Соответствие.Вставить("регистрынакопления",		"accumRegs.items");
	Соответствие.Вставить("accumulationregisters",	"accumRegs.items");
	Соответствие.Вставить("регистрыбухгалтерии",	"accountRegs.items");
	Соответствие.Вставить("accountingregisters",	"accountRegs.items");
	Соответствие.Вставить("регистрырасчета",		"calcRegs.items");
	Соответствие.Вставить("calculationregisters",	"calcRegs.items");
	Соответствие.Вставить("обработки",				"dataProc.items");
	Соответствие.Вставить("dataprocessors",			"dataProc.items");
	Соответствие.Вставить("отчеты",					"reports.items");
	Соответствие.Вставить("reports",				"reports.items");
	Соответствие.Вставить("перечисления",			"enums.items");
	Соответствие.Вставить("enums",					"enums.items");
	Соответствие.Вставить("планысчетов",			"сhartsOfAccounts.items");
	Соответствие.Вставить("chartsofaccounts",		"сhartsOfAccounts.items");
	Соответствие.Вставить("бизнеспроцессы",			"businessProcesses.items");
	Соответствие.Вставить("businessprocesses",		"businessProcesses.items");
	Соответствие.Вставить("задачи",					"tasks.items");
	Соответствие.Вставить("tasks",					"tasks.items");
	Соответствие.Вставить("планыобмена",			"exchangePlans.items");
	Соответствие.Вставить("exchangeplans",			"exchangePlans.items");
	Соответствие.Вставить("планывидовхарактеристик","chartsOfCharacteristicTypes.items");
	Соответствие.Вставить("chartsofcharacteristictypes","chartsOfCharacteristicTypes.items");
	Соответствие.Вставить("планывидоврасчета",		"chartsOfCalculationTypes.items");
	Соответствие.Вставить("chartsofcalculationtypes","chartsOfCalculationTypes.items");
	Соответствие.Вставить("константы",				"constants.items");
	Соответствие.Вставить("constants",				"chartsOfCalculationTypes.items");
	Соответствие.Вставить("module",					"commonModules.items");
	
	Возврат Соответствие;
КонецФункции

#КонецОбласти
Процедура СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора, ОписаниеОповещенияОЗавершении)
	КаталогСохраненияБибилиотеки=КаталогСохраненияРедактора(ВидРедактора);
	ФайлРедактора=Новый Файл(КаталогСохраненияБибилиотеки);

	ДопПараметры= Новый Структура;
	ДопПараметры.Вставить("АдресБиблиотеки", АдресБиблиотеки);
	ДопПараметры.Вставить("КаталогСохраненияБибилиотеки", КаталогСохраненияБибилиотеки);
	ДопПараметры.Вставить("ВидРедактора", ВидРедактора);
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ФайлРедактора.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске",
		ЭтотОбъект, ДопПараметры));
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры)
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	СоответствиеФайловБиблиотеки = ДополнительныеПараметры.СоответствиеФайловБиблиотеки;
	ЕстьНеСохраненное = Ложь;
	Для Каждого КлючЗначение Из СоответствиеФайловБиблиотеки Цикл
		Если МассивСохраненныхФайлов.Найти(КлючЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНеСохраненное = Истина;

		ИмяФайла=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + КлючЗначение.Ключ;
		ДополнительныеПараметры.Вставить("ТекКлючФайла", КлючЗначение.Ключ);

		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТекстовыйДокумент") Тогда
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		Иначе
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение",
				ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;

		КлючЗначение.Значение.НачатьЗапись(ОповещениеОЗаверешении, ИмяФайла);
		Прервать;
	КонецЦикла;

	Если Не ЕстьНеСохраненное Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

Функция КаталогСохраненияРедактора(ВидРедактора)
	СтруктураФайловыхПеременных=УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	Если Не СтруктураФайловыхПеременных.Свойство("КаталогВременныхФайлов") Тогда
		Возврат "";
	КонецЕсли;

	Возврат СтруктураФайловыхПеременных.КаталогВременныхФайлов + "tools_ui_1c" + ПолучитьРазделительПути()
		+ Формат(УИ_ОбщегоНазначенияКлиент.НомерСеанса(), "ЧГ=0;") + ПолучитьРазделительПути() + ВидРедактора;
КонецФункции

Функция ИмяФайлаРедактораAceДляЯзыка(Язык = "bsl") Экспорт
	Возврат КаталогСохраненияРедактора(УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода().Ace)
		+ ПолучитьРазделительПути() + Язык + ".html";
КонецФункции

Функция ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык)

	ТекстAce=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "ace" + ПолучитьРазделительПути() + "ace.js";
	ТекстLT=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + "ace" + ПолучитьРазделительПути()
		+ "ext-language_tools.js";

	ТекЯзык=НРег(Язык);
	Если ТекЯзык = "bsl" Тогда
		ТекЯзык="_1c";
	КонецЕсли;
	ТекстHTML= "<!DOCTYPE html>
			   |<html lang=""ru"">
			   |<head>
			   |<title>ACE in Action</title>
			   |<style type=""text/css"" media=""screen"">
			   |    #editor { 
			   |        position: absolute;
			   |        top: 0;
			   |        right: 0;
			   |        bottom: 0;
			   |        left: 0;
			   |    }
			   |</style>
			   |</head>
			   |<body>
			   |
			   |<div id=""editor""></div>
			   |    
			   |<script src=""file://" + ТекстAce + """ type=""text/javascript"" charset=""utf-8""></script>
													|<script src=""file://" + ТекстLT + """ type=""text/javascript"" charset=""utf-8""></script>
																						|<script>
																						|    // trigger extension
																						|    ace.require(""ace/ext/language_tools"");
																						|    var editor = ace.edit(""editor"");
																						|    editor.session.setMode(""ace/mode/"
		+ ТекЯзык + """);
					|    editor.setTheme(""ace/theme/ones"");
					|    // enable autocompletion and snippets
					|    editor.setOptions({
					|        selectionStyle: 'line',
					|        highlightSelectedWord: true,
					|        showLineNumbers: true,
					|        enableBasicAutocompletion: true,
					|        enableSnippets: true,
					|        enableLiveAutocompletion: true
					|    });
					|</script>
					|
					|</body>
					|</html>";

	Возврат ТекстHTML;
КонецФункции

Процедура ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки,
	КаталогСохраненияБибилиотеки, Язык)
	Текст= Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык));

	СоответствиеФайловБиблиотеки.Вставить(Язык + ".html", Текст);

КонецПроцедуры
#КонецОбласти