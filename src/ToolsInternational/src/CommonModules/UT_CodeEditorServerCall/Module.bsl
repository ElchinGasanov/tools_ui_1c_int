#Region Public

Function MetaDataDescriptionForMonacoEditorInitialize() Export
	Return UT_CodeEditorServer.MetaDataDescriptionForMonacoEditorInitialize();
EndFunction

Function ConfigurationMetadataObjectDescriptionByName(ObjectType, ObjectName) Export
	Return UT_CodeEditorServer.ConfigurationMetadataObjectDescriptionByName(ObjectType, ObjectName);	
EndFunction

Function ConfigurationMetadataDescription(IncludeAttributesDescription = True) Export
	Return UT_CodeEditorServer.ConfigurationMetadataDescription(IncludeAttributesDescription);
EndFunction

Function MetadataListByType(MetadataType) Export
	Return UT_CodeEditorServer.MetadataListByType(MetadataType);
EndFunction

Function ReferenceTypesMap() Export
	Return UT_CodeEditorServer.ReferenceTypesMap();
EndFunction

// Редакторы для сборки с преобразованным текстом модуля.
// 
// Параметры:
//  РедакторыДляСборки - Массив из см. УИ_РедакторКодаКлиентСервер.НовыйДанныеРедактораДляСборкиОбработки - Редакторы для сборки
// 
// Возвращаемое значение:
// Массив из см. УИ_РедакторКодаКлиентСервер.НовыйДанныеРедактораДляСборкиОбработки 
Function РедакторыДляСборкиСПреобразованнымТекстомМодуля(РедакторыДляСборки) Export
	Возврат УИ_РедакторКодаСервер.РедакторыДляСборкиСПреобразованнымТекстомМодуля(РедакторыДляСборки);	
EndFunction

// Ссылка на код в сервисе после загрузки.
// 
// Параметры:
//  ТекстАлгоритма -Строка-Текст алгоритма
//  РежимЗапроса -Булево -Режим запроса
// 
// Возвращаемое значение:
//  Строка -  Ссылка на код в сервисе после загрузки
Function СсылкаНаКодВСервисеПослеЗагрузки(ТекстАлгоритма, РежимЗапроса) Export
	РезультатОтправки = УИ_Paste1CAPI.РезультатЗагрузкиАлгоритмаВСервис(ТекстАлгоритма, РежимЗапроса);
	Если РезультатОтправки = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить алгоритм в сервис");
		Возврат "";
	КонецЕсли;
	
	Если Не РезультатОтправки.Успешно Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить алгоритм в сервис: "
															 + РезультатОтправки.Ошибки);
		Возврат "";

	КонецЕсли;

	Возврат РезультатОтправки.Ссылка;
EndFunction

// Данные алгоритма в сервисе.
// 
// Параметры:
//  Ссылка -Строка- Ссылка
// 
// Возвращаемое значение:
// см. УИ_Paste1CAPI.НовыйДанныеАлгоритма
// Возвращаемое значение:
// Неопределено - Получить данные из сервиса не удалось
Function ДанныеАлгоритмаВСервисе(Ссылка) Export
	СтруктураСсылки = УИ_КоннекторHTTP.РазобратьURL(Ссылка);	
	
	МассивПути = СтрРазделить(СтруктураСсылки.Путь, "/", Ложь);
	Если МассивПути.Количество() = 0 Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Указан невалидный адрес кода");
		Возврат Неопределено;
	КонецЕсли;
		
	ИдентификаторАлгоритма = МассивПути[МассивПути.Количество()-1];	
	
	Возврат  УИ_Paste1CAPI.ДанныеАлгоритмаСервиса(ИдентификаторАлгоритма);
	
EndFunction

// Данные библиотеки общего макета.
// 
// Параметры:
//  ИмяМакета - Строка -Имя макета
//  ИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  см. УИ_РедакторКодаКлиентСервер.НовыйДанныеБиблиотекиРедактора
Function ДанныеБиблиотекиОбщегоМакета(ИмяМакета, ИдентификаторФормы) Export
	Возврат УИ_РедакторКодаСервер.ДанныеБиблиотекиОбщегоМакета(ИмяМакета, ИдентификаторФормы);
EndFunction

#EndRegion