&НаКлиенте
Перем мОбычныеПрикладныеОбъекты;

&НаКлиенте
Перем мТекущийОбъектДерева;

&НаКлиенте
Перем мОписаниеПравДоступа;

&НаКлиенте
Перем мИдентификаторИзбранного;

&НаКлиенте
Перем мПараметрыКластера1С;
&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Object");
КонецФункции
&НаКлиенте
Процедура вПоказатьПредупреждение(Текст)
	ПоказатьПредупреждение( , Текст, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьВопрос(ТекстВопроса, ИмяПроцедуры, ДопПараметры = Неопределено)
	ПоказатьВопрос(Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОперацияНеПоддерживаетсяДляВебКлиента()
	вПоказатьПредупреждение("Для Web-клиента данная операция не поддерживается!");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вЗаполнитьКонтекстФормы(СтрукКонтекст)
	СтрукКонтекст.Вставить("ВерсииПодсистем", (Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") <> Неопределено));
	СтрукКонтекст.Вставить("МонопольныйРежим", МонопольныйРежим());
КонецПроцедуры

&НаСервереБезКонтекста
Функция вЕстьПраваАдминистратора()
	Возврат ПравоДоступа("Администрирование", Метаданные);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьИдентификаторПользователя(Знач Имя)
	пПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);

	Возврат ?(пПользователь = Неопределено, "", Строка(пПользователь.УникальныйИдентификатор));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вЗначениеВМассив(Знач Значение)
	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ObjectsTree.FullName");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "Конфигурация";
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ServiceTree.Шрифт, , , Истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовИмя");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ObjectsTree.NodeType");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоОбъектовИмя");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ServiceTree.IsGroup");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.ServiceTree.Шрифт, , , Истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоСервисПредставление");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ServiceTree.Enabled");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(83, 106, 194));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоСервисПредставление");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("VerifiableRightsTable.Mark");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.VerifiableRightsTable.Шрифт, , ,
		Истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТабПроверяемыеПраваОбъектМД");
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТабПроверяемыеПраваПраво");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("_SessionList.CurrentSession");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("_SessionList");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("_ConnectionsList.ТекущееСоединение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("_ConnectionsList");

КонецПроцедуры

&НаКлиенте
Функция вСформироватьСтруктуруНастроекФормыСвойствОбъекта()
	Струк = Новый Структура("_ShowObjectSubscribtion, _ShowObjectSubsystems, _ShowCommonObjectCommands, _ShowExternalObjectCommands, _ShowStorageStructureInTermsOf1C");
	ЗаполнитьЗначенияСвойств(Струк, ЭтаФорма);

	Возврат Струк;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	PathToForms = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Форма.";

	пЕстьПраваАдминистратора = вЕстьПраваАдминистратора();
	WaitingTimeBeforePasswordRecovery=20;
	
	//Элементы.СтрНастройки.Видимость = ложь;
	Элементы.СтрСтруктураХранения.Видимость = Ложь;
	Элементы.СтраницыПраваНаОбъект.Видимость = Ложь;
	Элементы._DisplayObjectsRights.Enabled = пЕстьПраваАдминистратора;
	Элементы.ДеревоОбъектовАдминистраторам.Enabled = пЕстьПраваАдминистратора;
	Элементы.СтрПользователиИБ.Видимость = пЕстьПраваАдминистратора;
	Элементы._СписокСеансов_ЗавершитьСеансы.Enabled = пЕстьПраваАдминистратора;
	Элементы.СтрСеансы.Видимость = ПравоДоступа("АктивныеПользователи", Метаданные);
	Элементы._СписокСеансов_ЗавершитьСеансы.Enabled = пЕстьПраваАдминистратора;

	Элементы.СтрРасширенияКонфигурации.Видимость = Ложь;
	//Элементы.СтрРасширенияКонфигурации.Видимость = вПроверитьНаличиеТипа("РасширениеКонфигурации");

	_FormContext = Новый Структура;
	вЗаполнитьКонтекстФормы(_FormContext);
	вЗаполнитьДеревоСервис();

	_FavoritesContent = Новый Структура("Version, Данные", 1, Новый Массив);

	УстановитьУсловноеОформление();

	UT_Common.ToolFormOnCreateAtServer(ЭтотОбъект, Отказ, СтандартнаяОбработка,
		Элементы.ObjectsTree.КоманднаяПанель);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если _ShowStandardSettings Тогда
		Элементы.СтрСтандартныеНастройки.Видимость = Истина;
	КонецЕсли;

	Если _ShowTablesAndIndexesDB Тогда
		Элементы.СтрСтруктураХранения.Видимость = Истина;
	КонецЕсли;

	Значение = Настройки["_FavoritesContent"];
	Если Значение <> Неопределено Тогда
		Если Не Значение.Свойство("Version") Тогда
			Значение.Вставить("Version", 1);
		КонецЕсли;
		_FavoritesContent = Значение;

		СтрокиДЗ = ObjectsTree.ПолучитьЭлементы();
		Если СтрокиДЗ.Количество() <> 0 Тогда
			// перезаполним избранное
			Для Каждого РазделДЗ Из СтрокиДЗ Цикл
				Если РазделДЗ.FullName = "Избранное" Тогда
					РазделДЗ.ПолучитьЭлементы().Очистить();
					Для Каждого Элем Из _FavoritesContent.Данные Цикл
						ЗаполнитьЗначенияСвойств(РазделДЗ.ПолучитьЭлементы().Добавить(), Элем);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Элементы._СписокПользователейИБПереченьРолей.Видимость = _ShowUserRolesList;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	// сформируем избранное
	Для Каждого РазделДЗ Из ObjectsTree.ПолучитьЭлементы() Цикл
		Если РазделДЗ.FullName = "Избранное" Тогда
			ПереченьПолейУзлаДЗ = вПереченьПолейУзлаДЗ();
			_FavoritesContent.Данные.Очистить();
			Для Каждого СтрДЗ Из РазделДЗ.ПолучитьЭлементы() Цикл
				Струк = Новый Структура(ПереченьПолейУзлаДЗ);
				ЗаполнитьЗначенияСвойств(Струк, СтрДЗ);
				_FavoritesContent.Данные.Добавить(Струк);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Настройки.Вставить("_FavoritesContent", _FavoritesContent);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мТекущийОбъектДерева = "";

	вСформироватьОписаниеПравДоступа();
	вЗаполнитьПроверяемыеПраваДоступа();

	мОбычныеПрикладныеОбъекты = Новый Структура("Константа, Справочник, Документ, ЖурналДокументов, ПланВидовХарактеристик, ПланВидовРасчета, ПланСчетов
												|, Обработка, Отчет, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача
												|, ПланОбмена");

	СтрокиДЗ = ObjectsTree.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();

	СтрДЗ = СтрокиДЗ.Добавить();
	ЗаполнитьЗначенияСвойств(СтрДЗ, вСформироватьУзелКонфигурация());
	СтрДЗ.NodeType = 1;
	
	
	// избранное
	СтрДЗ = СтрокиДЗ.Добавить();
	СтрДЗ.Name = "Избранное...";
	СтрДЗ.ВидУзла = "Избранное";
	СтрДЗ.NodeType = 1;
	СтрДЗ.FullName = "Избранное";
	мИдентификаторИзбранного = СтрДЗ.ПолучитьИдентификатор();

	Для Каждого Элем Из _FavoritesContent.Данные Цикл
		НС = СтрДЗ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	СтрДЗ = СтрокиДЗ.Добавить();
	СтрДЗ.Name = "Общие";
	СтрДЗ.ВидУзла = "ГруппаРазделовМД";
	СтрДЗ.NodeType = 1;
	СтрДЗ.ПолучитьЭлементы().Добавить();

	СтрукРазделы = Новый Структура("Константы, Справочники, Документы, ЖурналыДокументов, Перечисления, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов
								   |, Обработки, Отчеты, РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета, БизнесПроцессы, Задачи");

	вРассчитатьКоличествоОбъектовМД(СтрукРазделы);

	Для Каждого Элем Из СтрукРазделы Цикл
		СтрДЗ = СтрокиДЗ.Добавить();
		СтрДЗ.Name = Элем.Key;
		СтрДЗ.Name = Элем.Key + " (" + Элем.Значение + ")";
		СтрДЗ.ВидУзла = "РазделМД";
		СтрДЗ.NodeType = 1;
		СтрДЗ.ПолучитьЭлементы().Добавить();
	КонецЦикла;

	_StorageAddresses = Новый Структура("Движения, Подписки, Команды, ОбщиеКоманды, Подсистемы, РолиИПользователи");
	_StorageAddresses.Движения = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_StorageAddresses.Подписки = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_StorageAddresses.Команды  = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_StorageAddresses.ОбщиеКоманды = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_StorageAddresses.Подсистемы = ПоместитьВоВременноеХранилище(-1, УникальныйИдентификатор);
	_StorageAddresses.РолиИПользователи = "";
	
	// хранилища настроек
	СтрокиДЗ = SettingsTree.ПолучитьЭлементы();
	СтрокиДЗ.Очистить();

	ГруппаДЗ = СтрокиДЗ.Добавить();
	ГруппаДЗ.Presentation = "Стандартные хранилища настроек";

	СтрукРазделы = Новый Структура("ХранилищеВариантовОтчетов, ХранилищеНастроекДанныхФорм, ХранилищеОбщихНастроек
								   |, ХранилищеПользовательскихНастроекДинамическихСписков, ХранилищеПользовательскихНастроекОтчетов, ХранилищеСистемныхНастроек");

	Для Каждого Элем Из СтрукРазделы Цикл
		СтрДЗ = ГруппаДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Name = Элем.Key;
		СтрДЗ.Presentation = Элем.Key;
		СтрДЗ.ВидУзла = "Х";
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьВНовомОкне(Команда)
	ОткрытьФорму(PathToForms, , , ТекущаяДата(), , , , РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура _СвернутьВсеУзлы(Команда)
	Для Каждого УзелДЗ Из ObjectsTree.ПолучитьЭлементы() Цикл
		Элементы.ObjectsTree.Свернуть(УзелДЗ.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьСписокПользователейИБ(Команда)
	Для Каждого Стр Из ObjectsTree.ПолучитьЭлементы() Цикл
		Если Стр.Name = "Общие" Тогда
			Для Каждого УзелДЗ Из Стр.ПолучитьЭлементы() Цикл
				Если УзелДЗ.ВидУзла = "РазделМД" И СтрНайти(УзелДЗ.Имя, "Пользователи") = 1 Тогда
					СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
					СтрокиДЗ.Очистить();

					Струк = вПолучитьСоставРазделаМД("Пользователи");
					Для Каждого Элем Из Струк.МассивОбъектов Цикл
						СтрДЗ = СтрокиДЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					КонецЦикла;
					УзелДЗ.Name = "Пользователи (" + Струк.ЧислоОбъектов + ")";

					Прервать;
				КонецЕсли;
			КонецЦикла;

			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _СоздатьПользователяИБ(Команда)
	СтрукПараметры = Новый Структура("РежимРаботы", 1);
	ОткрытьФорму(PathToForms + "ФормаПользовательИБ", СтрукПараметры, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _СкопироватьПользователяИБ(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено И СтрНайти(ТекДанные.ПолноеИмя, "User.") = 1 Тогда
		СтрукПараметры = Новый Структура("РежимРаботы, DBUserID", 2, ТекДанные.ObjectPresentation);
		ОткрытьФорму(PathToForms + "ФормаПользовательИБ", СтрукПараметры, , , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьПользователяИБ(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено И СтрНайти(ТекДанные.ПолноеИмя, "User.") = 1 Тогда
		пТекст = СтрШаблон("User ""%1"" будет удален из информационной базы!
						   |Продолжить?", ТекДанные.Имя);
		ПоказатьВопрос(Новый ОписаниеОповещения("вУдалитьПользователяОтвет", ЭтаФорма, ТекДанные), пТекст,
			РежимДиалогаВопрос.ДаНетОтмена, 20);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вУдалитьПользователяОтвет(Ответ, ТекДанные) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		пРезультат = вУдалитьПользователяИБ(ТекДанные.ПредставлениеОбъекта);
		Если пРезультат.Отказ Тогда
			вПоказатьПредупреждение(пРезультат.ПричинаОтказа);
		Иначе
			ТекДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вУдалитьПользователяИБ(Идентификатор)
	пРезультат = Новый Структура("Отказ, ПричинаОтказа", Ложь, "");

	Попытка
		пUUID = Новый УникальныйИдентификатор(Идентификатор);

		пПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(пUUID);
		Если пПользователь = Неопределено Тогда
			пРезультат.Отказ = Истина;
			пРезультат.ПричинаОтказа = "Указанный User не найден!";
			Возврат пРезультат;
		КонецЕсли;

		пТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

		Если пТекПользователь.UUID = пUUID Тогда
			пРезультат.Отказ = Истина;
			пРезультат.ПричинаОтказа = "Нельзя удалить текущего пользоватля!";
			Возврат пРезультат;
		КонецЕсли;

		пПользователь.Удалить();
	Исключение
		пРезультат.Отказ = Истина;
		пРезультат.ПричинаОтказа = ОписаниеОшибки();
	КонецПопытки;

	Возврат пРезультат;
КонецФункции
&НаКлиенте
Процедура кПоказатьСвойстваОбъекта(Команда)
	Если Элементы.PagesGroup.ТекущаяСтраница.Name = "СтрСтруктураХранения" Тогда
		ТекДанные = Неопределено;
		Если Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница.Name = "СтрИндексы" Тогда
			ТекДанные = Элементы._Indexes.ТекущиеДанные;
		ИначеЕсли Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница.Name = "СтрТаблицы" Тогда
			ТекДанные = Элементы._Tables.ТекущиеДанные;
		КонецЕсли;

		Если ТекДанные <> Неопределено Тогда
			пПолноеИмя = ТекДанные.Metadata;
			Если пПолноеИмя = "<не задано>" Тогда
				Возврат;
			КонецЕсли;

			Поз = СтрНайти(пПолноеИмя, ".", , , 2);
			Если Поз <> 0 Тогда
				пПолноеИмя = Лев(пПолноеИмя, Поз - 1);
			КонецЕсли;

			СтрукПараметры = Новый Структура("FullName, PathToForms, _StorageAddresses, ОписаниеПравДоступа",
				пПолноеИмя, PathToForms, _StorageAddresses, мОписаниеПравДоступа);
			СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
			ОткрытьФорму(PathToForms + "ФормаСвойств", СтрукПараметры, , пПолноеИмя, , , ,
				РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" Тогда
			Если СтрНайти(ТекДанные.ПолноеИмя, "User.") = 1 Тогда
				СтрукПараметры = Новый Структура("DBUserID", ТекДанные.ObjectPresentation);
				ОткрытьФорму(PathToForms + "ФормаПользовательИБ", СтрукПараметры, , ТекДанные.ПолноеИмя, , , ,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				СтрукПараметры = Новый Структура("FullName, PathToForms, _StorageAddresses, ОписаниеПравДоступа",
					ТекДанные.FullName, PathToForms, _StorageAddresses, мОписаниеПравДоступа);
				СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
				ОткрытьФорму(PathToForms + "ФормаСвойств", СтрукПараметры, , ТекДанные.ПолноеИмя, , , ,
					РежимОткрытияОкнаФормы.Независимый);
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидУзла = "Конфигурация" Тогда
			СтрукПараметры = Новый Структура("FullName, PathToForms, _StorageAddresses, ОписаниеПравДоступа",
				"Конфигурация", PathToForms, _StorageAddresses, мОписаниеПравДоступа);
			СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
			ОткрытьФорму(PathToForms + "ФормаСвойств", СтрукПараметры, , ТекДанные.ПолноеИмя, , , ,
				РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьФормуСписка(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" И Не вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
			Попытка
				ВидОбъектМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".") - 1);

				Если ВидОбъектМД = "User" Тогда
					СтандартнаяОбработка = Ложь;
					СтрукПараметры = Новый Структура("DBUserID", ТекДанные.ObjectPresentation);
					ОткрытьФорму(PathToForms + "ФормаПользовательИБ", СтрукПараметры, , ТекДанные.ПолноеИмя, , , ,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					Возврат;
				КонецЕсли;

				Если Не мОбычныеПрикладныеОбъекты.Свойство(ВидОбъектМД) Тогда
					Возврат;
				КонецЕсли;

				Если ВидОбъектМД = "Обработка" Тогда
					ИмяФормыМД = ".Форма";
				ИначеЕсли ВидОбъектМД = "Отчет" Тогда
					ИмяФормыМД = ".Форма";
				ИначеЕсли ВидОбъектМД = "Константа" Тогда
					ИмяФормыМД = ".ФормаКонстант";
				ИначеЕсли ВидОбъектМД = "ОбщаяФорма" Тогда
					ИмяФормыМД = "";
				ИначеЕсли ВидОбъектМД = "Перечисление" Тогда
					СтандартнаяОбработка = Истина;
					Возврат;
				Иначе
					ИмяФормыМД = ".ФормаСписка";
				КонецЕсли;

				СтандартнаяОбработка = Ложь;
				ОткрытьФорму(ТекДанные.FullName + ИмяФормыМД);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кСвернутьРазделДерева(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		УзелДЗ = ТекДанные.ПолучитьРодителя();
		Если УзелДЗ <> Неопределено Тогда
			Строка = УзелДЗ.ПолучитьИдентификатор();
			Элементы.ObjectsTree.ТекущаяСтрока = Строка;
			Элементы.ObjectsTree.Свернуть(Строка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кЗапускКонфигуратор(Команда)
	вЗапуститьСеанс1С(1);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТолстыйКлиент(Команда)
	вЗапуститьСеанс1С(2);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТолстыйКлиентУпр(Команда)
	вЗапуститьСеанс1С(3);
КонецПроцедуры

&НаКлиенте
Процедура кЗапускТонкийКлиент(Команда)
	вЗапуститьСеанс1С(4);
КонецПроцедуры

&НаКлиенте
Процедура кЗапуск1СРасш(Команда)
#Если ВебКлиент Тогда
	вОперацияНеПоддерживаетсяДляВебКлиента();
#Иначе
		ОткрытьФорму(PathToForms + "ФормаЗапуска1С", , ЭтаФорма, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередРазворачиванием(Элемент, Строка, Отказ)
	Если Не _DisplayObjectsRights Тогда
		Элементы.ObjectsTree.ТекущаяСтрока = Строка; // полезно при раскрытии узлов, которые находятся выше
	КонецЕсли;

	УзелДЗ = ObjectsTree.НайтиПоИдентификатору(Строка);
	СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
	Если СтрокиДЗ.Количество() = 1 И ПустаяСтрока(СтрокиДЗ[0].ВидУзла) Тогда
		Отказ = Истина;
		СтрокиДЗ.Очистить();

		ИмяУзлаДЗ = УзелДЗ.Name;
		Поз = СтрНайти(ИмяУзлаДЗ, " (");
		Если Поз <> 0 Тогда
			ИмяУзлаДЗ = Лев(ИмяУзлаДЗ, Поз - 1);
		КонецЕсли;

		Если УзелДЗ.ВидУзла = "РазделМД" Тогда
			УзелДЗ = ObjectsTree.НайтиПоИдентификатору(Строка);
			СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
			СтрокиДЗ.Очистить();

			Если ИмяУзлаДЗ = "Документы" Тогда
				Струк = Новый Структура("НумераторыДокументов, Последовательности");
				вРассчитатьКоличествоОбъектовМД(Струк);
				Для Каждого Элем Из Струк Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					СтрДЗ.ВидУзла = "РазделМД";
					СтрДЗ.Name = Элем.Key + " (" + Элем.Значение + ")";
					СтрДЗ.ПолучитьЭлементы().Добавить();
				КонецЦикла;
				
				//СтрДЗ = СтрокиДЗ.Добавить();
				//СтрДЗ.ВидУзла = "РазделМД";
				//СтрДЗ.Name = "НумераторыДокументов";
				//СтрДЗ.ПолучитьЭлементы().Добавить();
				//
				//СтрДЗ = СтрокиДЗ.Добавить();
				//СтрДЗ.ВидУзла = "РазделМД";
				//СтрДЗ.Name = "Последовательности";
				//СтрДЗ.ПолучитьЭлементы().Добавить();
			КонецЕсли;

			Струк = вПолучитьСоставРазделаМД(ИмяУзлаДЗ);
			Для Каждого Элем Из Струк.МассивОбъектов Цикл
				СтрДЗ = СтрокиДЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				Если СтрНайти(СтрДЗ.ПолноеИмя, "Перечисление.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "Подсистема.") = 1 Тогда
					Если Элем.ЕстьДети Тогда
						СтрДЗ.ПолучитьЭлементы().Добавить();
					КонецЕсли;
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "WebСервис.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				ИначеЕсли СтрНайти(СтрДЗ.ПолноеИмя, "HTTPСервис.") = 1 Тогда
					СтрДЗ.ПолучитьЭлементы().Добавить();
				КонецЕсли;
			КонецЦикла;
			УзелДЗ.Name = ИмяУзлаДЗ + " (" + Струк.ЧислоОбъектов + ")";

		ИначеЕсли УзелДЗ.ВидУзла = "ГруппаРазделовМД" Тогда
			СтрукРазделы = Новый Структура("Подсистемы, ОбщиеМодули, ПараметрыСеанса, Пользователи, Роли, ОбщиеРеквизиты, ПланыОбмена, ПодпискиНаСобытия, РегламентныеЗадания
										   |, ФункциональныеОпции, ПараметрыФункциональныхОпций, ОпределяемыеТипы, ХранилищаНастроек, ОбщиеФормы, ОбщиеКоманды, ГруппыКоманд, ПрочиеКоманды, ОбщиеМакеты, ПакетыXDTO, WebСервисы, HTTPСервисы");

			вРассчитатьКоличествоОбъектовМД(СтрукРазделы);

			Для Каждого Элем Из СтрукРазделы Цикл
				Если Элем.Key = "Пользователи" И Не вЕстьПраваАдминистратора() Тогда
					Продолжить;
				КонецЕсли;
				СтрДЗ = СтрокиДЗ.Добавить();
				СтрДЗ.Name = Элем.Key;
				СтрДЗ.Name = Элем.Key + " (" + Элем.Значение + ")";
				СтрДЗ.ВидУзла = "РазделМД";
				СтрДЗ.NodeType = 1;
				СтрДЗ.ПолучитьЭлементы().Добавить();
			КонецЦикла;

		ИначеЕсли УзелДЗ.ВидУзла = "MetadataObject" Тогда
			ВидОбъектМД = Лев(УзелДЗ.ПолноеИмя, СтрНайти(УзелДЗ.ПолноеИмя, ".") - 1);

			УзелДЗ = ObjectsTree.НайтиПоИдентификатору(Строка);
			СтрокиДЗ = УзелДЗ.ПолучитьЭлементы();
			СтрокиДЗ.Очистить();

			Если ВидОбъектМД = "Перечисление" Тогда
				МассивОбъектов = вПолучитьСоставПеречисления(УзелДЗ.ПолноеИмя);
				Для Каждого Элем Из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "Подсистема" Тогда
				МассивОбъектов = вПолучитьСоставПодсистемы(УзелДЗ.ПолноеИмя);
				Для Каждого Элем Из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					Если Элем.ЕстьДети Тогда
						СтрДЗ.ПолучитьЭлементы().Добавить();
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "WebСервис" Тогда
				МассивОбъектов = вПолучитьОперацииWebСервиса(УзелДЗ.ПолноеИмя);
				Для Каждого Элем Из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				КонецЦикла;
			ИначеЕсли ВидОбъектМД = "HTTPСервис" Тогда
				МассивОбъектов = вПолучитьМетодыHTTPСервиса(УзелДЗ.ПолноеИмя);
				Для Каждого Элем Из МассивОбъектов Цикл
					СтрДЗ = СтрокиДЗ.Добавить();
					ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
					Для Каждого ЭлемХ Из Элем.Методы Цикл
						ЗаполнитьЗначенияСвойств(СтрДЗ.ПолучитьЭлементы().Добавить(), ЭлемХ);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Элементы.ObjectsTree.Развернуть(Строка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗапуститьСеанс1С(ТипЗапуска)
	UT_CommonClient.Run1CSession(ТипЗапуска, ИмяПользователя());
КонецПроцедуры

&НаКлиенте
Процедура вВыполнитьКомандуОС(пКоманда)
	Попытка
		НачатьЗапускПриложения(Новый ОписаниеОповещения("вПослеЗапускаПриложения", ЭтаФорма), пКоманда);
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура вПослеЗапускаПриложения(КодВозврата, ДопПарам = Неопределено) Экспорт
	// фиктивная процедура для совместимости разных версий платыормы
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
Функция вПереченьПолейУзлаДЗ()
	Возврат "Name, Synonym, ОсновнаяТаблицаSQL, FullName, ВидУзла, NodeType, ObjectPresentation, NumberOfObjects";
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьСтруктуруУзлаДЗ(ВидУзла = "", Имя = "", ПолноеИмя = "", Синоним = "", ЕстьДети = Ложь,
	ПредставлениеОбъекта = "")
	Струк = Новый Структура("ВидУзла, Name, FullName, Synonym, ObjectPresentation, ЕстьДети, ОсновнаяТаблицаSQL",
		ВидУзла, Имя, ПолноеИмя, Синоним, ПредставлениеОбъекта, ЕстьДети, "");
	Возврат Струк;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьУзелКонфигурация()
	Струк = Новый Структура("Name, Synonym, Version", "", "", "");
	ЗаполнитьЗначенияСвойств(Струк, Метаданные);

	Если ПустаяСтрока(Струк.Синоним) Тогда
		Струк.Synonym = Струк.Name;
	КонецЕсли;
	Если Не ПустаяСтрока(Струк.Версия) Тогда
		Струк.Synonym = Струк.Synonym + " (" + Струк.Version + ")";
	КонецЕсли;

	Возврат вСформироватьСтруктуруУзлаДЗ("Конфигурация", Струк.Имя, "Конфигурация", Струк.Синоним);
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеСвойства(Object, ИмяСвойства)
	Струк = Новый Структура(ИмяСвойства);
	ЗаполнитьЗначенияСвойств(Струк, Object);

	Возврат (Струк[ИмяСвойства] <> Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСоставРазделаМД(Знач ИмяРаздела)
	Поз = СтрНайти(ИмяРаздела, " ");
	Если Поз <> 0 Тогда
		ИмяРаздела = Лев(ИмяРаздела, Поз - 1);
	КонецЕсли;

	СтрукРезультат = Новый Структура("ЧислоОбъектов, МассивОбъектов", 0, Новый Массив);
	
	// для упорядочивания по именам объектов
	пОбъектыСДопПредставлением = Новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыСчетов, БизнесПроцессы, Задачи");
	ЕстьДопПредставление = пОбъектыСДопПредставлением.Свойство(ИмяРаздела);

	ТипСтрока = Новый ОписаниеТипов("Строка");

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("MetadataObject");
	Таблица.Колонки.Добавить("Name", ТипСтрока);
	Таблица.Колонки.Добавить("Synonym", ТипСтрока);
	Таблица.Колонки.Добавить("ObjectPresentation", ТипСтрока);
	Таблица.Колонки.Добавить("ОсновнаяТаблицаSQL", ТипСтрока);
	Таблица.Колонки.Добавить("FullName", ТипСтрока);
	Таблица.Колонки.Добавить("ВидУзла", ТипСтрока);
	Таблица.Колонки.Добавить("ЕстьДети", Новый ОписаниеТипов("Булево"));

	Если ИмяРаздела = "Пользователи" Тогда
		Если вЕстьПраваАдминистратора() Тогда
			Для Каждого Элем Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
				Стр = Таблица.Добавить();
				Стр.Name = Элем.Name;
				Стр.Synonym = Элем.FullName;
				Стр.ObjectPresentation = Элем.UUID;
				Стр.FullName = "User." + Элем.Name;
				Стр.ВидУзла = "MetadataObject";
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ПрочиеКоманды" Тогда
		ПереченьРазделов = "Справочники, ЖурналыДокументов, Документы, Перечисления, Обработки, Отчеты,
						   |ПланыСчетов, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыОбмена,
						   |РегистрыСведений, РегистрыНакопления, РегистрыРасчета, РегистрыБухгалтерии,
						   |БизнесПроцессы, Задачи, КритерииОтбора";

		СтрукРазделы = Новый Структура(ПереченьРазделов);

		Для Каждого Элем Из СтрукРазделы Цикл
			Для Каждого ОбъектХХХ Из Метаданные[Элем.Key] Цикл
				ИмяТипаХХХ = ОбъектХХХ.ПолноеИмя();

				Если вПроверитьНаличиеСвойства(ОбъектХХХ, "Команды") Тогда
					Для Каждого Элем Из ОбъектХХХ.Команды Цикл
						Стр = Таблица.Добавить();
						Стр.MetadataObject = Элем;
						Стр.Name = Элем.Name;
						Стр.Synonym = Элем.Представление();
						Стр.FullName = Элем.ПолноеИмя();
						Стр.ВидУзла = "MetadataObject";
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	Иначе
		Для Каждого Элем Из Метаданные[ИмяРаздела] Цикл
			Стр = Таблица.Добавить();
			Стр.MetadataObject = Элем;
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.ObjectPresentation = ?(ЕстьДопПредставление, Элем.ПредставлениеОбъекта, "");
			Стр.FullName = Элем.ПолноеИмя();
			Стр.ВидУзла = "MetadataObject";

			Если ИмяРаздела = "Подсистемы" Тогда
				Стр.ЕстьДети = (Элем.Подсистемы.Количество() <> 0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ИмяРаздела = "ПрочиеКоманды" Тогда
		Таблица.Сортировать("FullName");
	Иначе
		Таблица.Сортировать("Name");
	КонецЕсли;

	Для Каждого Стр Из Таблица Цикл
		Струк = вСформироватьСтруктуруУзлаДЗ();
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.МассивОбъектов.Добавить(Струк);
	КонецЦикла;

	Если ИмяРаздела = "Подсистемы" Тогда
		СтрукРезультат.ЧислоОбъектов = вПолучитьКоличествоПодсистем();
	Иначе
		СтрукРезультат.ЧислоОбъектов = СтрукРезультат.МассивОбъектов.Количество();
	КонецЕсли;

	Возврат СтрукРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСоставПеречисления(Знач ПолноеИмя)
	МассивОбъектов = Новый Массив;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для Каждого ЭлемХ Из ОбъектМД.ЗначенияПеречисления Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("ЗначениеПеречисления", ЭлемХ.Имя, "", ЭлемХ.Представление());
			МассивОбъектов.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьОперацииWebСервиса(Знач ПолноеИмя)
	МассивОбъектов = Новый Массив;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для Каждого ЭлемХ Из ОбъектМД.Операции Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("MetadataObject", ЭлемХ.Имя, ЭлемХ.ПолноеИмя(), ЭлемХ.Представление());
			МассивОбъектов.Добавить(Струк);
		КонецЦикла;
	КонецЕсли;

	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьМетодыHTTPСервиса(Знач ПолноеИмя)
	МассивОбъектов = Новый Массив;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для Каждого ЭлемХ Из ОбъектМД.ШаблоныURL Цикл
			Струк = вСформироватьСтруктуруУзлаДЗ("MetadataObject", ЭлемХ.Имя, ЭлемХ.ПолноеИмя(), ЭлемХ.Представление());
			МассивОбъектов.Добавить(Струк);
			Струк.Вставить("Методы", Новый Массив);
			Для Каждого ЭлемХХХ Из ЭлемХ.Методы Цикл
				СтрукХХХ = вСформироватьСтруктуруУзлаДЗ("MetadataObject", ЭлемХХХ.Имя, ЭлемХХХ.ПолноеИмя(),
					ЭлемХХХ.Представление());
				Струк.Методы.Добавить(СтрукХХХ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьСоставПодсистемы(Знач ПолноеИмя)
	ТипСтрока = Новый ОписаниеТипов("Строка");

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("MetadataObject");
	Таблица.Колонки.Добавить("Name", ТипСтрока);
	Таблица.Колонки.Добавить("Synonym", ТипСтрока);
	Таблица.Колонки.Добавить("ObjectPresentation", ТипСтрока);
	Таблица.Колонки.Добавить("FullName", ТипСтрока);
	Таблица.Колонки.Добавить("ВидУзла", ТипСтрока);
	Таблица.Колонки.Добавить("ЕстьДети", Новый ОписаниеТипов("Булево"));

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	Если ОбъектМД <> Неопределено Тогда
		Для Каждого Элем Из ОбъектМД.Подсистемы Цикл
			Стр = Таблица.Добавить();
			Стр.MetadataObject = Элем;
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.FullName = Элем.ПолноеИмя();
			Стр.ВидУзла = "MetadataObject";
			Стр.ЕстьДети = (Элем.Подсистемы.Количество() <> 0);
		КонецЦикла;
	КонецЕсли;
	Таблица.Сортировать("Name");

	МассивОбъектов = Новый Массив;

	Для Каждого Стр Из Таблица Цикл
		Струк = вСформироватьСтруктуруУзлаДЗ();
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		МассивОбъектов.Добавить(Струк);
	КонецЦикла;

	Возврат МассивОбъектов;
КонецФункции

&НаСервереБезКонтекста
Процедура вРассчитатьКоличествоОбъектовМД(СтрукРазделы)
	УстановитьПривилегированныйРежим(Истина);

	Для Каждого Элем Из СтрукРазделы Цикл
		ЧислоОбъектов = 0;
		Если Элем.Key = "Пользователи" Тогда
			Если вЕстьПраваАдминистратора() Тогда
				ЧислоОбъектов = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество();
			КонецЕсли;
		ИначеЕсли Элем.Key = "Подсистемы" Тогда
			ЧислоОбъектов = вПолучитьКоличествоПодсистем();
		ИначеЕсли Элем.Key = "ПрочиеКоманды" Тогда
			ЧислоОбъектов = "???"; //вПолучитьКоличествоПодсистем();
		Иначе
			ЧислоОбъектов = Метаданные[Элем.Key].Количество();
		КонецЕсли;
		СтрукРазделы.Вставить(Элем.Ключ, ЧислоОбъектов);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьКоличествоПодсистем(Знач ЭтоПервыйВызов = Истина, ПодсистемаМД = Неопределено, Соотв = Неопределено)
	Если ЭтоПервыйВызов Тогда
		Соотв = Новый Соответствие;

		Для Каждого Элем Из Метаданные.Подсистемы Цикл
			вПолучитьКоличествоПодсистем(Ложь, Элем, Соотв);
		КонецЦикла;

		Возврат Соотв.Количество();
	Иначе
		Соотв.Вставить(ПодсистемаМД, 1);
		Для Каждого Элем Из ПодсистемаМД.Подсистемы Цикл
			Соотв.Вставить(Элем, 1);
			вПолучитьКоличествоПодсистем(Ложь, Элем, Соотв);
		КонецЦикла;

		Возврат 0;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция вЭтоПрочаяКоманда(ПолноеИмя)
	Возврат (СтрНайти(ПолноеИмя, "Подсистема.") <> 1 И СтрНайти(ПолноеИмя, ".Команда.") <> 0);
КонецФункции

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;

	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" Тогда
			Если вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
				кПоказатьСвойстваОбъекта(Неопределено);
				Возврат;
			КонецЕсли;

			СпецПеречень = "Обработка, Отчет";
			Струк = Новый Структура(СпецПеречень);

			ВидОбъектМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".") - 1);
			Если Струк.Свойство(ВидОбъектМД) Тогда
				кОткрытьФормуСписка(Неопределено);
			Иначе
				кПоказатьСвойстваОбъекта(Неопределено);
			КонецЕсли;
		ИначеЕсли ТекДанные.ВидУзла = "Конфигурация" Тогда
			кПоказатьСвойстваОбъекта(Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриИзменении(Элемент)
	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаКлиенте
Процедура кИзменитьМасштабОтображенияФорм(Команда)
	ОткрытьФорму(PathToForms + "ФормаВыбораМасштабаОтображения", , ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура кОткрытьФормуСпискаДоп(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" И Не вЭтоПрочаяКоманда(ТекДанные.ПолноеИмя) Тогда
			СтрукКатегории = Новый Структура("Справочник, Документ, ЖурналДокументов,ПланВидовХарактеристик, ПланВидовРасчета, ПланСчетов
											 |, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача");

			НадоОбработать = Ложь;
			Для Каждого Элем Из СтрукКатегории Цикл
				Если СтрНайти(ТекДанные.ПолноеИмя, Элем.Ключ) = 1 Тогда
					НадоОбработать = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НадоОбработать Тогда
				UT_CommonClient.ОpenDynamicList(ТекДанные.ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция вОбновитьТабНастройки(Знач ВидУзла, Знач Имя)
	УстановитьПривилегированныйРежим(Истина);

	Если ВидУзла = "Х" Тогда
		МенеджерХН = Вычислить(Имя);
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(МенеджерХН) <> Тип("СтандартноеХранилищеНастроекМенеджер") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не вЕстьПраваАдминистратора() Тогда
		ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		Отбор = Новый Структура("User", ТекПользователь.Name);
	Иначе
		Отбор = Неопределено;
	КонецЕсли;

	Попытка
		Выборка = МенеджерХН.Выбрать(Отбор);
		Пока Выборка.Следующий() Цикл
			НС = SettingsTable.Добавить();
			НС.SettingsKey = Выборка.SettingsKey;
			НС.ObjectKey = Выборка.ObjectKey;
			НС.User = Выборка.User;
			НС.Presentation = Выборка.Presentation;
		КонецЦикла;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Истина;
КонецФункции

&НаСервере
Процедура вУдалитьМассивНастроек(Знач Имя, Знач МассивСтрок)
	УстановитьПривилегированныйРежим(Истина);

	Попытка
		МенеджерХН = Вычислить(Имя);

		Для Каждого Элем Из МассивСтрок Цикл
			Стр = SettingsTable.НайтиПоИдентификатору(Элем);
			Если Стр <> Неопределено Тогда
				МенеджерХН.Удалить(Стр.ObjectKey, Стр.SettingsKey, Стр.User);
				SettingsTable.Удалить(Стр);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Если Не ПустаяСтрока(_NameOfSettingsManager) Тогда
		СтрукПараметры = Новый Структура;
		СтрукПараметры.Вставить("МассивСтрок", Новый ФиксированныйМассив(Элемент.ВыделенныеСтроки));
		вПоказатьВопрос("Отмеченные настройки будут удалены. Продолжить?", "ТабНастройкиПередУдалениемДалее",
			СтрукПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабНастройкиПередУдалениемДалее(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		вУдалитьМассивНастроек(_NameOfSettingsManager, Параметры.МассивСтрок);
		вОбновитьЗаголовкиНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кОбновтьТаблицуНастроек(Команда)
	ТекДанные = Элементы.SettingsTree.ТекущиеДанные;

	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = "Х" Тогда
		SettingsTable.Очистить();

		Если Не вОбновитьТабНастройки(ТекДанные.ВидУзла, ТекДанные.Имя) Тогда
			ТекДанные.ВидУзла = "-";
			ТекДанные.Presentation = ТекДанные.Name + " (не поддерживается)";
		КонецЕсли;

		_NameOfSettingsManager = ТекДанные.Name;

		вОбновитьЗаголовкиНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбновитьЗаголовкиНастройки()
	Элементы.ДекорацияНастройки.Заголовок = _NameOfSettingsManager + " (" + SettingsTable.Количество() + " шт.)";
КонецПроцедуры



// страница Сервис

&НаСервере
Процедура вЗаполнитьДеревоСервис()
	Макет = вПолучитьОбработку().ПолучитьМакет("МакетСервис");
	Если Макет = Неопределено Тогда
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;

	СтрукСвойства = Новый Структура("Enabled, Presentation, ВидУзла, Name, Comment, ДоступностьВыражение",
		Истина);

	КореньДЗ = ServiceTree;
	УзелДЗ = ServiceTree;

	Для НомерСтроки = 2 По Макет.ВысотаТаблицы Цикл
		СтрукСвойства.Presentation = СокрЛП(Макет.Область(НомерСтроки, 1).Текст);

		Если Не ПустаяСтрока(СтрукСвойства.Представление) Тогда
			СтрукСвойства.ВидУзла = СокрЛП(Макет.Область(НомерСтроки, 2).Текст);
			СтрукСвойства.Name = СокрЛП(Макет.Область(НомерСтроки, 3).Текст);
			СтрукСвойства.ДоступностьВыражение = СокрЛП(Макет.Область(НомерСтроки, 4).Текст);
			СтрукСвойства.Comment = СокрЛП(Макет.Область(НомерСтроки, 5).Текст);

			Если СтрукСвойства.ВидУзла = "Г" Тогда
				УзелДЗ = КореньДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(УзелДЗ, СтрукСвойства);
				УзелДЗ.IsGroup = Истина;
				УзелДЗ.Picture = -1;
			Иначе
				СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, СтрукСвойства);
				Если Не ПустаяСтрока(СтрукСвойства.ДоступностьВыражение) Тогда
					СтрДЗ.Enabled = Вычислить(СтрукСвойства.ДоступностьВыражение);
				КонецЕсли;
				Если Не СтрДЗ.Enabled Тогда
					СтрДЗ.Presentation = СтрДЗ.Presentation + " (не доступно)";
				КонецЕсли;

				Если СтрДЗ.Name = "ПереключитьМонопольныйРежим" Тогда
					СтрДЗ.Presentation = ?(_FormContext.МонопольныйРежим, "Отключить монопольный режим",
						"Установить монопольный режим");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрДЗ = ServiceTree.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрДЗ <> Неопределено Тогда
		Если Не СтрДЗ.IsGroup Тогда
			СтандартнаяОбработка = Ложь;
			Если СтрДЗ.Enabled Тогда
				Попытка
					вОбработатьКомандуСервис(СтрДЗ);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьКомандуСервис(СтрДЗ)
	Если СтрДЗ.Name = "ВерсииПодсистем" Тогда
		ОткрытьФорму("РегистрСведений.ВерсииПодсистем.ФормаСписка");
	ИначеЕсли СтрДЗ.Name = "ОбновитьПовторноИспользуемыеЗначения" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	ИначеЕсли СтрДЗ.Name = "ОчиститьИзбранное" Тогда
		вПоказатьВопрос("Избранное будет очищено. Продолжить?", "вОчиститьИзбранное");
	ИначеЕсли СтрДЗ.Name = "МасштабОтображения" Тогда
		кИзменитьМасштабОтображенияФорм(Неопределено);
	ИначеЕсли СтрДЗ.Name = "УстановитьБлокировкуСеансов" Тогда
		ОткрытьФорму(PathToForms + "ФормаБлокировкиСеансов", , ЭтаФорма, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрДЗ.Name = "ПереключитьМонопольныйРежим" Тогда
		вПерключитьМонопольныйРежим(_FormContext);
		СтрДЗ.Presentation = ?(_FormContext.МонопольныйРежим, "Отключить монопольный режим",
			"Установить монопольный режим");
	ИначеЕсли СтрДЗ.Name = "Запуск1С" Тогда
#Если ВебКлиент Тогда
		вОперацияНеПоддерживаетсяДляВебКлиента();
#Иначе
			ОткрытьФорму(PathToForms + "ФормаЗапуска1С", , ЭтаФорма, , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
#КонецЕсли
	ИначеЕсли
	СтрДЗ.Name = "Конфигуратор1С" Тогда
		вЗапуститьСеанс1С(1);
	ИначеЕсли СтрДЗ.Name = "ТолстыйКлиентОбычное" Тогда
		вЗапуститьСеанс1С(2);
	ИначеЕсли СтрДЗ.Name = "ТолстыйКлиентУпр" Тогда
		вЗапуститьСеанс1С(3);
	ИначеЕсли СтрДЗ.Name = "ТонкийКлиентУпр" Тогда
		вЗапуститьСеанс1С(4);
	ИначеЕсли СтрДЗ.Name = "WinStartMenu" Тогда
		вВыполнитьКомандуОС("%ProgramData%\Microsoft\Windows\Start Menu\Programs");
	ИначеЕсли СтрДЗ.Name = "WinAppData" Тогда
		вВыполнитьКомандуОС("%AppData%");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОчиститьИзбранное(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		вОчиститьИзбранноеСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вОчиститьИзбранноеСервер()
	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Избранное.Очистить();
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", Избранное);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура вПерключитьМонопольныйРежим(СтрукКонтекст)
	Попытка
		УстановитьМонопольныйРежим(Не МонопольныйРежим());
		СтрукКонтекст.МонопольныйРежим = МонопольныйРежим();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура кВыполнитьСервиснуюКоманду(Команда)
	ТекДанные = Элементы.ServiceTree.ТекущиеДанные;
	ДеревоСервисВыбор(Элементы.ДеревоСервис, Элементы.ServiceTree.ТекущаяСтрока, Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура _ОтображатьПраваНаОбъектыПриИзменении(Элемент)
	Элементы.СтраницыПраваНаОбъект.Видимость = _DisplayObjectsRights;

	Если Не _DisplayObjectsRights И Не ПустаяСтрока(_StorageAddresses.РолиИПользователи) Тогда
		УдалитьИзВременногоХранилища(_StorageAddresses.РолиИПользователи);
		_StorageAddresses.РолиИПользователи = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
	Если _DisplayObjectsRights Тогда
		ПодключитьОбработчикОжидания("ОбработкаАктивизацииСтрокиНавигатора", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизацииСтрокиНавигатора()
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	ТипМД = "";
	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = "MetadataObject" Тогда
		Если ТекДанные.FullName = мТекущийОбъектДерева Тогда
			Возврат;
		КонецЕсли;

		мТекущийОбъектДерева = ТекДанные.FullName;

		Для Каждого Стр Из VerifiableRightsTable.НайтиСтроки(Новый Структура("Mark", Истина)) Цикл
			Стр.Mark = Ложь;
		КонецЦикла;

		Если СтрНайти(ТекДанные.ПолноеИмя, ".Команда.") <> 0 Тогда
			ТипМД = "ОбщаяКоманда";
		Иначе
			ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".") - 1);
		КонецЕсли;

		Если ТипМД = "WebСервис" И СтрНайти(ТекДанные.ПолноеИмя, ".Операция.") <> 0 Тогда
			ТипМД = "WebСервис.Свойство";
		ИначеЕсли ТипМД = "HTTPСервис" И СтрНайти(ТекДанные.ПолноеИмя, ".ШаблонURL.") <> 0 И СтрНайти(
			ТекДанные.ПолноеИмя, ".Метод.") <> 0 Тогда
			ТипМД = "HTTPСервис.Свойство";
		КонецЕсли;

		Для Каждого Стр Из VerifiableRightsTable.НайтиСтроки(Новый Структура("MetadataObject", ТипМД)) Цикл
			Стр.Mark = Истина;
		КонецЦикла;
	Иначе
		мТекущийОбъектДерева = "";

		Для Каждого Стр Из VerifiableRightsTable.НайтиСтроки(Новый Структура("Mark", Истина)) Цикл
			Стр.Mark = Ложь;
		КонецЦикла;
	КонецЕсли;

	RolesWithAccessTable.Очистить();
	UsersWithAccessTable.Очистить();

	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = "MetadataObject" Тогда

		Если СтрНайти(ТекДанные.ПолноеИмя, "Роль.") = 1 Тогда
			Если Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница <> Элементы.СтрПользователи Тогда
				Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница = Элементы.СтрПользователи;
			КонецЕсли;
			ИмяПрава = "Х";
		ИначеЕсли СтрНайти(ТекДанные.ПолноеИмя, "User.") = 1 Тогда
			Если Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница <> Элементы.СтрРоли Тогда
				Элементы.СтраницыПраваНаОбъект.ТекущаяСтраница = Элементы.СтрРоли;
			КонецЕсли;
			ИмяПрава = "Х";
		Иначе
			Если ТипМД = "" Тогда
				ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".") - 1);
			КонецЕсли;
			НайденныеСтроки = VerifiableRightsTable.НайтиСтроки(Новый Структура("MetadataObject", ТипМД));
			Если НайденныеСтроки.Количество() = 0 Тогда
				вУстановитьЗаголовкиТаблицПрав();
				Возврат;
			КонецЕсли;
			ИмяПрава = НайденныеСтроки[0].Right;
			Если ИмяПрава = "" Тогда
				вУстановитьЗаголовкиТаблицПрав();
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Струк = вПолучитьПраваДоступаКОбъекту(ИмяПрава, ТекДанные.ПолноеИмя, _StorageAddresses.РолиИПользователи,
			УникальныйИдентификатор);
		Если Струк.ЕстьДанные Тогда
			Для Каждого Элем Из Струк.Роли Цикл
				ЗаполнитьЗначенияСвойств(RolesWithAccessTable.Добавить(), Элем);
			КонецЦикла;

			Для Каждого Элем Из Струк.Пользователи Цикл
				ЗаполнитьЗначенияСвойств(UsersWithAccessTable.Добавить(), Элем);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	вУстановитьЗаголовкиТаблицПрав();
КонецПроцедуры

&НаКлиенте
Процедура вУстановитьЗаголовкиТаблицПрав()
	НайденныеСтроки = VerifiableRightsTable.НайтиСтроки(Новый Структура("Mark", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ИмяПрава = "";
	Иначе
		ИмяПрава = НайденныеСтроки[0].Right + ": ";
	КонецЕсли;

	ЗаголовокРоли = ИмяПрава + "Роли, имеющие доступ (";
	ЗаголовокПользователи = ИмяПрава + "Пользователи, имеющие доступ (";

	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = "MetadataObject" Тогда
		Если СтрНайти(ТекДанные.ПолноеИмя, "Роль.") = 1 Тогда
			ЗаголовокРоли = "";
			ЗаголовокПользователи = "Пользователи, имеющие данную роль (";
		ИначеЕсли СтрНайти(ТекДанные.ПолноеИмя, "User.") = 1 Тогда
			ЗаголовокРоли = "Роли данного пользователя (";
			ЗаголовокПользователи = "";
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(ЗаголовокРоли) Тогда
		Элементы.ДекорацияРоли.Заголовок = "Для заданного объекта не используются";
	Иначе
		Элементы.ДекорацияРоли.Заголовок = ЗаголовокРоли + RolesWithAccessTable.Количество() + " шт.)";
	КонецЕсли;

	Если ПустаяСтрока(ЗаголовокПользователи) Тогда
		Элементы.ДекорацияПользователи.Заголовок = "Для заданного объекта не используются";
	Иначе
		Элементы.ДекорацияПользователи.Заголовок = ЗаголовокПользователи + UsersWithAccessTable.Количество()
			+ " шт.)";
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПраваДоступаКОбъекту(Знач ИмяПрава, Знач ПолноеИмя, АдресТаблицыРолиИПользователи,
	Знач УникальныйИдентификатор)
	СтрукРезультат = Новый Структура("ЕстьДанные, Роли, Пользователи", Ложь);

	ТабРоли = Новый ТаблицаЗначений;
	ТабРоли.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТабРоли.Колонки.Добавить("Synonym", Новый ОписаниеТипов("Строка"));

	ТабПользователи = Новый ТаблицаЗначений;
	ТабПользователи.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТабПользователи.Колонки.Добавить("FullName", Новый ОписаниеТипов("Строка"));
	Если СтрНайти(ПолноеИмя, ".Команда.") <> 0 Тогда
		ТипМД = "ОбщаяКоманда";
	Иначе
		ТипМД = Лев(ПолноеИмя, СтрНайти(ПолноеИмя, ".") - 1);
	КонецЕсли;

	Если ТипМД <> "User" Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);

		Если ОбъектМД = Неопределено Тогда
			Возврат СтрукРезультат;
		КонецЕсли;
	КонецЕсли;

	ЭтоОбычныйРежим = (ИмяПрава <> "Х");

	Если ЭтоОбычныйРежим И ПустаяСтрока(ИмяПрава) Тогда
		Возврат СтрукРезультат;
	КонецЕсли;
	Если ЭтоОбычныйРежим Тогда
		Для Каждого Элем Из Метаданные.Роли Цикл
			Если ПравоДоступа(ИмяПрава, ОбъектМД, Элем) Тогда
				ЗаполнитьЗначенияСвойств(ТабРоли.Добавить(), Элем);
			КонецЕсли;
		КонецЦикла;

		ТабРоли.Сортировать("Name");
	КонецЕсли;
	Если ПустаяСтрока(АдресТаблицыРолиИПользователи) Тогда
		__ТабРолиИПользователи = Новый ТаблицаЗначений;
		__ТабРолиИПользователи.Колонки.Добавить("ИмяР", Новый ОписаниеТипов("Строка"));
		__ТабРолиИПользователи.Колонки.Добавить("ИмяП", Новый ОписаниеТипов("Строка"));
		__ТабРолиИПользователи.Колонки.Добавить("ПолноеИмяП", Новый ОписаниеТипов("Строка"));

		Для Каждого П Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Для Каждого Р Из П.Роли Цикл
				НС = __ТабРолиИПользователи.Добавить();
				НС.ИмяР = Р.Name;
				НС.ИмяП = П.Name;
				НС.ПолноеИмяП = П.FullName;
			КонецЦикла;
		КонецЦикла;

		__ТабРолиИПользователи.Индексы.Добавить("ИмяР");
		__ТабРолиИПользователи.Индексы.Добавить("ИмяП");
		АдресТаблицыРолиИПользователи = ПоместитьВоВременноеХранилище(__ТабРолиИПользователи, УникальныйИдентификатор);
	Иначе
		__ТабРолиИПользователи = ПолучитьИзВременногоХранилища(АдресТаблицыРолиИПользователи);
	КонецЕсли;
	Если ЭтоОбычныйРежим Тогда
		СтрукР = Новый Структура("ИмяР");
		СтрукП = Новый Структура("Name");

		Для Каждого Стр Из ТабРоли Цикл
			СтрукР.ИмяР = Стр.Name;
			Для Каждого СтрХ Из __ТабРолиИПользователи.НайтиСтроки(СтрукР) Цикл
				СтрукП.Name = СтрХ.ИмяП;
				Если ТабПользователи.НайтиСтроки(СтрукП).Количество() = 0 Тогда
					НС = ТабПользователи.Добавить();
					НС.Name = СтрХ.ИмяП;
					НС.FullName = СтрХ.ПолноеИмяП;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		ТабПользователи.Сортировать("Name");
	КонецЕсли;

	Если Не ЭтоОбычныйРежим Тогда
		Если ТипМД = "Роль" Тогда
			ИмяР = Сред(ПолноеИмя, СтрНайти(ПолноеИмя, ".") + 1);
			Для Каждого Стр Из __ТабРолиИПользователи.НайтиСтроки(Новый Структура("ИмяР", ИмяР)) Цикл
				НС = ТабПользователи.Добавить();
				НС.Name = Стр.ИмяП;
				НС.FullName = Стр.ПолноеИмяП;
			КонецЦикла;
			ТабПользователи.Сортировать("Name");

		ИначеЕсли ТипМД = "User" Тогда
			ИмяП = Сред(ПолноеИмя, СтрНайти(ПолноеИмя, ".") + 1);
			Для Каждого Стр Из __ТабРолиИПользователи.НайтиСтроки(Новый Структура("ИмяП", ИмяП)) Цикл
				НС = ТабРоли.Добавить();
				НС.Name = Стр.ИмяР;
			КонецЦикла;
			ТабРоли.Сортировать("Name");
		КонецЕсли;
	КонецЕсли;

	СтрукРезультат.ЕстьДанные = Истина;
	СтрукРезультат.Роли = Новый Массив;
	СтрукРезультат.Пользователи = Новый Массив;

	Для Каждого Стр Из ТабРоли Цикл
		Струк = Новый Структура("Name, Synonym");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Роли.Добавить(Струк);
	КонецЦикла;

	Для Каждого Стр Из ТабПользователи Цикл
		Струк = Новый Структура("Name, FullName");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Пользователи.Добавить(Струк);
	КонецЦикла;

	Возврат СтрукРезультат;
КонецФункции

&НаКлиенте
Процедура вЗаполнитьПроверяемыеПраваДоступа()
	Для Каждого Элем Из мОписаниеПравДоступа Цикл
		НС = VerifiableRightsTable.Добавить();
		НС.MetadataObject = Элем.Key;
		Поз = СтрНайти(Элем.Значение, ",");
		НС.Right = ?(Поз = 0, Элем.Значение, Лев(Элем.Значение, Поз - 1));
	КонецЦикла;

	VerifiableRightsTable.Сортировать("MetadataObject");
КонецПроцедуры

&НаКлиенте
Процедура ТабПроверяемыеПраваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элемент.ТекущиеДанные;
	Струк = Новый Структура(мОписаниеПравДоступа[ТекДанные.MetadataObject]);

	ЭФ = Элементы.ТабПроверяемыеПраваПраво;
	ЭФ.СписокВыбора.Очистить();
	Для Каждого Элем Из Струк Цикл
		ЭФ.СписокВыбора.Добавить(Элем.Ключ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТабРолиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элементы.RolesWithAccessTable.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пПолноеИмя = "Роль." + ТекДанные.Name;
		СтрукПараметры = Новый Структура("FullName, PathToForms, _StorageAddresses, ОписаниеПравДоступа", пПолноеИмя,
			PathToForms, _StorageAddresses, мОписаниеПравДоступа);
		СтрукПараметры.Вставить("НастройкиОбработки", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
		ОткрытьФорму(PathToForms + "ФормаСвойств", СтрукПараметры, , пПолноеИмя, , , ,
			РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабПользователиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = Элементы.UsersWithAccessTable.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пИдентификаторПользователя = вПолучитьИдентификаторПользователя(ТекДанные.Имя);

		Если Не ПустаяСтрока(пИдентификаторПользователя) Тогда
			пСтрук = Новый Структура("РежимРаботы, DBUserID", 0, пИдентификаторПользователя);
			ОткрытьФорму(PathToForms + "ФормаПользовательИБ", пСтрук, , , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вСформироватьОписаниеПравДоступа()
	ПереченьА = "Чтение, Добавление, Изменение, Удаление, Просмотр, Редактирование";
	ПереченьБ = "Чтение, Изменение, Просмотр, Редактирование, УправлениеИтогами";

	мОписаниеПравДоступа = Новый Соответствие;
	мОписаниеПравДоступа.Вставить("Подсистема", "Просмотр");
	мОписаниеПравДоступа.Вставить("ПараметрСеанса", "Получение, Установка");
	мОписаниеПравДоступа.Вставить("ОбщийРеквизит", "Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("ПланОбмена", ПереченьА);
	мОписаниеПравДоступа.Вставить("КритерийОтбора", "Просмотр");
	мОписаниеПравДоступа.Вставить("ОбщаяФорма", "Просмотр");
	мОписаниеПравДоступа.Вставить("ОбщаяКоманда", "Просмотр");
	мОписаниеПравДоступа.Вставить("ЧужаяКоманда", "Просмотр");
	мОписаниеПравДоступа.Вставить("WebСервис.Свойство", "Использование");
	мОписаниеПравДоступа.Вставить("HTTPСервис.Свойство", "Использование");
	мОписаниеПравДоступа.Вставить("Константа", "Чтение, Изменение, Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("Справочник", ПереченьА);
	мОписаниеПравДоступа.Вставить("Документ", ПереченьА + ", Проведение, ОтменаПроведения");
	мОписаниеПравДоступа.Вставить("Последовательность", "Чтение, Изменение");
	мОписаниеПравДоступа.Вставить("ЖурналДокументов", "Чтение, Просмотр");
	мОписаниеПравДоступа.Вставить("Отчет", "Использование, Просмотр");
	мОписаниеПравДоступа.Вставить("Обработка", "Использование, Просмотр");
	мОписаниеПравДоступа.Вставить("ПланВидовХарактеристик", ПереченьА);
	мОписаниеПравДоступа.Вставить("ПланВидовРасчета", ПереченьА);
	мОписаниеПравДоступа.Вставить("ПланСчетов", ПереченьА);
	мОписаниеПравДоступа.Вставить("РегистрСведений", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрНакопления", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрБухгалтерии", ПереченьБ);
	мОписаниеПравДоступа.Вставить("РегистрРасчета", "Чтение, Изменение, Просмотр, Редактирование");
	мОписаниеПравДоступа.Вставить("БизнесПроцесс", ПереченьА + ", Старт");
	мОписаниеПравДоступа.Вставить("Задача", ПереченьА + ", Выполнение");

КонецПроцедуры

&НаКлиенте
Процедура кРассчитатьКоличествоОбъектов(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;

	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" Тогда
			Перечень = "Последовательность, ПланОбмена, Справочник, Документ, ЖурналДокументов, ПланВидовХарактеристик
					   |, ПланВидовРасчета, ПланСчетов, РегистрСведений, РегистрНакопления, РегистрБухгалтерии, РегистрРасчета, БизнесПроцесс, Задача";

			Струк = Новый Структура(Перечень);
			ТипМД = Лев(ТекДанные.ПолноеИмя, СтрНайти(ТекДанные.ПолноеИмя, ".") - 1);

			Если Не Струк.Свойство(ТипМД) Тогда
				Возврат;
			КонецЕсли;

			МассивОбъектов = Новый Массив;

			Струк = Новый Структура("FullName, NumberOfObjects", ТекДанные.FullName);
			МассивОбъектов.Добавить(Струк);

			РодительДЗ = ТекДанные.ПолучитьРодителя();

			РодительДЗ.NumberOfObjects = РодительДЗ.NumberOfObjects - ТекДанные.NumberOfObjects;

			вРассчитатьКоличествоОбъектов(МассивОбъектов);
			ТекДанные.NumberOfObjects = МассивОбъектов[0].NumberOfObjects;

			РодительДЗ.NumberOfObjects = РодительДЗ.NumberOfObjects + ТекДанные.NumberOfObjects;

		ИначеЕсли ТекДанные.ВидУзла = "РазделМД" Тогда
			СтрокиДЗ = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДЗ.Количество() = 1 И ПустаяСтрока(СтрокиДЗ[0].ВидУзла) Тогда
				Возврат;
			КонецЕсли;

			Перечень = "Последовательности, ПланыОбмена, Справочники, Документы, ЖурналыДокументов, ПланыВидовХарактеристик
					   |, ПланыВидовРасчета, ПланыСчетов, РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета, БизнесПроцессы, Задачи";

			Струк = Новый Структура(Перечень);
			Поз = СтрНайти(ТекДанные.Имя, " ");
			Если Поз = 0 Тогда
				ИмяРаздела = ТекДанные.Name;
			Иначе
				ИмяРаздела = Лев(ТекДанные.Имя, Поз - 1);
			КонецЕсли;

			Если Не Струк.Свойство(ИмяРаздела) Тогда
				Возврат;
			КонецЕсли;

			МассивОбъектов = Новый Массив;

			Для Каждого Стр Из СтрокиДЗ Цикл
				Если Стр.ВидУзла = "MetadataObject" Тогда
					Струк = Новый Структура("Идентификатор, FullName, NumberOfObjects",
						Стр.ПолучитьИдентификатор(), Стр.FullName);
					МассивОбъектов.Добавить(Струк);
				КонецЕсли;
			КонецЦикла;

			вРассчитатьКоличествоОбъектов(МассивОбъектов);

			КоличествоОбъектов = 0;
			Для Каждого Стр Из МассивОбъектов Цикл
				СтрДЗ = ObjectsTree.НайтиПоИдентификатору(Стр.Идентификатор);
				Если СтрДЗ <> Неопределено Тогда
					КоличествоОбъектов= КоличествоОбъектов + Стр.NumberOfObjects;
					СтрДЗ.NumberOfObjects = Стр.NumberOfObjects;
				КонецЕсли;
			КонецЦикла;
			ТекДанные.NumberOfObjects = КоличествоОбъектов;

		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вРассчитатьКоличествоОбъектов(МассивОбъектов)
	УстановитьПривилегированныйРежим(Истина);

	пИспользоватьПопытку = Не ПривилегированныйРежим() И Не вЕстьПраваАдминистратора();

	Для Каждого Элем Из МассивОбъектов Цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
					   |	КОЛИЧЕСТВО(*) КАК NumberOfObjects
					   |ИЗ
					   |	" + Элем.FullName + " КАК ТаблицаБД";

		Если пИспользоватьПопытку Тогда
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
				Элем.NumberOfObjects = ?(Выборка.Следующий(), Выборка.КоличествоОбъектов, 0);
			Исключение
				Элем.NumberOfObjects = 0;
			КонецПопытки;
		Иначе
			Выборка = Запрос.Выполнить().Выбрать();
			Элем.NumberOfObjects = ?(Выборка.Следующий(), Выборка.КоличествоОбъектов, 0);
		КонецЕсли;

	КонецЦикла;

	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура _ПоказыватьСтандартныеНастройкиПриИзменении(Элемент)
	Элементы.СтрСтандартныеНастройки.Видимость = _ShowStandardSettings;
КонецПроцедуры

&НаКлиенте
Процедура _ПоказыватьТаблицыИИндексыБДПриИзменении(Элемент)
	Элементы.СтрСтруктураХранения.Видимость = _ShowTablesAndIndexesDB;
КонецПроцедуры


// работа с разделом "Избранное..."
&НаКлиенте
Процедура _ДобавитьВИзбранное(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" Тогда
			СтрДЗ = ObjectsTree.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, ТекДанные);
			вВключитьФлагИзмененияНастроек();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _УдалитьИзИзбранного(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не ПустаяСтрока(ТекДанные.ПолноеИмя) Тогда
			СтрокиДЗ = ObjectsTree.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы();
			Для Каждого СтрДЗ Из СтрокиДЗ Цикл
				Если СтрДЗ.FullName = ТекДанные.FullName Тогда
					СтрокиДЗ.Удалить(СтрДЗ);
					вВключитьФлагИзмененияНастроек();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вВключитьФлагИзмененияНастроек()
	_DateOfSettingsChange = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьИзбранное(Команда)
	ObjectsTree.НайтиПоИдентификатору(мИдентификаторИзбранного).ПолучитьЭлементы().Очистить();
	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаКлиенте
Процедура _УпорядочитьИзбранное(Команда)
	вУпорядочитьИзбранное(); // плохой способ

	Для Каждого СтрДЗ Из ObjectsTree.ПолучитьЭлементы() Цикл
		Если СтрДЗ.FullName = "Избранное" Тогда
			мИдентификаторИзбранного = СтрДЗ.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;

	вВключитьФлагИзмененияНастроек();
КонецПроцедуры

&НаСервере
Процедура вУпорядочитьИзбранное()
	пДерево = РеквизитФормыВЗначение("ObjectsTree");
	пДерево.Строки.Найти("Избранное", "FullName", Ложь).Строки.Сортировать("FullName");
	ЗначениеВРеквизитФормы(пДерево, "ObjectsTree");
КонецПроцедуры
&НаКлиенте
Процедура _ОткрытьРедакторОбъектов(Команда)
	СтрукПарам = Новый Структура;
	СтрукПарам.Вставить("мОбъектСсылка", Неопределено);
	ОткрытьФорму("Обработка.UT_ObjectsAttributesEditor.Форма", СтрукПарам, , ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьНумерациюОбъектов(Команда)
	ТекДанные = Элементы.ObjectsTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ВидУзла = "MetadataObject" Или ТекДанные.ВидУзла = "Конфигурация" Тогда
			Если Не вЕстьПраваАдминистратора() Тогда
				вПоказатьПредупреждение("Нет прав на выполнение операции!");
				Возврат;
			КонецЕсли;

			пТекст = ?(ТекДанные.ВидУзла = "Конфигурация", "Нумерация всех объектов будет обновлена. Продолжить?",
				"Нумерация обекта будет обновлена. Продолжить?");
			ПоказатьВопрос(Новый ОписаниеОповещения("вОбновитьНумерациюОбъектовОтвет", ЭтаФорма, ТекДанные.FullName),
				пТекст, РежимДиалогаВопрос.ДаНетОтмена, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ОбновитьНумерациюВсехОбъектов(Команда)
	пТекст = "Нумерация всех объектов будет обновлена. Продолжить?";
	ПоказатьВопрос(Новый ОписаниеОповещения("вОбновитьНумерациюОбъектовОтвет", ЭтаФорма, "Конфигурация"), пТекст,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОбновитьНумерациюОбъектовОтвет(РезультатВопроса, ДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вОбновитьНумерациюОбъектов(ДопПарам);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вОбновитьНумерациюОбъектов(Знач ПолноеИмя)
	Если ПолноеИмя = "Конфигурация" Тогда
		Попытка
			ОбновитьНумерациюОбъектов();
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

	ИначеЕсли СтрНайти(ПолноеИмя, ".") <> 0 Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);

		Если ОбъектМД <> Неопределено Тогда
			Попытка
				ОбновитьНумерациюОбъектов(ОбъектМД);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// работа со структурой хранения базы данных (таблицы и индексы)
&НаКлиенте
Процедура _ЗаполнитьСХ(Команда)
	_Indexes.Очистить();
	_Tables.Очистить();

	вЗаполнитьСХ();

	Элементы.СтрИндексы.Заголовок = "Все индексы БД (" + _Indexes.Количество() + ")";
	Элементы.СтрТаблицы.Заголовок = "Все таблицы БД (" + _Tables.Количество() + ")";
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСХ()
	ТабРезультат = ПолучитьСтруктуруХраненияБазыДанных( , Не _ShowStorageStructureInTermsOf1C);

	Для Каждого Стр Из ТабРезультат Цикл
		НС = _Tables.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);

		Если НС.TableName = "" Тогда
			НС.TableName = "<не задано>";
		КонецЕсли;
		Если НС.Metadata = "" Тогда
			НС.Metadata = "<не задано>";
		КонецЕсли;

		Для Каждого СтрХ Из Стр.Индексы Цикл
			НС = _Indexes.Добавить();
			НС.IndexName = СтрХ.IndexName;
			ЗаполнитьЗначенияСвойств(НС, Стр, "TableName, Metadata");
			Если НС.Metadata = "" Тогда
				НС.Metadata = "<не задано>";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура _СХТаблицыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	кПоказатьСвойстваОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _СХИндексыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	кПоказатьСвойстваОбъекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _ПерейтиКТаблицеОтИндекса(Команда)
	ТекДанные = Элементы._Indexes.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Массив = _Tables.НайтиСтроки(Новый Структура("TableName", ТекДанные.TableName));
		Если Массив.Количество() <> 0 Тогда
			Строка = Массив[0].ПолучитьИдентификатор();
			ТекСтрока = _Tables.НайтиПоИдентификатору(Строка);
			Если ТекСтрока <> Неопределено Тогда
				Элементы._Tables.ТекущаяСтрока = Строка;
				Элементы.ГруппаТаблицыИИндексы.ТекущаяСтраница = Элементы.СтрТаблицы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// работа с пользователями ИБ
&НаКлиенте
Процедура _ЗаполнитьСписокПользователейИБ(Команда)
	_DBUserList.Очистить();

	пПереченьПолей = "OpenIDAuthentication, AuthenticationOS, StandartAuthentication, Name, PasswordIsSet,
					 |StandartAuthentication, FullName, OSUser, LaunchMode, UUID,
					 |ListOfRoles";

	пМассив = вПолучитьПользователейИБ(пПереченьПолей, _ShowUserRolesList);
	Для Каждого Элем Из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_DBUserList.Добавить(), Элем);
	КонецЦикла;

	_DBUserList.Сортировать("Name");

	Если Элементы._СписокПользователейИБПереченьРолей.Видимость <> _ShowUserRolesList Тогда
		Элементы._СписокПользователейИБПереченьРолей.Видимость = _ShowUserRolesList;
	КонецЕсли;

	Элементы.СтрПользователиИБ.Заголовок = "Пользователи (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьПользователейИБ(Знач пПереченьПолей, Знач пЗаполнятьПереченьРолнй = Ложь)
	пРезультат = Новый Массив;

	Для Каждого Элем Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		пСтрук = Новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);

		Если пЗаполнятьПереченьРолнй Тогда
			пСписокРолей = Новый СписокЗначений;
			Для Каждого пРоль Из Элем.Роли Цикл
				пСписокРолей.Добавить(пРоль.Имя);
			КонецЦикла;
			пСписокРолей.СортироватьПоЗначению();

			пПереченьРолей = "";
			Для Каждого пРоль Из пСписокРолей Цикл
				пПереченьРолей = пПереченьРолей + ", " + пРоль.Значение;
			КонецЦикла;
			пСтрук.ListOfRoles = Сред(пПереченьРолей, 2);
		КонецЕсли;

		пРезультат.Добавить(пСтрук);
	КонецЦикла;

	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _СписокПользователейИБВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	ТекДанные = _DBUserList.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		пСтрук = Новый Структура("РежимРаботы, DBUserID", 0, ТекДанные.UUID);
		ОткрытьФорму(PathToForms + "ФормаПользовательИБ", пСтрук, , , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СписокПользователейИБПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;

	Если Копирование Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			пСтрук = Новый Структура("РежимРаботы, DBUserID", 2, ТекДанные.UUID);
			ОткрытьФорму(PathToForms + "ФормаПользовательИБ", пСтрук, , , , , ,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		пСтрук = Новый Структура("РежимРаботы", 1);
		ОткрытьФорму(PathToForms + "ФормаПользовательИБ", пСтрук, , , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СписокПользователейИБПередУдалением(Элемент, Отказ)
	Отказ = Истина;

	пВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	пЧисло = пВыделенныеСтроки.Количество();

	Если пЧисло = 0 Тогда
		Возврат;
	ИначеЕсли пЧисло = 1 Тогда
		пТекст = СтрШаблон("User ""%1"" будет удален из информационной базы!
						   |Продолжить?", _DBUserList.НайтиПоИдентификатору(пВыделенныеСтроки[0]).Имя);
	Иначе
		пТекст = СтрШаблон("Отмеченные пользователи (%1 шт) будут удалены из информационной базы!
						   |Продолжить?", пЧисло);
	КонецЕсли;

	вПоказатьВопрос(пТекст, "вУдалитьПользователейИБОтвет", пВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура вУдалитьПользователейИБОтвет(Ответ, пВыделенныеСтроки) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		пМассив = Новый Массив;
		Для Каждого Стр Из пВыделенныеСтроки Цикл
			ТекДанные = _DBUserList.НайтиПоИдентификатору(Стр);
			Если ТекДанные <> Неопределено Тогда
				пМассив.Добавить(ТекДанные.UUID);
			КонецЕсли;
		КонецЦикла;

		Если пМассив.Количество() <> 0 Тогда
			пМассивУдаленных = вУдалитьПользователейИБ(пМассив);
			Для Каждого Элем Из пМассивУдаленных Цикл
				Для Каждого СтрХ Из _DBUserList.НайтиСтроки(Новый Структура("UUID",
					Элем)) Цикл
					_DBUserList.Удалить(СтрХ);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вУдалитьПользователейИБ(Знач пМассивИдентификаторов)
	пРезультат = Новый Массив;

	пТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();

	Для Каждого Элем Из пМассивИдентификаторов Цикл
		Попытка
			пUUID = Новый УникальныйИдентификатор(Элем);

			пПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(пUUID);
			Если пПользователь = Неопределено Или (пТекПользователь <> Неопределено
				И пТекПользователь.UUID = пUUID) Тогда
				Продолжить;
			КонецЕсли;

			пПользователь.Удалить();
			пРезультат.Добавить(Элем);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;

	Возврат пРезультат;
КонецФункции


// работа с сеансами
&НаКлиенте
Процедура _УстановитьБлокуировкуСеансов(Команда)
	ОткрытьФорму(PathToForms + "ФормаБлокировкиСеансов", , ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура _ЗаполнитьСписокСеансов(Команда)
	_SessionList.Очистить();

	пПереченьПолей = "CurrentSession, ComputerName, ApplicationName, ApplicationPresentation, SessionStart, SessionNumber, ConnectionNumber, User, DBUserID,
					 |MethodName, Key, Start, End, Name, Placement, ScheduledJob, State, BackgroundJobID";

	пМассив = вПолучитьСенансы(пПереченьПолей);

	Для Каждого Элем Из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_SessionList.Добавить(), Элем);
	КонецЦикла;

	_SessionList.Сортировать("SessionStart");

	Элементы.ГруппаСеансы.Заголовок = "Сеансы информационной базы (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСенансы(Знач пПереченьПолей)
	УстановитьПривилегированныйРежим(Истина);

	пТекНомерСеанса = НомерСеансаИнформационнойБазы();

	пРезультат = Новый Массив;

	Для Каждого Элем Из ПолучитьСеансыИнформационнойБазы() Цикл
		пСтрук = Новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);

		пСтрук.CurrentSession = (Элем.SessionNumber = пТекНомерСеанса);

		пСтрук.ApplicationPresentation = ПредставлениеПриложения(пСтрук.ИмяПриложения);

		пСтрук.User = Строка(пСтрук.User);

		Если Элем.User <> Неопределено Тогда
			пСтрук.DBUserID = Строка(Элем.User.УникальныйИдентификатор);
		КонецЕсли;

		пФоновоеЗадание = Элем.ПолучитьФоновоеЗадание();
		Если пФоновоеЗадание <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(пСтрук, пФоновоеЗадание);
			пСтрук.State = Строка(пФоновоеЗадание.Состояние);
			пСтрук.ScheduledJob = Строка(пФоновоеЗадание.РегламентноеЗадание);
			пСтрук.BackgroundJobID = Строка(пФоновоеЗадание.УникальныйИдентификатор);
		КонецЕсли;

		пРезультат.Добавить(пСтрук);
	КонецЦикла;

	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура _ЗаполнитьСписокСоединений(Команда)
	_ConnectionsList.Очистить();

	пПереченьПолей = "ТекущееСоединение, Active, ComputerName, ApplicationName, ApplicationPresentation, SessionStart, SessionNumber, ConnectionNumber, User, DBUserID";

	пМассив = вПолучитьСоединения(пПереченьПолей);

	Для Каждого Элем Из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_ConnectionsList.Добавить(), Элем);
	КонецЦикла;

	_ConnectionsList.Сортировать("SessionStart");

	Элементы.ГруппаСоединения.Заголовок = "Соединения информационной базы (" + пМассив.Количество() + ")";
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСоединения(Знач пПереченьПолей)
	УстановитьПривилегированныйРежим(Истина);

	пТекНомерСоединения = НомерСоединенияИнформационнойБазы();

	пРезультат = Новый Массив;

	Для Каждого Элем Из ПолучитьСоединенияИнформационнойБазы() Цикл
		пСтрук = Новый Структура(пПереченьПолей);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);

		пСтрук.ТекущееСоединение = (Элем.ConnectionNumber = пТекНомерСоединения);

		пСтрук.Active = ЗначениеЗаполнено(Элем.НомерСеанса);

		пСтрук.ApplicationPresentation = ПредставлениеПриложения(пСтрук.ИмяПриложения);

		пСтрук.User = Строка(пСтрук.User);

		Если Элем.User <> Неопределено Тогда
			пСтрук.DBUserID = Строка(Элем.User.УникальныйИдентификатор);
		КонецЕсли;

		пРезультат.Добавить(пСтрук);
	КонецЦикла;

	Возврат пРезультат;
КонецФункции
&НаКлиенте
Процедура _ЗавершитьСеансы(Команда)
	пВыделенныеСтроки = Элементы._SessionList.ВыделенныеСтроки;
	Если пВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	пМассивСеансов = Новый Массив;
	Для Каждого Элем Из пВыделенныеСтроки Цикл
		Стр = _SessionList.НайтиПоИдентификатору(Элем);
		Если Не Стр.CurrentSession Тогда
			пМассивСеансов.Добавить(Стр.SessionNumber);
		КонецЕсли;
	КонецЦикла;

	Если пМассивСеансов.Количество() = 0 Тогда
		вПоказатьПредупреждение("Невозможно завершить текущий сеанс!
								|Для выхода из программы можно закрыть главное окно программы.");
		Возврат;
	КонецЕсли;

	пТекст = СтрШаблон("Отмеченные сеансы (%1 шт) будут завершены.
					   |Продолжить?", пМассивСеансов.Количество());

	вПоказатьВопрос(пТекст, "вЗавершитьСеансыОтвет", пМассивСеансов);
КонецПроцедуры

&НаКлиенте
Процедура вЗавершитьСеансыОтвет(Ответ, пМассивСеансов) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если мПараметрыКластера1С = Неопределено Тогда
			мПараметрыКластера1С = вПолучитьПараметрыКластера1С();
		КонецЕсли;

		Если мПараметрыКластера1С.ФайловыйВариантИБ Тогда
			Элементы._СписокСеансов_ЗавершитьСеансы.Enabled = Ложь;
			Элементы.ГруппаАдминистраторКластера.ТолькоПросмотр = Истина;
			вПоказатьПредупреждение("Завершение сеансов реализовано только для клиент-серверного варианта!");
			Возврат;
		КонецЕсли;

		Попытка
			вЗавершитьСеансы(пМассивСеансов);
		Исключение
			Сообщить(вСформироватьОписаниеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

		_ЗаполнитьСписокСеансов(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьОписаниеОшибки(Знач пИнфоОбОшибке)
	пТекст = пИнфоОбОшибке.Описание;

	Пока Истина Цикл
		Если пИнфоОбОшибке.Причина <> Неопределено Тогда
			пТекст = пТекст + "
							  |" + пИнфоОбОшибке.Причина.Описание;
			пИнфоОбОшибке = пИнфоОбОшибке.Причина;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат пТекст;
КонецФункции
&НаКлиенте
Процедура вЗавершитьСеансы(пМассивСеансов)
	COMСоединитель = Новый COMОбъект(мПараметрыКластера1С.ИмяCOMСоединителя, мПараметрыКластера1С.СерверCOMСоединителя);

	пСоединениеСАгентомСервера = вСоединениеСАгентомСервера(
		COMСоединитель, мПараметрыКластера1С.АдресАгентаСервера, мПараметрыКластера1С.ПортАгентаСервера);

	пКластер = вПолучитьКластер(
		пСоединениеСАгентомСервера, мПараметрыКластера1С.ПортКластера, _ClusterAdministratorName, ?(ПустаяСтрока(
		_ClusterAdministratorName), "", _ClusterAdministratorPassword));

	пСеансыКУдалению = Новый Массив;

	Для Каждого Сеанс Из пСоединениеСАгентомСервера.GetSessions(пКластер).Выгрузить() Цикл
		Если пМассивСеансов.Найти(Сеанс.SessionID) <> Неопределено Тогда
			пСеансыКУдалению.Добавить(Сеанс);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Сеанс Из пСеансыКУдалению Цикл
		ОбработкаПрерыванияПользователя();

		Попытка
			пСоединениеСАгентомСервера.TerminateSession(пКластер, Сеанс);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция вСоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера)

	пСтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	пСоединениеСАгентомСервера = COMСоединитель.ConnectAgent(пСтрокаСоединенияСАгентомСервера);

	Возврат пСоединениеСАгентомСервера;

КонецФункции

&НаКлиенте
Функция вПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера,
	Знач ПарольАдминистратораКластера)

	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл

		Если Кластер.MainPort = ПортКластера Тогда

			СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);

			Возврат Кластер;

		КонецЕсли;

	КонецЦикла;

	ВызватьИсключение СтрШаблон("На рабочем сервере %1 не найден кластер %2", СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);

КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПараметрыКластера1С()
	пРезультат = Новый Структура;

	пСистемнаяИнфо = Новый СистемнаяИнформация;
	пСтрокаСоединения = СтрокаСоединенияИнформационнойБазы();

	пРезультат.Вставить("ФайловыйВариантИБ", (Найти(Врег(пСтрокаСоединения), "FILE=") = 1));
	пРезультат.Вставить("СерверCOMСоединителя", "");
	пРезультат.Вставить("ПортАгентаСервера", 1540);
	пРезультат.Вставить("ПортКластера", 1541);
	пРезультат.Вставить("АдресАгентаСервера", "LocalHost");
	пРезультат.Вставить("ИмяАдминистратораКластера", "");
	пРезультат.Вставить("ПарольАдминистратораКластера", "");
	пРезультат.Вставить("ИмяВКластере", "");
	пРезультат.Вставить("ТипПодключения", "COM");
	пРезультат.Вставить("ИмяCOMСоединителя", "V83.COMConnector");
	пРезультат.Вставить("ИмяАдминистратораИнформационнойБазы", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	пРезультат.Вставить("ПарольАдминистратораИнформационнойБазы", "");
	пРезультат.Вставить("Платформа1С", "83");

	пМассивСтр = СтрРазделить(пСтрокаСоединения, ";", Ложь);

	пЗначение = СтрЗаменить(вЗначениеКлючаСтроки(пМассивСтр, "Srvr"), """", "");
	Поз = Найти(пЗначение, ":");
	Если Поз <> 0 Тогда
		пРезультат.Вставить("АдресАгентаСервера", СокрЛП(Сред(пЗначение, 1, Поз - 1)));
		пРезультат.Вставить("ПортКластера", Число(Сред(пЗначение, Поз + 1)));
	Иначе
		пРезультат.Вставить("АдресАгентаСервера", пЗначение);
		пРезультат.Вставить("ПортКластера", 1541);
	КонецЕсли;
	пРезультат.ПортАгентаСервера = пРезультат.ПортКластера - 1;

	пРезультат.Вставить("ИмяВКластере", СтрЗаменить(вЗначениеКлючаСтроки(пМассивСтр, "Ref"), """", ""));

	пРезультат.Вставить("ВерсияПриложения", пСистемнаяИнфо.ВерсияПриложения);
	пРезультат.Вставить("КаталогПрограммы", КаталогПрограммы());

	Если Найти(пРезультат.ВерсияПриложения, "8.4.") = 1 Тогда
		пРезультат.Вставить("ИмяCOMСоединителя", "V84.COMConnector");
		пРезультат.Вставить("Платформа1С", "84");
	КонецЕсли;

	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вЗначениеКлючаСтроки(МассивСтрок, Ключ, ЗначениеПоУмолчанию = "") Экспорт
	КлючВР = ВРег(Ключ) + "=";
	Для Каждого Стр Из МассивСтрок Цикл
		пЗначение = СокрЛП(Стр);
		Если Найти(ВРег(пЗначение), КлючВР) = 1 Тогда
			Возврат Сред(пЗначение, СтрДлина(КлючВР) + 1);
		КонецЕсли;
	КонецЦикла;

	Возврат ЗначениеПоУмолчанию;
КонецФункции


// РАСШИРЕНИЯ КОНФИГУРАЦИИ
&НаКлиенте
Процедура _ЗаполнитьСписокРасширений(Команда)
	_ExtensionsList.Очистить();

	пМассив = вПолучитьСписокРасширений();

	Для Каждого Элем Из пМассив Цикл
		ЗаполнитьЗначенияСвойств(_ExtensionsList.Добавить(), Элем);
	КонецЦикла;
	
	//вЗаполнитьСписокРасширений();

	_ExtensionsList.Сортировать("Name");

	Элементы.СтрРасширенияКонфигурации.Заголовок = "Расширения конфигурации (" + _ExtensionsList.Количество() + ")";
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСписокРасширений()
	_ExtensionsList.Очистить();

	пМассив = РасширенияКонфигурации.Получить();

	Для Каждого Элем Из пМассив Цикл
		НС = _ExtensionsList.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция вСформироватьСтруктуруСвойствРасширения(пРежим = 0)
	пСтрук = Новый Структура("Active, SafeMode, Version, UnsafeOperationProtection, Name, Purpose, Scope, Synonym, UUID, HashSum");

	Если пРежим = 1 Тогда
		Для Каждого Элем Из пСтрук Цикл
			пСтрук[Элем.Key] = -1;
		КонецЦикла;
	КонецЕсли;

	Возврат пСтрук;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеТипа(Знач пИмяТипа)
	Попытка
		пТип = Тип(пИмяТипа);
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции
&НаСервереБезКонтекста
Функция вПолучитьСписокРасширений()
	пРезультат = Новый Массив;

	пМассив = РасширенияКонфигурации.Получить();

	Для Каждого Элем Из пМассив Цикл
		пСтрук = вСформироватьСтруктуруСвойствРасширения(1);
		ЗаполнитьЗначенияСвойств(пСтрук, Элем);

		Если пСтрук.UnsafeOperationProtection = -1 Тогда
			пСтрук.UnsafeOperationProtection = Неопределено;
		Иначе
			пСтрук.UnsafeOperationProtection = пСтрук.UnsafeOperationProtection.ПредупреждатьОбОпасныхДействиях;
		КонецЕсли;

		Если пСтрук.Scope = -1 Тогда
			пСтрук.Scope = Неопределено;
		Иначе
			пСтрук.Scope = Строка(пСтрук.ОбластьДействия);
		КонецЕсли;

		Если пСтрук.Purpose = -1 Тогда
			пСтрук.Purpose = Неопределено;
		Иначе
			пСтрук.Purpose = Строка(пСтрук.Назначение);
		КонецЕсли;

		пРезультат.Добавить(пСтрук);
	КонецЦикла;

	Возврат пРезультат;
КонецФункции

&НаКлиенте
Процедура ЗапускПодПользователемКонфигуратор(Команда)
	ТекДанные=Элементы._DBUserList.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	UT_CommonClient.Run1CSession(1, ТекДанные.Имя, Истина,
		WaitingTimeBeforePasswordRecovery);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПодПользователемТолстыйКлиентОбычноеПриложение(Команда)
	ТекДанные=Элементы._DBUserList.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	UT_CommonClient.Run1CSession(2, ТекДанные.Имя, Истина,
		WaitingTimeBeforePasswordRecovery);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПодПользователемТолстыйКлиент(Команда)
	ТекДанные=Элементы._DBUserList.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	UT_CommonClient.Run1CSession(3, ТекДанные.Имя, Истина,
		WaitingTimeBeforePasswordRecovery);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПодПользователемТонкийКлиент(Команда)
	ТекДанные=Элементы._DBUserList.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	UT_CommonClient.Run1CSession(4, ТекДанные.Имя, Истина,
		WaitingTimeBeforePasswordRecovery);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Attachable_ExecuteToolsCommonCommand(Команда) 
	UT_CommonClient.Attachable_ExecuteToolsCommonCommand(ЭтотОбъект, Команда);
КонецПроцедуры


