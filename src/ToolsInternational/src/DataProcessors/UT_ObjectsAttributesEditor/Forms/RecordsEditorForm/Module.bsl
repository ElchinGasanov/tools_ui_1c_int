&НаКлиенте
Перем мЗакрытьФормуБезВопросов;

&НаКлиенте
Перем мТекСтрокаТаблицыРегистров;

&НаКлиенте
Перем мТекСтрокаТаблицыРегистровСтарая;

&НаКлиенте
Перем мПоследнийUUID;
&НаКлиенте
Процедура вПоказатьПредупреждение(ТекстСообщения)
	ПоказатьПредупреждение( , ТекстСообщения, 20);
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	ПоказатьВопрос(Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры
&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции
&НаСервере
Процедура OnCreateAtServer(Отказ, СтандартнаяОбработка)
	mObjectRef = Параметры.mObjectRef;
	мОбъектСсылкаПредыдущий = Неопределено;

	ПутьКФормам = вПолучитьОбработку().Метаданные().ПолноеИмя() + ".Form.";

	_FastServerCall = Истина;
	_ProcessOnlySelectedRowsOnFilling = Истина;
КонецПроцедуры

&НаКлиенте
Процедура BeforeCloseAtClient(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если мЗакрытьФормуБезВопросов = Истина Или _AskQuestionOnClose = Ложь Тогда
		Возврат;
	КонецЕсли;

	Если _TabRegisters.НайтиСтроки(Новый Структура("Changed", Истина)).Количество() <> 0 Тогда
		Если ЗавершениеРаботы = Неопределено Тогда
			// для старых версии платформы
			Отказ = Истина;
			вПоказатьВопрос("вЗакрытьФорму", NSTR("ru = 'Редактор движений будет закрыт. Продолжить?';en = 'Records editor will be closed. Continue?'"));
			Возврат;
		КонецЕсли;

		Если ЗавершениеРаботы = Ложь Тогда
			Отказ = Истина;
			вПоказатьВопрос("вЗакрытьФорму", NSTR("ru = 'Редактор движений будет закрыт. Продолжить?';en = 'Records editor will be closed. Continue?'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗакрытьФорму(РезультатВопроса, ДопПараметры = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		мЗакрытьФормуБезВопросов = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура OnOpen(Отказ)
	мТекСтрокаТаблицыРегистров = Неопределено;
	мТекСтрокаТаблицыРегистровСтарая = Неопределено;

	ПодключитьОбработчикОжидания("вПослеОткрытия", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура вПослеОткрытия() Экспорт
	_Обновить(Неопределено);
КонецПроцедуры
&НаКлиенте
Процедура mObjectRefOnChange(Элемент)
	_Обновить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура mObjectRefStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если mObjectRef = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СтрукПарам = Новый Структура("CloseOnOwnerClose, MetadataGroups", Истина, "Documents");
		ОткрытьФорму("CommonForm.UT_MetadataSelectionForm", СтрукПарам, Элемент, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(mObjectRef));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура mObjectRefClearing(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = Новый ОписаниеТипов;
КонецПроцедуры
&НаКлиенте
Функция вПроверитьРегистратора()
	Если Не ЗначениеЗаполнено(mObjectRef) Тогда
		вПоказатьПредупреждение(NSTR("ru = 'Не задан объект для записи движений!';en = 'Object for write records is not set !'"));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура _OpenInNewWindow(Команда)
	СтрукПарам = Новый Структура("ПутьКФормам, mObjectRef", ПутьКФормам, mObjectRef);
	ОткрытьФорму("Обработка.UT_ObjectsAttributesEditor.Форма.RecordsEditorForm", СтрукПарам, , ТекущаяДата(), , ,
		, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура _Refresh(Команда)
	мТекСтрокаТаблицыРегистров = Неопределено;
	мТекСтрокаТаблицыРегистровСтарая = Неопределено;

	вОчиститьНаборыЗаписей();

	вОбновить();

	Элементы.RegistersGroup.Заголовок = NSTR("ru = 'Движения документа (';en = 'Document records ('") + _TabRegisters.Количество() + ")";
КонецПроцедуры

&НаКлиенте
Процедура _Write(Команда)
	Если Не вПроверитьРегистратора() Тогда
		Возврат;
	КонецЕсли;

	Значение = _TabRegisters.НайтиСтроки(Новый Структура("Write", Истина)).Количество();
	Если Значение = 0 Тогда
		вПоказатьПредупреждение(NSTR("ru = 'Не отмечены регистры для записи.';en = 'Registers for writting not set'"));
		Возврат;
	КонецЕсли;

	вПоказатьВопрос("_ЗаписатьДалее", СтрШаблон(NSTR("ru = 'Отмеченные регистры (%1 шт) будут записаны в базу. Продолжить?';en = 'Selected registers  (%1 pcs) will be written to database. Continue?'"),
		Значение));
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вЗаписать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _SortRegistersByDefault(Команда)
	_TabRegisters.Сортировать("Changed УБЫВ, Write УБЫВ, RecordCount УБЫВ, FullName");
КонецПроцедуры

&НаКлиенте
Процедура _UncheckAll(Команда)
	Для Каждого Стр Из _TabRegisters.НайтиСтроки(Новый Структура("Write", Истина)) Цикл
		Стр.Write = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _CheckAll(Команда)
	Для Каждого Стр Из _TabRegisters.НайтиСтроки(Новый Структура("Write", Ложь)) Цикл
		Стр.Write = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _CheckChangedItems(Команда)
	Для Каждого Стр Из _TabRegisters.НайтиСтроки(Новый Структура("Write, Changed", Ложь, Истина)) Цикл
		Стр.Write = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _ClearRecords(Команда)
	Если Не вПроверитьРегистратора() Тогда
		Возврат;
	КонецЕсли;

	Значение = Элементы._TabRegisters.ВыделенныеСтроки;
	Если Значение.Количество() = 0 Тогда
		вПоказатьПредупреждение(NSTR("ru = 'Не отмечены регистры для очистки.';en = 'Registers for clear not set'"));
		Возврат;
	КонецЕсли;

	вПоказатьВопрос("_ОчиститьДвиженияДалее", СтрШаблон(NStr("ru = 'Выбранные регистры (%1 шт) будут очищены. Продолжить?';en = 'Selected registers  (%1 pcs) will be cleared. Continue?'"),
		Значение.Количество()));
КонецПроцедуры

&НаКлиенте
Процедура _ОчиститьДвиженияДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыделенныеСтроки = Элементы._TabRegisters.ВыделенныеСтроки;
		Для Каждого Элем Из ВыделенныеСтроки Цикл
			СтрДанные = _TabRegisters.НайтиПоИдентификатору(Элем);
			Если СтрДанные <> Неопределено Тогда
				ИмяРеквизита = вПолучитьИмяРеквизита(СтрДанные.FullName);

				Попытка
					ТабДанные = ЭтаФорма[ИмяРеквизита];
					Если ТабДанные.Количество() <> 0 Тогда
						ТабДанные.Очистить();
						СтрДанные.Write = Истина;
						СтрДанные.Changed = Истина;
						СтрДанные.RecordsExists = Ложь;
						СтрДанные.RecordCount = 0;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _RefreshSet(Команда)
	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.ПолноеИмя);

		Если _FastServerCall Тогда
			Массив = вПрочитатьНаборЗаписейВКоллекцию(mObjectRef, ТекДанные.RegisterType, ТекДанные.Имя);

			Коллекция = ЭтаФорма[ИмяРеквизита];
			Коллекция.Очистить();

			Для Каждого Элем Из Массив Цикл
				ЗаполнитьЗначенияСвойств(Коллекция.Добавить(), Элем);
			КонецЦикла;
		Иначе
			вОбновитьНаборЗаписей(ТекДанные.RegisterType, ТекДанные.Имя);
		КонецЕсли;

		ТекДанные.Changed = Ложь;
		ТекДанные.Write = Ложь;
		ТекДанные.RecordCount = ЭтаФорма[ИмяРеквизита].Количество();
		ТекДанные.RecordsExists = (ТекДанные.RecordCount <> 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _WriteSet(Команда)
	Если Не вПроверитьРегистратора() Тогда
		Возврат;
	КонецЕсли;

	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		вПоказатьПредупреждение(NStr("ru = 'Не задан набор записей для сохранения';en = 'Recordset for saving not set'"));
		Возврат;
	КонецЕсли;
	вПоказатьВопрос("_ЗаписатьНаборДалее", NSTR("ru = 'Набор записей будет записан в базу. Продолжить?';en = 'Recordset will be saved to database. Continue?'"));
КонецПроцедуры

&НаКлиенте
Процедура _ЗаписатьНаборДалее(РезультатВопроса, ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если вЗаписатьНаборЗаписей(ТекДанные.RegisterType, ТекДанные.Имя) Тогда
				_ОбновитьНабор(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _SwitchRecordsActivity(Команда)
	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.ПолноеИмя);
		Если ЭтаФорма[ИмяРеквизита].Количество() <> 0 Тогда

			Для Каждого Стр Из ЭтаФорма[ИмяРеквизита] Цикл
				Стр.Активность = Не Стр.Активность;
			КонецЦикла;

			НаборЗаписейПриИзменении(Элементы[ИмяРеквизита]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _OpenObject(Команда)
	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.ПолноеИмя);
		ТекТаб = ЭтаФорма[ИмяРеквизита];

		Если ТекТаб.Количество() > 0 Тогда
			ТекТабЭФ = Элементы[ИмяРеквизита];
			ТекПолеЭФ = ТекТабЭФ.ТекущийЭлемент;

			пПоле = Сред(ТекПолеЭФ.Имя, СтрДлина(ИмяРеквизита) + 2);
			Значение = ТекТабЭФ.ТекущиеДанные[пПоле];

			Если ЗначениеЗаполнено(Значение) Тогда

				Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
					вПоказатьЗначениеХЗ(Значение);

				ИначеЕсли вЭтоОбъектМетаданных(ТипЗнч(Значение)) Тогда
					UT_CommonClient.EditObject(Значение);

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ShowValueType(Команда)
	_CurrentFieldValueType = "";

	Значение = Неопределено;

	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.ПолноеИмя);
		ТекТаб = ЭтаФорма[ИмяРеквизита];

		Если ТекТаб.Количество() > 0 Тогда
			ТекТабЭФ = Элементы[ИмяРеквизита];
			ТекПолеЭФ = ТекТабЭФ.ТекущийЭлемент;

			пПоле = Сред(ТекПолеЭФ.Имя, СтрДлина(ИмяРеквизита) + 2);
			Значение = ТекТабЭФ.ТекущиеДанные[пПоле];

		КонецЕсли;
	КонецЕсли;

	Если Значение = Неопределено Тогда
		ИмяТипа = "Неопределено";
	Иначе
		ИмяТипа = вСформироватьИмяТипаПоЗначению(Значение);
	КонецЕсли;

	_CurrentFieldValueType = ИмяТипа;
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьЗначениеХЗ(Значение)
	СтрукПарам = Новый Структура("ПутьКФормам, ValueStorageData", ПутьКФормам, Значение);
	ОткрытьФорму("CommonForm.UT_ValueStorageForm", СтрукПарам, , ТекущаяДата());
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
Функция вПолучитьИмяРеквизита(Знач ПолноеИмя)
	Возврат СтрЗаменить(ПолноеИмя, ".", "_");
КонецФункции

&НаКлиенте
Процедура вОчиститьНаборыЗаписей()
	Для Каждого Стр Из _TabRegisters.НайтиСтроки(Новый Структура("ЕстьРеквизитФормы", Истина)) Цикл
		ИмяРеквизита = вПолучитьИмяРеквизита(Стр.FullName);
		ЭтаФорма[ИмяРеквизита].Очистить();
		Стр.RecordsExists = Ложь;
		Стр.RecordCount = 0;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура вУдалитьРеквизитыНаборовЗаписей()
	МассивКСозданию = Новый Массив;
	МассивКУдалению = Новый Массив;

	Для Каждого Стр Из _TabRegisters.НайтиСтроки(Новый Структура("ЕстьРеквизитФормы", Истина)) Цикл
		ИмяРеквизита = вПолучитьИмяРеквизита(Стр.FullName);

		Если вПроверитьНаличиеРеквизита(ИмяРеквизита) Тогда
			МассивКУдалению.Добавить(ИмяРеквизита);
		КонецЕсли;
		Стр.ЕстьРеквизитФормы = Ложь;

		ЭФ = Элементы.Найти("Стр_" + ИмяРеквизита);
		Если ЭФ <> Неопределено Тогда
			Элементы.Удалить(ЭФ);
		КонецЕсли;
	КонецЦикла;

	ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
КонецПроцедуры

&НаСервереБезКонтекста
Функция вЭтоОбъектМетаданных(Знач Тип)
	ОбъектМД = Метаданные.НайтиПоТипу(Тип);
	Возврат (ОбъектМД <> Неопределено И Не Метаданные.Перечисления.Содержит(ОбъектМД));
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьИмяТипаПоЗначению(Знач Значение)
	пТип = ТипЗнч(Значение);

	ОбъектМД = Метаданные.НайтиПоТипу(пТип);
	Если ОбъектМД <> Неопределено Тогда
		ИмяТипа = ОбъектМД.ПолноеИмя();
	Иначе
		ИмяТипа = Строка(пТип);
	КонецЕсли;

	Возврат ИмяТипа;
КонецФункции

&НаСервереБезКонтекста
Функция вПрочитатьНаборЗаписей(Регистратор, ВидРегистра, ИмяРегистра)
	Набор = вСоздатьНаборЗаписей(Регистратор, ВидРегистра, ИмяРегистра);
	Набор.Прочитать();

	ТабРезультат = Набор.Выгрузить();

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСоздатьНаборЗаписей(Регистратор, ВидРегистра, ИмяРегистра)
	Если ВидРегистра = "РегистрСведений" Тогда
		Менеджер = РегистрыСведений[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрНакопления" Тогда
		Менеджер = РегистрыНакопления[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрРасчета" Тогда
		Менеджер = РегистрыРасчета[ИмяРегистра];
	ИначеЕсли ВидРегистра = "РегистрБухгалтерии" Тогда
		Менеджер = РегистрыБухгалтерии[ИмяРегистра];
	Иначе
		Менеджер = Неопределено;
	КонецЕсли;

	Набор = Менеджер.СоздатьНаборЗаписей();
	Набор.Отбор.Recorder.Установить(Регистратор);

	Возврат Набор;
КонецФункции

&НаСервереБезКонтекста
Функция вПрочитатьНаборЗаписейВКоллекцию(Знач Регистратор, Знач ВидРегистра, Знач ИмяРегистра)
	ТабРезультат = вПрочитатьНаборЗаписей(Регистратор, ВидРегистра, ИмяРегистра);

	Струк = Новый Структура;

	Для Каждого Элем Из ТабРезультат.Колонки Цикл
		Струк.Вставить(Элем.Имя);
	КонецЦикла;

	Массив = Новый Массив;

	Для Каждого Стр Из ТабРезультат Цикл
		НС = Новый Структура;
		Для Каждого Элем Из Струк Цикл
			НС.Вставить(Элем.Ключ);
		КонецЦикла;

		ЗаполнитьЗначенияСвойств(НС, Стр);
		Массив.Добавить(НС);
	КонецЦикла;

	Возврат Массив;
КонецФункции

&НаСервере
Процедура вОбновитьНаборЗаписей(Знач ВидРегистра, Знач ИмяРегистра)
	ТабРезультат = вПрочитатьНаборЗаписей(mObjectRef, ВидРегистра, ИмяРегистра);
	ЗначениеВРеквизитФормы(ТабРезультат, вПолучитьИмяРеквизита(ВидРегистра + "." + ИмяРегистра));
КонецПроцедуры

&НаСервере
Функция вЗаписатьНаборЗаписей(Знач ВидРегистра, Знач ИмяРегистра)
	Попытка
		ИмяРеквизита = вПолучитьИмяРеквизита(ВидРегистра + "." + ИмяРегистра);
		Набор = вСоздатьНаборЗаписей(mObjectRef, ВидРегистра, ИмяРегистра);

		Если ЭтаФорма[ИмяРеквизита].Количество() <> 0 Тогда
			ТабРезультат = РеквизитФормыВЗначение(ИмяРеквизита);
			Набор.Загрузить(ТабРезультат);
		КонецЕсли;

		Если _WriteInLoadingMode Тогда
			Набор.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Набор.Записать();
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

&НаСервере
Функция вЗаписать()
	НайденныеСтроки = _TabRegisters.НайтиСтроки(Новый Структура("Write", Истина));
	пЕстьТранзакция = (НайденныеСтроки.Количество() > 1);

	Если пЕстьТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;

	Для Каждого Стр Из НайденныеСтроки Цикл
		Если Не вЗаписатьНаборЗаписей(Стр.RegisterType, Стр.Name) Тогда
			Если пЕстьТранзакция Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если пЕстьТранзакция Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Для Каждого Стр Из НайденныеСтроки Цикл
		ИмяРеквизита = вПолучитьИмяРеквизита(Стр.FullName);

		вОбновитьНаборЗаписей(Стр.RegisterType, Стр.Name);

		Стр.Changed = Ложь;
		Стр.Write = Ложь;
		Стр.RecordCount = ЭтаФорма[ИмяРеквизита].Количество();
		Стр.RecordsExists = (Стр.RecordCount <> 0);
	КонецЦикла;

	Возврат Истина;
КонецФункции
&НаСервереБезКонтекста
Функция вОписаниеТиповДляUUID(пОписаниеТипов)
	Если пОписаниеТипов.Типы().Количество() = 1 Тогда
		пНовоеОписаниеТипов = Новый ОписаниеТипов(пОписаниеТипов, "Строка");
	Иначе
		пНовоеОписаниеТипов = пОписаниеТипов;
	КонецЕсли;

	Возврат пНовоеОписаниеТипов;
КонецФункции

&НаСервере
Процедура вСоздатьРеквизитыНаборовЗаписей(НадоСоздаватьРеквизиты = Истина)
	ТипХЗ = Тип("ХранилищеЗначения");
	ТипТТ = Тип("Тип");
	ТипМВ = Тип("МоментВремени");
	ТипUUID = Тип("УникальныйИдентификатор");

	СоотвДанные = Новый Соответствие;

	МассивКСозданию = Новый Массив;
	МассивКУдалению = Новый Массив;

	Для Каждого Стр Из _TabRegisters Цикл
		Стр.ЕстьРеквизитФормы = Истина;

		ИмяРеквизита = вПолучитьИмяРеквизита(Стр.FullName);

		Если НадоСоздаватьРеквизиты Тогда
			МассивКСозданию.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"), ,
				Стр.FullName, Ложь));
		КонецЕсли;

		ТабРезультат = вПрочитатьНаборЗаписей(mObjectRef, Стр.RegisterType, Стр.Name);
		СоотвДанные.Вставить(ИмяРеквизита, ТабРезультат);

		Стр.RecordCount = ТабРезультат.Количество();
		Стр.RecordsExists = (Стр.RecordCount <> 0);
		Стр.Changed = Ложь;
		Стр.Write = Ложь;

		Если НадоСоздаватьРеквизиты Тогда
			Для Каждого Колонка Из ТабРезультат.Колонки Цикл
				Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда
					ТипЗначенияРеквизита = Новый ОписаниеТипов;
				ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипТТ) Тогда
					ТипЗначенияРеквизита = Новый ОписаниеТипов;
				ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипМВ) Тогда
					ТипЗначенияРеквизита = Новый ОписаниеТипов;
				ИначеЕсли Колонка.ТипЗначения.СодержитТип(ТипUUID) Тогда
					ТипЗначенияРеквизита = вОписаниеТиповДляUUID(Колонка.ТипЗначения);
				Иначе
					ТипЗначенияРеквизита = Колонка.ТипЗначения;
				КонецЕсли;
				МассивКСозданию.Добавить(Новый РеквизитФормы(Колонка.Name, ТипЗначенияРеквизита, ИмяРеквизита,
					Колонка.Заголовок, Ложь));
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Если НадоСоздаватьРеквизиты Тогда
		ИзменитьРеквизиты(МассивКСозданию, МассивКУдалению);
	КонецЕсли;

	_TabRegisters.Сортировать("Changed УБЫВ, RecordCount УБЫВ, FullName");
	
	// создание элементов формы
	СтрукСпецКолонки = Новый Структура("Recorder, МоментВремени");

	Для Каждого Элем Из СоотвДанные Цикл
		ТабРезультат = Элем.Значение;
		ИмяРеквизита = СтрЗаменить(Элем.Ключ, ".", "_");

		ЗначениеВРеквизитФормы(Элем.Значение, Элем.Ключ);

		Если Не НадоСоздаватьРеквизиты Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтраница = Элементы.Добавить("Стр_" + ИмяРеквизита, Тип("ГруппаФормы"), Элементы.СтраницыНаборыЗаписей);
		НоваяСтраница.Вид = ВидГруппыФормы.Страница;
		НоваяСтраница.Заголовок = "";
		НоваяСтраница.Видимость = Истина;

		ЭлемТЗ = ЭтаФорма.Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), НоваяСтраница);
		ЭлемТЗ.ПутьКДанным = ИмяРеквизита;
		ЭлемТЗ.УстановитьДействие("ПриИзменении", "НаборЗаписейПриИзменении");

		Элем = ЭтаФорма.Элементы.Добавить("_" + ИмяРеквизита + "_ПереключитьАктивностьЗаписей", Тип("КнопкаФормы"),
			ЭлемТЗ.КоманднаяПанель);
		Элем.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элем.ИмяКоманды = "_ПереключитьАктивностьЗаписей";

		Элем = ЭтаФорма.Элементы.Добавить("_" + ИмяРеквизита + "_ОткрытьОбъект", Тип("КнопкаФормы"),
			ЭлемТЗ.КоманднаяПанель);
		Элем.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элем.ИмяКоманды = "_ОткрытьОбъект";

		Элем = ЭтаФорма.Элементы.Добавить("_" + ИмяРеквизита + "_ОбновитьНабор", Тип("КнопкаФормы"),
			ЭлемТЗ.КоманднаяПанель);
		Элем.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элем.ИмяКоманды = "_ОбновитьНабор";

		Элем = ЭтаФорма.Элементы.Добавить("_" + ИмяРеквизита + "_ЗаписатьНабор", Тип("КнопкаФормы"),
			ЭлемТЗ.КоманднаяПанель);
		Элем.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элем.ИмяКоманды = "_ЗаписатьНабор";

		ГруппаКнопок = Элементы.Добавить("Группа_" + ЭлемТЗ.Name, Тип("ГруппаФормы"), ЭлемТЗ.КонтекстноеМеню);
		ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;

		Кнопка = Элементы.Добавить("_ВставитьУникальныйИдентификатор_" + ЭлемТЗ.Name, Тип("КнопкаФормы"), ГруппаКнопок);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = "_InsertUUID";

		Для Каждого Колонка Из ТабРезультат.Колонки Цикл
			Если СтрукСпецКолонки.Свойство(Колонка.Имя) Тогда
				Продолжить;
			КонецЕсли;

			Элем = ЭтаФорма.Элементы.Добавить(ИмяРеквизита + "_" + Колонка.Name, Тип("ПолеФормы"), ЭлемТЗ);
			Элем.ПутьКДанным = ИмяРеквизита + "." + Колонка.Name;
			Элем.Вид = ВидПоляФормы.ПолеВвода;
			Элем.ДоступныеТипы = Колонка.ТипЗначения;
			Элем.КнопкаОчистки = Истина;

			Если Колонка.ТипЗначения.СодержитТип(ТипХЗ) Тогда // версия 033
				Элем.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция вПроверитьНаличиеРеквизита(ИмяРеквизита)
	Струк = Новый Структура(ИмяРеквизита);
	ЗаполнитьЗначенияСвойств(Струк, ЭтаФорма);

	Возврат (Струк[ИмяРеквизита] <> Неопределено);
КонецФункции

&НаСервере
Процедура вОбновить()
	НадоСоздаватьРеквизиты = (ТипЗнч(mObjectRef) <> ТипЗнч(мОбъектСсылкаПредыдущий));

	мОбъектСсылкаПредыдущий = mObjectRef;

	Если НадоСоздаватьРеквизиты Тогда
		вУдалитьРеквизитыНаборовЗаписей();

		_TabRegisters.Очистить();

		мТекСтрокаТаблицыРегистров = Неопределено;

		Если mObjectRef <> Неопределено Тогда
			ОбъектМД = mObjectRef.Метаданные();
			_ПолноеИмяДокумента = ОбъектМД.ПолноеИмя();

			Для Каждого ОбъектРегистрМД Из ОбъектМД.Движения Цикл
				НС = _TabRegisters.Добавить();
				НС.Name = ОбъектРегистрМД.Name;
				НС.Presentation = ОбъектРегистрМД.Представление();
				НС.FullName = ОбъектРегистрМД.ПолноеИмя();
				НС.RegisterType = Лев(НС.FullName, СтрНайти(НС.FullName, ".") - 1);
			КонецЦикла;
		КонецЕсли;

		_TabRegisters.Сортировать("FullName");
	КонецЕсли;

	вСоздатьРеквизитыНаборовЗаписей(НадоСоздаватьРеквизиты);
КонецПроцедуры
&НаКлиенте
Процедура НаборЗаписейПриИзменении(Элемент)
	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекДанные.Changed = Истина;
		ТекДанные.Write = Истина;
		ТекДанные.RecordCount = ЭтаФорма[Элемент.Name].Количество();
		ТекДанные.RecordsExists = (ТекДанные.RecordCount <> 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _TabRegistersOnActivateRow(Элемент)
	ТекСтрока = Элемент.ТекущаяСтрока;
	Если ТекСтрока <> мТекСтрокаТаблицыРегистров Тогда
		мТекСтрокаТаблицыРегистровСтарая = мТекСтрокаТаблицыРегистров;
		мТекСтрокаТаблицыРегистров = ТекСтрока;
		ПодключитьОбработчикОжидания("вПриАктивизацииСтрокиТаблицыРегистров", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПриАктивизацииСтрокиТаблицыРегистров() Экспорт
	Если мТекСтрокаТаблицыРегистровСтарая <> Неопределено Тогда
		ТекДанные = _TabRegisters.НайтиПоИдентификатору(мТекСтрокаТаблицыРегистровСтарая);
		Если ТекДанные <> Неопределено Тогда
			ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.FullName);
		КонецЕсли;
	КонецЕсли;

	ТекДанные = Неопределено;
	Если мТекСтрокаТаблицыРегистров <> Неопределено Тогда
		ТекДанные = _TabRegisters.НайтиПоИдентификатору(мТекСтрокаТаблицыРегистров);
		Если ТекДанные <> Неопределено Тогда
			ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.FullName);
			Элементы.RecordSetsPages.ТекущаяСтраница = Элементы["Стр_" + ИмяРеквизита];
		КонецЕсли;
	КонецЕсли;

	Если ТекДанные = Неопределено Тогда
		Элементы.RecordSetsPages.ТекущаяСтраница = Элементы.StrExample;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _FillCurrentColumnData(Команда)
	ТекДанные = Элементы._TabRegisters.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ИмяРеквизита = вПолучитьИмяРеквизита(ТекДанные.ПолноеИмя);
		ТекТаб = ЭтаФорма[ИмяРеквизита];

		Если ТекТаб.Количество() > 0 Тогда

			пЗначение = _ValueToFill;

			ТекДанные.Write = Истина;
			ТекДанные.Changed = Истина;

			ТекТабЭФ = Элементы[ИмяРеквизита];
			ТекПолеЭФ = ТекТабЭФ.ТекущийЭлемент;

			пПоле = Сред(ТекПолеЭФ.Имя, СтрДлина(ИмяРеквизита) + 2);

			Если _ProcessOnlySelectedRowsOnFilling Тогда
				Для Каждого Элем Из ТекТабЭФ.ВыделенныеСтроки Цикл
					Стр = ТекТаб.НайтиПоИдентификатору(Элем);
					Стр[пПоле] = пЗначение;
				КонецЦикла;
			Иначе
				Для Каждого Стр Из ТекТаб Цикл
					Стр[пПоле] = пЗначение;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ValueToFillStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если _ValueToFill = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		СтрукПарам = Новый Структура("CloseOnOwnerClose, TypesToFillValues", Истина, Истина);
		ОткрытьФорму("CommonForm.UT_MetadataSelectionForm", СтрукПарам, Элемент, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ТипЗнч(_ValueToFill) = Тип("УникальныйИдентификатор") Тогда
		СтандартнаяОбработка = Ложь;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(ТипЗнч(_ValueToFill));
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ValueToFillClearing(Элемент, СтандартнаяОбработка)
	Элемент.ОграничениеТипа = Новый ОписаниеТипов;
КонецПроцедуры


// загрузка движений из другого документа
&НаСервереБезКонтекста
Функция вПолучитьПериодРегистрации(ДокСсылка, ИмяТаблицы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокСсылка);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				   |	АвансовыйОтчет.Дата КАК Дата
				   |ИЗ
				   |	" + ИмяТаблицы + " КАК АвансовыйОтчет
										 |ГДЕ
										 |	АвансовыйОтчет.Ссылка = &Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();

	Возврат ?(Выборка.Следующий(), Выборка.Дата, Неопределено);
КонецФункции
&НаКлиенте
Процедура _LoadOtherDocumentRecords(Команда)
	Если Не вПроверитьРегистратора() Тогда
		Возврат;
	КонецЕсли;

	СтрукПарам = Новый Структура("CloseOnOwnerClose, MetadataGroups", Истина, "Documents");
	ОткрытьФорму("CommonForm.UT_MetadataSelectionForm", СтрукПарам, ЭтаФорма, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ChoiceProcessingAtClient(ВыбранноеЗначение, ИсточникВыбора)
	ПоказатьВводЗначения(Новый ОписаниеОповещения("вОбработатьВыборДокументаДляЗагрузкиДвижений", ЭтаФорма),
		ВыбранноеЗначение, NStr("ru = 'Документ для загрузки движений';en = 'Document for records loading'"));
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВыборДокументаДляЗагрузкиДвижений(Значение, ДопПараметры = Неопределено) Экспорт
	Если Значение <> Неопределено Тогда
		вПоказатьВопрос("вЗагрузитьДвиженияИзДокумента",
			nstr("ru = 'Будут загружены движения из выбранного документа. Продолжить?';en = 'Will be loaded records from selected document. Continue?'"), Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вЗагрузитьДвиженияИзДокумента(РезультатВопроса, ДокСсылка) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЗначениеЗаполнено(ДокСсылка) Тогда
		Если вЗагрузитьДвиженияИзДокументаНаСервере(ДокСсылка) Тогда
			_СортироватьРегистрыСтандартно(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция вЗагрузитьДвиженияИзДокументаНаСервере(ДокСсылка)
	пРезультат = Ложь;

	пДжвиженияПриемник = mObjectRef.Метаданные().Движения;

	Для Каждого ЭлеметМД Из ДокСсылка.Метаданные().Движения Цикл
		Если пДжвиженияПриемник.Содержит(ЭлеметМД) Тогда
			пПолноеИмя = ЭлеметМД.ПолноеИмя();
			пВидРегистра = Лев(пПолноеИмя, СтрНайти(пПолноеИмя, ".") - 1);

			ТабДанные = вПрочитатьНаборЗаписей(ДокСсылка, пВидРегистра, ЭлеметМД.Имя);
			Если ТабДанные.Количество() <> 0 Тогда
				СтрукОсновное = Новый Структура("Период, Recorder", вПолучитьПериодРегистрации(mObjectRef,
					_ПолноеИмяДокумента), mObjectRef);
				ИмяРеквизита = вПолучитьИмяРеквизита(пПолноеИмя);
				ТабНабор = ЭтаФорма[ИмяРеквизита];
				Для Каждого Стр Из ТабДанные Цикл
					НС = ТабНабор.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Стр);
					ЗаполнитьЗначенияСвойств(НС, СтрукОсновное);
				КонецЦикла;

				Массив = _TabRegisters.НайтиСтроки(Новый Структура("FullName", пПолноеИмя));
				Если Массив.Количество() <> 0 Тогда
					СтрРегистр = Массив[0];
					СтрРегистр.Write = Истина;
					СтрРегистр.Changed = Истина;
					СтрРегистр.RecordsExists = Истина;
					СтрРегистр.RecordCount = ТабНабор.Количество();
				КонецЕсли;

				пРезультат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат пРезультат;
КонецФункции
&НаКлиенте
Процедура _InsertUUID(Команда)
	ТекТаблица = ЭтаФорма.ТекущийЭлемент;

	Если ТекТаблица.Name = "_ValueToFill" Тогда
		пСтрук = Новый Структура("Таблица", ТекТаблица.Name);
		ПоказатьВводСтроки(Новый ОписаниеОповещения("вОбработатьВвод_UUID", ЭтаФорма, пСтрук), мПоследнийUUID,
			NStr("ru = 'Введите уникальный идентификатор';en = 'Enter a unique identifier (UUID)'"), , Ложь);
		Возврат;
	ИначеЕсли ТипЗнч(ТекТаблица) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;

	ТекКолонка = ТекТаблица.ТекущийЭлемент;
	Если ТекКолонка = Неопределено Или ТекКолонка.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Попытка
		пДоступныеТипы = ТекКолонка.ДоступныеТипы.Типы();
		Если пДоступныеТипы.Количество() <> 0 И пДоступныеТипы.Найти(Тип("УникальныйИдентификатор")) <> 0 Тогда
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;

	ТекДанные = Элементы[ТекТаблица.Name].ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		пСтрук = Новый Структура("Таблица", ТекТаблица.Name);

		пСтрук.Вставить("Поле", Сред(ТекКолонка.Имя, СтрДлина(ТекТаблица.Имя) + 2));

		ПоказатьВводСтроки(Новый ОписаниеОповещения("вОбработатьВвод_UUID", ЭтаФорма, пСтрук), мПоследнийUUID,
			NStr("ru = 'Введите уникальный идентификатор';en = 'Enter a unique identifier (UUID)'"), , Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьВвод_UUID(Строка, пСтрук = Неопределено) Экспорт
	Если Строка <> Неопределено И Не ПустаяСтрока(Строка) Тогда
		Попытка
			пЗначение = Новый УникальныйИдентификатор(Строка);
			мПоследнийUUID = Строка;
		Исключение
			ПоказатьПредупреждение( , NSTR("ru = 'Значение не может быть преобразовано в Уникальный идентификатор!';en = 'The value cannot be converted to a Unique identifier! (UUID)'"), 20);
			Возврат;
		КонецПопытки;

		Если пСтрук.Таблица = "_ValueToFill" Тогда
			_ValueToFill = пЗначение;
		Иначе
			ТекДанные = Элементы[пСтрук.Таблица].ТекущиеДанные;
			Если ТекДанные <> Неопределено Тогда
				ТекДанные[пСтрук.Поле] = пЗначение;

				ТекДанныеРег = Элементы._TabRegisters.ТекущиеДанные;
				ТекДанныеРег.Write = Истина;
				ТекДанныеРег.Changed = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры