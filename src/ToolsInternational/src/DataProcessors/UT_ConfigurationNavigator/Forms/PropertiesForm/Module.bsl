&НаКлиентеНаСервереБезКонтекста
Функция вСтрРазделить(Знач Стр, Разделитель, ВключатьПустые = Истина)

	МассивСтрок = Новый Массив;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Значение = СокрЛП(Стр);
				Если ВключатьПустые Или Не ПустаяСтрока(Значение) Тогда
					МассивСтрок.Добавить(Значение);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;

			Значение = СокрЛП(Лев(Стр, Поз - 1));
			Если ВключатьПустые Или Не ПустаяСтрока(Значение) Тогда
				МассивСтрок.Добавить(Значение);
			КонецЕсли;
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Значение = СокрЛП(Стр);
				Если ВключатьПустые Или Не ПустаяСтрока(Значение) Тогда
					МассивСтрок.Добавить(Значение);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;

			Значение = СокрЛП(Лев(Стр, Поз - 1));
			Если ВключатьПустые Или Не ПустаяСтрока(Значение) Тогда
				МассивСтрок.Добавить(Значение);
			КонецЕсли;
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция вЗначениеВМассив(Знач Значение)
	Массив = Новый Массив;
	Массив.Добавить(Значение);

	Возврат Массив;
КонецФункции

&НаСервереБезКонтекста
Функция вЕстьПраваАдминистратора()
	Возврат ПравоДоступа("Администрирование", Метаданные);
КонецФункции

&НаКлиенте
Процедура вПоказатьВопрос(ИмяПроцедуры, ТекстВопроса, ДопПараметры = Неопределено)
	ПоказатьВопрос(Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ДопПараметры), ТекстВопроса,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры
&НаСервере
Процедура вОтладкаСервер()
	//ТабРезультат = vGetProcessor().моПолучитьТаблицеРегистраторов("ААА");
КонецПроцедуры

&НаСервере
Функция вПолучитьОбработку()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция вСкопироватьСтруктуру(Источник)
	Струк = Новый Структура;

	Для Каждого Элем Из Источник Цикл
		Струк.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;

	Возврат Струк;
КонецФункции

&НаСервереБезКонтекста
Функция вПроверитьНаличиеСвойства(Объект, ИмяСвойства)
	Струк = Новый Структура(ИмяСвойства);
	ЗаполнитьЗначенияСвойств(Струк, Объект);

	Возврат (Струк[ИмяСвойства] <> Неопределено);
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТаблицуДвиженийДокументов(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;

	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;

	Если ТабРезультат = -1 Или ТабРезультат = Неопределено Или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500));

		ТабРезультат = Новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("ИмяРегистра", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);
		ТабРезультат.Колонки.Добавить("StringType", ТипСтрока);

		Для Каждого ОбъектМД Из Метаданные.Документы Цикл
			Для Каждого Элем Из ОбъектМД.Движения Цикл
				НС = ТабРезультат.Добавить();
				НС.Name = ОбъектМД.Name;
				НС.Synonym = ОбъектМД.Представление();
				НС.Comment = ОбъектМД.Comment;
				НС.StringType = ОбъектМД.FullName();
				НС.ИмяРегистра = Элем.FullName();
			КонецЦикла;
		КонецЦикла;

		ТабРезультат.Сортировать("ИмяРегистра, Name");
		ТабРезультат.Индексы.Добавить("ИмяРегистра");

		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор,
			АдресХранилища));
	КонецЕсли;

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТаблицуПодписокНаСобытия(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;

	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;

	Если ТабРезультат = -1 Или ТабРезультат = Неопределено Или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500));

		Кэш = Новый Соответствие;

		ТабРезультат = Новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Источник", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);

		СтрукДанные = Новый Структура("Name, Synonym, Comment");
		Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
			СтрукДанные.Name = Подписка.Name;
			СтрукДанные.Synonym = Подписка.Представление();
			СтрукДанные.Comment = СтрукДанные.Comment;

			Для Каждого Type Из Подписка.Источник.Типы() Цикл
				НС = ТабРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрукДанные);

				ИмяИсточника = Кэш[Type];
				Если ИмяИсточника = Неопределено Тогда
					ИмяИсточника =  Метаданные.НайтиПоТипу(Type).FullName();
					Кэш[Type] = ИмяИсточника;
				КонецЕсли;

				НС.Источник = ИмяИсточника;
			КонецЦикла;
		КонецЦикла;

		ТабРезультат.Сортировать("Источник, Name");
		ТабРезультат.Индексы.Добавить("Источник");

		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор,
			АдресХранилища));
	КонецЕсли;

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТаблицуОбщихКоманд(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;

	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;

	Если ТабРезультат = -1 Или ТабРезультат = Неопределено Или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500));

		Кэш = Новый Соответствие;

		ТабРезультат = Новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Параметр", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);

		СтрукДанные = Новый Структура("Name, Synonym, Comment");
		Для Каждого ОбъектМД Из Метаданные.ОбщиеКоманды Цикл
			СтрукДанные.Name = ОбъектМД.Name;
			СтрукДанные.Synonym = ОбъектМД.Представление();
			СтрукДанные.Comment = ОбъектМД.Comment;

			Для Каждого Type Из ОбъектМД.ТипПараметраКоманды.Типы() Цикл
				НС = ТабРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрукДанные);

				ИмяПараметра = Кэш[Type];
				Если ИмяПараметра = Неопределено Тогда
					ИмяПараметра =  Метаданные.НайтиПоТипу(Type).FullName();
					Кэш[Type] = ИмяПараметра;
				КонецЕсли;

				НС.Параметр = ИмяПараметра;
			КонецЦикла;
		КонецЦикла;

		ТабРезультат.Сортировать("Параметр, Name");
		ТабРезультат.Индексы.Добавить("Параметр");

		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор,
			АдресХранилища));
	КонецЕсли;

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТаблицуКоманд(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;

	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;

	Если ТабРезультат = -1 Или ТабРезультат = Неопределено Или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500));

		Кэш = Новый Соответствие;

		ТабРезультат = Новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Параметр", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);

		СтрукДанные = Новый Структура("Name, Synonym, Comment");

		ПереченьРазделов = "Справочники, ЖурналыДокументов, Документы, Перечисления, Обработки, Отчеты,
						   |ПланыСчетов, ПланыВидовХарактеристик, ПланыВидовРасчета, ПланыОбмена,
						   |РегистрыСведений, РегистрыНакопления, РегистрыРасчета, РегистрыБухгалтерии,
						   |БизнесПроцессы, Задачи, КритерииОтбора";

		СтрукРазделы = Новый Структура(ПереченьРазделов);

		Для Каждого Элем Из СтрукРазделы Цикл
			Для Каждого ОбъектХХХ Из Метаданные[Элем.Ключ] Цикл
				ИмяТипаХХХ = ОбъектХХХ.FullName();

				Если вПроверитьНаличиеСвойства(ОбъектХХХ, "Команды") Тогда
					Для Каждого ОбъектМД Из ОбъектХХХ.Команды Цикл
						СтрукДанные.Name = ОбъектМД.FullName();
						СтрукДанные.Synonym = ОбъектМД.Представление();
						СтрукДанные.Comment = ОбъектМД.Comment;

						Для Каждого Type Из ОбъектМД.ТипПараметраКоманды.Типы() Цикл
							ИмяПараметра = Кэш[Type];
							Если ИмяПараметра = Неопределено Тогда
								ИмяПараметра =  Метаданные.НайтиПоТипу(Type).FullName();
								Кэш[Type] = ИмяПараметра;
							КонецЕсли;

							Если ИмяПараметра = ИмяТипаХХХ Тогда
								Продолжить;
							КонецЕсли;

							НС = ТабРезультат.Добавить();
							ЗаполнитьЗначенияСвойств(НС, СтрукДанные);

							НС.Параметр = ИмяПараметра;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		ТабРезультат.Сортировать("Параметр, Name");
		ТабРезультат.Индексы.Добавить("Параметр");

		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор,
			АдресХранилища));
	КонецЕсли;

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вСформироватьТаблицуПодсистем(АдресХранилища, Знач УникальныйИдентификатор)
	Попытка
		ТабРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Исключение
		ТабРезультат = Неопределено;
	КонецПопытки;

	Если ТабРезультат = Неопределено Тогда
		АдресХранилища = "";
	КонецЕсли;

	Если ТабРезультат = -1 Или ТабРезультат = Неопределено Или ТабРезультат.Колонки.Количество() = 0 Тогда
		ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(500));

		Кэш = Новый Соответствие;

		ТабРезультат = Новый ТаблицаЗначений;
		ТабРезультат.Колонки.Добавить("Объект", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
		ТабРезультат.Колонки.Добавить("FullName", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
		ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);

		Коллекция = Новый Соответствие;
		вСформироватьКоллекциюПодсистем( , Коллекция);

		СтрукДанные = Новый Структура("Name, FullName, Synonym, Comment");
		Для Каждого Элем Из Коллекция Цикл
			ОбъектМД = Элем.Ключ;

			СтрукДанные.Name = ОбъектМД.Name;
			СтрукДанные.FullName = ОбъектМД.FullName();
			СтрукДанные.Synonym = ОбъектМД.Представление();
			СтрукДанные.Comment = ОбъектМД.Comment;

			Для Каждого Элем Из ОбъектМД.Состав Цикл
				НС = ТабРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрукДанные);

				НС.Объект = Элем.FullName();
			КонецЦикла;
		КонецЦикла;

		ТабРезультат.Сортировать("Объект, Name");
		ТабРезультат.Индексы.Добавить("Объект");

		АдресХранилища = ПоместитьВоВременноеХранилище(ТабРезультат, ?(АдресХранилища = "", УникальныйИдентификатор,
			АдресХранилища));
	КонецЕсли;

	Возврат ТабРезультат;
КонецФункции

&НаСервереБезКонтекста
Процедура вСформироватьКоллекциюПодсистем(Знач Подсистема = Неопределено, Знач Коллекция)
	Если Подсистема = Неопределено Тогда
		Для Каждого ОбъектМД Из Метаданные.Подсистемы Цикл
			вСформироватьКоллекциюПодсистем(ОбъектМД, Коллекция);
		КонецЦикла;
	Иначе
		Коллекция.Вставить(Подсистема);
		Для Каждого ОбъектМД Из Подсистема.Подсистемы Цикл
			Коллекция.Вставить(ОбъектМД);
			вСформироватьКоллекциюПодсистем(ОбъектМД, Коллекция);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция вПолучитьТаблицуРегистраторов(ИмяРегистра)
	Возврат вСформироватьТаблицуДвиженийДокументов(_StorageAddresses.Движения, УникальныйИдентификатор).Скопировать(
		Новый Структура("ИмяРегистра", ИмяРегистра));
КонецФункции

&НаСервере
Функция вПолучитьТаблицуПодписок(ИмяОбъекта)
	Возврат вСформироватьТаблицуПодписокНаСобытия(_StorageAddresses.Подписки, УникальныйИдентификатор).Скопировать(
		Новый Структура("Источник", ИмяОбъекта));
КонецФункции

&НаСервере
Функция вПолучитьТаблицуОбщихКоманд(ИмяОбъекта)
	Возврат вСформироватьТаблицуОбщихКоманд(_StorageAddresses.ОбщиеКоманды, УникальныйИдентификатор).Скопировать(
		Новый Структура("Параметр", ИмяОбъекта));
КонецФункции

&НаСервере
Функция вПолучитьТаблицуЧужихКоманд(ИмяОбъекта)
	Возврат вСформироватьТаблицуКоманд(_StorageAddresses.Команды, УникальныйИдентификатор).Скопировать(
		Новый Структура("Параметр", ИмяОбъекта));
КонецФункции

&НаСервере
Функция вПолучитьТаблицуПодсистем(ИмяОбъекта)
	Возврат вСформироватьТаблицуПодсистем(_StorageAddresses.Подсистемы, УникальныйИдентификатор).Скопировать(
		Новый Структура("Объект", ИмяОбъекта));
КонецФункции

&НаКлиенте
Функция вСформироватьСтруктуруНастроекФормыСвойствОбъекта()
	Струк = Новый Структура("_ShowEventSubscriptions, _ShowJbjectsSubsytems, _ShowCommonObjectCommands, _ShowExternalObjectCommands");
	ЗаполнитьЗначенияСвойств(Струк, ЭтаФорма);

	Возврат Струк;
КонецФункции
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Заголовок = Параметры.FullName;

	_FullName = Параметры.FullName;
	
	_ListFormName = ".ФормаСписка";

	PathToForms = Параметры.PathToForms;

	_StorageAddresses = вСкопироватьСтруктуру(Параметры._StorageAddresses);

	_AdditionalVars = Новый Структура;
	_AdditionalVars.Вставить("DescriptionOfAccessRights", Параметры.DescriptionOfAccessRights);

	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ProcessingSettings);

	Элементы.PropertyTreeGroup_UpdateNumberOfObjects.Видимость = вЕстьПраваАдминистратора();

	Элементы.ПраваДоступаДляРоли.Видимость = Ложь;
	Элементы.ПраваДоступаКОбъекту_Роли.Видимость = Истина;

	Элементы.ValuePage.Видимость = Ложь;
	Элементы.СтраницаЗависимыеОбъекты.Видимость = Ложь;
	Элементы.СтраницаУправлениеИтогами.Видимость = Ложь;

	Если Параметры.FullName = "Конфигурация" Тогда
		вЗаполнитьСвойстваКонфигурации();
		Элементы.PropertyTreeGroupkOpemListForm.Видимость = Ложь;
		Элементы.PropertyTreeGroupkOpemListFormAdditional.Видимость = Ложь;
		Элементы.PropertyTreeGroupkShowObjectProperties.Видимость = Ложь;
		Элементы.СтраницаСтруктураХранения.Видимость = Ложь;
		Перейти ~Завершение;
	КонецЕсли;

	ЭтоПрочаяКоманда = (Найти(Параметры.FullName, ".Команда.") <> 0);

	Если Не ЭтоПрочаяКоманда И Найти(Параметры.FullName, "Подсистема.") <> 1 Тогда
		Если СтрЧислоВхождений(Параметры.FullName, ".") <> 1 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Элементы.СтраницаПраваДоступа.Видимость = вЕстьПраваАдминистратора();
	Если Элементы.СтраницаПраваДоступа.Видимость Тогда
		Элементы._AccessRightToObject.СписокВыбора.Очистить();

		пСписокПрав = _AdditionalVars.DescriptionOfAccessRights[?(ЭтоПрочаяКоманда, "ОбщаяКоманда", Лев(_FullName, СтрНайти(
			_FullName, ".") - 1))];
		Если пСписокПрав <> Неопределено Тогда
			пПравоДоступаПоУмолчанию = "";

			Для Каждого Элем Из Новый Структура(пСписокПрав) Цикл
				Элементы._AccessRightToObject.СписокВыбора.Добавить(Элем.Ключ);
				Если ПустаяСтрока(пПравоДоступаПоУмолчанию) Тогда
					пПравоДоступаПоУмолчанию = Элем.Ключ;
				КонецЕсли;
			КонецЦикла;

			_AccessRightToObject = пПравоДоступаПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	Если ЭтоПрочаяКоманда Тогда
		_ListFormName = "";
		вЗаполнитьСвойстваОбщейКоманды(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "Справочник.") = 1 Тогда
		вЗаполнитьСвойстваСправочника(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "Документ.") = 1 Тогда
		вЗаполнитьСвойстваДокумента(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "ЖурналДокументов.") = 1 Тогда
		вЗаполнитьСвойстваЖурналаДокументов(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "ПланВидовХарактеристик.") = 1 Тогда
		вЗаполнитьСвойстваПВХ(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "ПланВидовРасчета.") = 1 Тогда
		вЗаполнитьСвойстваПВР(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "ПланСчетов.") = 1 Тогда
		вЗаполнитьСвойстваПланаСчетов(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "РегистрСведений.") = 1 Тогда
		вЗаполнитьСвойстваРегистраСведений(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "РегистрНакопления.") = 1 Тогда
		вЗаполнитьСвойстваРегистраНакопления(Параметры.FullName);
		вЗаполнитьСраницуУправленияИтогами(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "РегистрБухгалтерии.") = 1 Тогда
		вЗаполнитьСвойстваРегистраБухгалтерии(Параметры.FullName);
		вЗаполнитьСраницуУправленияИтогами(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "РегистрРасчета.") = 1 Тогда
		вЗаполнитьСвойстваРегистраРасчета(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "БизнесПроцесс.") = 1 Тогда
		вЗаполнитьСвойстваБизнесПроцесса(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "Задача.") = 1 Тогда
		вЗаполнитьСвойстваЗадачи(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "ПланОбмена.") = 1 Тогда
		вЗаполнитьСвойстваПланаОбмена(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "Константа.") = 1 Тогда
		вЗаполнитьСвойстваКонстанты(Параметры.FullName);
		Элементы.PropertyTreeGroupkOpemListForm.Видимость = Ложь;
		Элементы.PropertyTreeGroupkOpemListFormAdditional.Видимость = Ложь;
	ИначеЕсли Найти(Параметры.FullName, "ПараметрСеанса.") = 1 Тогда
		вЗаполнитьСвойстваПараметрСеанса(Параметры.FullName);
		Элементы.PropertyTreeGroupkOpemListForm.Видимость = Ложь;
		Элементы.PropertyTreeGroupkOpemListFormAdditional.Видимость = Ложь;
	ИначеЕсли Найти(Параметры.FullName, "Перечисление.") = 1 Тогда
		Элементы.СтраницаПраваДоступа.Видимость = Ложь;
		_ListFormName = "";
		вЗаполнитьСвойстваПеречисления(Параметры.FullName);
		Элементы.СтраницаЗависимыеОбъекты.Видимость = Истина;
	ИначеЕсли Найти(Параметры.FullName, "ОбщийМодуль.") = 1 Тогда
		Элементы.СтраницаПраваДоступа.Видимость = Ложь;
		_ListFormName = "";
		вЗаполнитьСвойстваОбщегоМодуля(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "ОбщаяКоманда.") = 1 Тогда
		_ListFormName = "";
		вЗаполнитьСвойстваОбщейКоманды(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "Подсистема.") = 1 Тогда
		_ListFormName = "";
		вЗаполнитьСвойстваПодсистемы(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "ОпределяемыйТип.") = 1 Тогда
		Элементы.СтраницаПраваДоступа.Видимость = Ложь;
		_ListFormName = "";
		вЗаполнитьСвойстваОпределяемогоТипа(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "ПодпискаНаСобытие.") = 1 Тогда
		Элементы.СтраницаПраваДоступа.Видимость = Ложь;
		_ListFormName = "";
		вЗаполнитьСвойстваПодпискиНаСобытие(Параметры.FullName);
	ИначеЕсли Найти(Параметры.FullName, "Роль.") = 1 Тогда
		Если Не Элементы.СтраницаПраваДоступа.Видимость Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		_ListFormName = "";
		Элементы.PagesGroup.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ПраваДоступаДляРоли.Видимость = Истина;
		Элементы.ПраваДоступаКОбъекту_Роли.Видимость = Ложь;
		Элементы.PagesGroup.ТекущаяСтраница = Элементы.СтраницаПраваДоступа;
		Элементы.ObjectPage.Видимость = Ложь;
		Элементы.СтраницаСтруктураХранения.Видимость = Ложь;

		пСписокПрав =  "Чтение, Добавление, Изменение, Удаление, Просмотр, Редактирование, Использование, УправлениеИтогами, Проведение, ОтменаПроведения, Получение, Установка, Старт, Выполнение";
		Для Каждого Элем Из Новый Структура(пСписокПрав) Цикл
			Элементы._AccessRightToObject.СписокВыбора.Добавить(Элем.Ключ);
		КонецЦикла;

		_AccessRightToObject = "Чтение";
		Возврат;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Элементы.PropertyTreeGroup_OpenObject.Видимость = (_ПустаяСсылкаНаОбъект <> Неопределено);

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(Параметры.FullName);
	Если ОбъектМД <> Неопределено Тогда
		ДанныеСХ = ПолучитьСтруктуруХраненияБазыДанных(вЗначениеВМассив(ОбъектМД),
			Не _ShowStorageStructureIn1CTerms);
		Если ДанныеСХ = Неопределено Или ДанныеСХ.Количество() = 0 Тогда
			Элементы.СтраницаСтруктураХранения.Видимость = ложь
		Иначе
			вЗаполнитьРазделСтруктураХранения(ДанныеСХ);
		КонецЕсли;
	Иначе
		Элементы.СтраницаСтруктураХранения.Видимость = ложь
	КонецЕсли
	;

	~Завершение: Для Каждого УзелДЗ Из PropertyTree.ПолучитьЭлементы() Цикл
		УзелДЗ.ВидУзла = 1;
		
		//Если СтрНайти(УзелДЗ.StringType, "Перечисление.") <> 0 Тогда
		//	Прервать;
		//КонецЕсли;

		Для Каждого РазделДЗ Из УзелДЗ.ПолучитьЭлементы() Цикл
			РазделДЗ.ВидУзла = 2;
		КонецЦикла;
	КонецЦикла;

	вУстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура вУстановитьУсловноеОформление()
	ЭтаФорма.УсловноеОформление.Элементы.Очистить();

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Type("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("PropertyTree.ВидУзла");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы.PropertyTree.Шрифт, , , Истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("PropertyTreeName");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Type("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("PropertyTree.ВидУзла");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("PropertyTreeName");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Type("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("PropertyTree.Indexing");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = "";
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	//ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтыйЗолотистый);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("PropertyTree");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Type("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("_DependentObjects.ВидУзла");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 1;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(Элементы._DependentObjects.Шрифт, , , Истина));
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("_ЗависимыеОбъектыИмя");

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Type("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("_DependentObjects.ВидУзла");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 2;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
	ЭлементУО.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("_ЗависимыеОбъектыИмя");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого Элем Из PropertyTree.ПолучитьЭлементы() Цикл
		РазвернутьВсе = (Ложь Или Найти(Элем.StringType, "Конфигурация.") = 1 Или Найти(Элем.StringType, "Подсистема.")
			= 1 Или Найти(Элем.StringType, "ОбщийМодуль.") = 1 Или Найти(Элем.StringType, "ОбщаяКоманда.") = 1
			Или Найти(Элем.StringType, "ПодпискаНаСобытие.") = 1 Или Найти(Элем.StringType, "ЖурналДокументов.") = 1
			Или Найти(Элем.StringType, "ОпределяемыйТип.") = 1 Или Найти(Элем.StringType, ".Команда.") <> 0);
		Элементы.PropertyTree.Развернуть(Элем.ПолучитьИдентификатор(), РазвернутьВсе);
		Прервать;
	КонецЦикла;

	Если СтрНайти(_FullName, "Роль.") = 1 И Не ПустаяСтрока(_AccessRightToObject) Тогда
		_ПравоДоступаКОбъектуПриИзменении(Элементы._ПравоДоступаКОбъекту);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ExpandAllNodes(Команда)
	Если Элементы.PagesGroup.ТекущаяСтраница = Элементы.ObjectPage Тогда
		Для Каждого Элем Из PropertyTree.ПолучитьЭлементы() Цикл
			Элементы.PropertyTree.Развернуть(Элем.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	ИначеЕсли Элементы.PagesGroup.ТекущаяСтраница = Элементы.СтраницаЗависимыеОбъекты Тогда
		Для Каждого Элем Из _DependentObjects.ПолучитьЭлементы() Цикл
			Элементы._DependentObjects.Развернуть(Элем.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _CollapseAllNodes(Команда)
	Если Элементы.PagesGroup.ТекущаяСтраница = Элементы.ObjectPage Тогда
		Для Каждого УзелДЗ Из PropertyTree.ПолучитьЭлементы() Цикл
			Для Каждого Элем Из УзелДЗ.ПолучитьЭлементы() Цикл
				Элементы.PropertyTree.Свернуть(Элем.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Элементы.PagesGroup.ТекущаяСтраница = Элементы.СтраницаЗависимыеОбъекты Тогда
		Для Каждого УзелДЗ Из _DependentObjects.ПолучитьЭлементы() Цикл
			Для Каждого Элем Из УзелДЗ.ПолучитьЭлементы() Цикл
				Элементы._DependentObjects.Свернуть(Элем.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура kOpemListForm(Команда)
	СтрДЗ = PropertyTree.НайтиПоИдентификатору(0);
	Если СтрДЗ <> Неопределено И Не ПустаяСтрока(_ListFormName) Тогда
		Попытка
			ОткрытьФорму(СтрДЗ.StringType + _ListFormName);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура kOpemListFormAdditional(Команда)
	СтрДЗ = PropertyTree.НайтиПоИдентификатору(0);
	Если СтрДЗ <> Неопределено И Не ПустаяСтрока(_ListFormName) Тогда
		UT_CommonClient.ОpenDynamicList(СтрДЗ.StringType);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура kShowObjectProperties(Команда)
	ТекДанные = Элементы.PropertyTree.ТекущиеДанные;
	Если ТекДанные <> Неопределено И Не ПустаяСтрока(ТекДанные.ТипСтрокой) Тогда
		Массив = вСтрокуТипаВМассив(ТекДанные.ТипСтрокой);
		Если Массив.Количество() = 1 Тогда
			вПоказатьСвойстваОбъекта(Массив[0]);
		ИначеЕсли Массив.Количество() > 1 Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Массив);
			Список.СортироватьПоЗначению();
			Попытка
				Список.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("кПоказатьСвойстваОбъектаДалее", ЭтаФорма),
					"Выбор типа");
			Исключение
				ВыбранныйЭлемент = Неопределено;

				Список.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("кПоказатьСвойстваОбъектаЗавершение", ЭтаФорма),
					"Выбор типа");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура кПоказатьСвойстваОбъектаЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт

	ВыбранныйЭлемент = ВыбранныйЭлемент1;
	Если ВыбранныйЭлемент <> Неопределено Тогда
		кПоказатьСвойстваОбъектаДалее(ВыбранныйЭлемент, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура кПоказатьСвойстваОбъектаДалее(ВыбранныйЭлемент, ДопПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		вПоказатьСвойстваОбъекта(ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _OpenObject(Команда)
	СтрукПарам = Новый Структура;
	СтрукПарам.Вставить("мОбъектСсылка", _ПустаяСсылкаНаОбъект);
	ОткрытьФорму(PathToForms + "ФормаОбъекта", СтрукПарам, , ТекущаяДата());
КонецПроцедуры
&НаКлиенте
Процедура ДеревоСвойствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрДЗ = PropertyTree.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрДЗ.Ссылка <> Неопределено Тогда
		ПоказатьЗначение( , СтрДЗ.Ссылка);
	ИначеЕсли Не ПустаяСтрока(СтрДЗ.StringType) Тогда
		кПоказатьСвойстваОбъекта(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вПоказатьСвойстваОбъекта(FullName)
	Если Не ПустаяСтрока(PathToForms) Тогда
		Поз = СтрНайти(FullName, ".Команда.");
		Если Поз <> 0 Тогда
			ИмяТипа = Лев(FullName, Поз - 1);
		Иначе
			ИмяТипа = FullName;
		КонецЕсли;

		СтрукПараметры = Новый Структура("FullName, PathToForms, _StorageAddresses, DescriptionOfAccessRights", ИмяТипа,
			PathToForms, _StorageAddresses, _AdditionalVars.DescriptionOfAccessRights);
		СтрукПараметры.Вставить("ProcessingSettings", вСформироватьСтруктуруНастроекФормыСвойствОбъекта());
		ОткрытьФорму(PathToForms + "PropertiesForm", СтрукПараметры, , ИмяТипа, , , , РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вСтрокуТипаВМассив(ТипСтрокой)
	ПростыеТипы = "/Булево/Дата/ДатаВремя/Строка/Число/ХранилищеЗначения/УникальныйИдентификатор/";
	Результат = Новый Массив;

	Для Каждого Элем Из вСтрРазделить(ТипСтрокой, ",", Ложь) Цикл
		Если Найти(ПростыеТипы, Элем) = 0 Тогда
			Если Найти(Элем, "Строка(") = 0 И Найти(Элем, "Число(") = 0 Тогда
				Результат.Добавить(Элем);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции
&НаСервереБезКонтекста
Функция вСформироватьСтруктуруТипов()
	Результат = Новый Структура;

	Результат.Вставить("мТипСтрока", Type("Строка"));
	Результат.Вставить("мТипБулево", Type("Булево"));
	Результат.Вставить("мТипЧисло", Type("Число"));
	Результат.Вставить("мТипДата", Type("Дата"));
	Результат.Вставить("мТипСтруктура", Type("Структура"));
	Результат.Вставить("мТипХранилищеЗначения", Type("ХранилищеЗначения"));
	Результат.Вставить("мТипДвоичныеДанные", Type("ДвоичныеДанные"));
	Результат.Вставить("мТипДеревоЗначений", Type("ДеревоЗначений"));
	Результат.Вставить("мТипОбъектМетаданных", Type("ОбъектМетаданных"));
	Результат.Вставить("мТипУникальныйИдентификатор", Type("УникальныйИдентификатор"));

	Результат.Вставить("мТипNULL", Type("NULL"));
	Результат.Вставить("мТипНЕОПРЕДЕЛЕНО", Type("НЕОПРЕДЕЛЕНО"));
	Результат.Вставить("мТипОписаниеТипов", Type("ОписаниеТипов"));
	Результат.Вставить("мТипВидДвиженияБухгалтерии", Type("ВидДвиженияБухгалтерии"));
	Результат.Вставить("мТипВидДвиженияНакопления", Type("ВидДвиженияНакопления"));
	Результат.Вставить("мТипВидСчета", Type("ВидСчета"));
	Результат.Вставить("мТипФиксированныйМассив", Type("ФиксированныйМассив"));
	Результат.Вставить("мТипФиксированнаяСтруктура", Type("ФиксированнаяСтруктура"));
	Результат.Вставить("мТипФиксированноеСоответствие", Type("ФиксированноеСоответствие"));

	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция вИмяТипаСтрокой(СтрукТипы, Type, ОписаниеТипов)
	ИмяТипа = "";

	Если Type = СтрукТипы.мТипЧисло Тогда
		ИмяТипа = "Число";
		Если ОписаниеТипов.КвалификаторыЧисла.Разрядность <> 0 Тогда
			ИмяТипа = ИмяТипа + "(" + ОписаниеТипов.КвалификаторыЧисла.Разрядность + "."
				+ ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")";
		КонецЕсли;
	ИначеЕсли Type = СтрукТипы.мТипСтрока Тогда
		ИмяТипа = "Строка";
		Если ОписаниеТипов.КвалификаторыСтроки.Длина <> 0 Тогда
			ИмяТипа = ИмяТипа + "(" + ?(ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная,
				"П", "Ф") + ОписаниеТипов.КвалификаторыСтроки.Длина + ")";
		КонецЕсли;
	ИначеЕсли Type = СтрукТипы.мТипДата Тогда
		ИмяТипа = ?(ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время, "Время", ?(
			ОписаниеТипов.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата, "Дата", "ДатаВремя"));
	ИначеЕсли Type = СтрукТипы.мТипБулево Тогда
		ИмяТипа = "Булево";
	ИначеЕсли Type = СтрукТипы.мТипДвоичныеДанные Тогда
		ИмяТипа = "ДвоичныеДанные";
	ИначеЕсли Type = СтрукТипы.мТипХранилищеЗначения Тогда
		ИмяТипа = "ХранилищеЗначения";
	ИначеЕсли Type = СтрукТипы.мТипУникальныйИдентификатор Тогда
		ИмяТипа = "УникальныйИдентификатор";

	ИначеЕсли Type = СтрукТипы.мТипNULL Тогда
		ИмяТипа = "NULL";
	ИначеЕсли Type = СтрукТипы.мТипНЕОПРЕДЕЛЕНО Тогда
		ИмяТипа = "НЕОПРЕДЕЛЕНО";
	ИначеЕсли Type = СтрукТипы.мТипОписаниеТипов Тогда
		ИмяТипа = "ОписаниеТипов";
	ИначеЕсли Type = СтрукТипы.мТипВидДвиженияБухгалтерии Тогда
		ИмяТипа = "ВидДвиженияБухгалтерии";
	ИначеЕсли Type = СтрукТипы.мТипВидДвиженияНакопления Тогда
		ИмяТипа = "ВидДвиженияНакопления";
	ИначеЕсли Type = СтрукТипы.мТипВидСчета Тогда
		ИмяТипа = "ВидСчета";
	ИначеЕсли Type = СтрукТипы.мТипФиксированныйМассив Тогда
		ИмяТипа = "ФиксированныйМассив";
	ИначеЕсли Type = СтрукТипы.мТипФиксированнаяСтруктура Тогда
		ИмяТипа = "ФиксированнаяСтруктура";
	ИначеЕсли Type = СтрукТипы.мТипФиксированноеСоответствие Тогда
		ИмяТипа = "ФиксированноеСоответствие";

	Иначе
		ОбъектМД = Метаданные.НайтиПоТипу(Type);
		Если ОбъектМД <> Неопределено Тогда
			ИмяТипа = ОбъектМД.FullName();
		Иначе
			ИмяТипа = Строка(Type);
		КонецЕсли;
	КонецЕсли;

	Возврат ИмяТипа;
КонецФункции

&НаСервереБезКонтекста
Функция вОписаниеТиповВСтроку(ОписаниеТипов)
	Если ОписаниеТипов = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	СтрукТипы = вСформироватьСтруктуруТипов();

	Значение = "";
	Типы = ОписаниеТипов.Типы();
	Для Каждого Элем Из Типы Цикл
		ИмяТипа = вИмяТипаСтрокой(СтрукТипы, Элем, ОписаниеТипов);
		Если Не ПустаяСтрока(ИмяТипа) Тогда
			Значение = Значение + "," + ИмяТипа;
		КонецЕсли;
	КонецЦикла;

	Возврат Сред(Значение, 2);
КонецФункции
&НаСервере
Функция вСформироватьТаблицуСвойств()
	ТипСтрока = Новый ОписаниеТипов("Строка");

	ТабРезультат = Новый ТаблицаЗначений;
	ТабРезультат.Колонки.Добавить("Name", ТипСтрока);
	ТабРезультат.Колонки.Добавить("Indexing", ТипСтрока);
	ТабРезультат.Колонки.Добавить("Synonym", ТипСтрока);
	ТабРезультат.Колонки.Добавить("Comment", ТипСтрока);
	ТабРезультат.Колонки.Добавить("StringType", ТипСтрока);

	Возврат ТабРезультат;
КонецФункции

&НаСервере
Процедура вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств)
	РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
	РазделДЗ.Name = "Свойства";

	ТипОбъектМД = Type("ОбъектМетаданных");
	ТипОписаниеТипов = Type("ОписаниеТипов");

	Попытка
		// начиная с версии 8.3.8 (надо контролировать версию)
		пРасширениеКонфигурации = ОбъектМД.РасширениеКонфигурации();
		Если пРасширениеКонфигурации <> Неопределено Тогда
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			СтрДЗ.Name = "РасширениеКонфигурации";
			СтрДЗ.Synonym = пРасширениеКонфигурации.Name;
			СтрДЗ.StringType = "РасширениеКонфигурации";
			СтрДЗ.Comment = пРасширениеКонфигурации.Synonym;
		КонецЕсли;
	Исключение
	КонецПопытки;

	Струк = Новый Структура(ПереченьСвойств);
	ЗаполнитьЗначенияСвойств(Струк, ОбъектМД);
	Для Каждого Элем Из Струк Цикл
		СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Name = Элем.Ключ;
		СтрДЗ.Synonym = Элем.Значение;
		Если Элем.Значение <> Неопределено Тогда
			пТипЗнч = ТипЗнч(Элем.Значение);
			Если пТипЗнч = ТипОбъектМД Тогда
				СтрДЗ.StringType = Элем.Значение.FullName();
			ИначеЕсли пТипЗнч = ТипОписаниеТипов Тогда
				СтрДЗ.StringType = вОписаниеТиповВСтроку(Элем.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// начиная с версии 8.3.8 (надо контролировать версию)
	//Попытка
	//	Х = ОбъектМД.РасширениеКонфигурации();
	//	Если Х <> Неопределено Тогда
	//		СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
	//		СтрДЗ.Name = "РасширениеКонфигурации";
	//		СтрДЗ.Synonym = Х.Name;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСвойстовоИндексирование(Знач ОбъектМД)
	Струк = Новый Структура("Indexing");
	пСвойствоИндексирование = Метаданные.СвойстваОбъектов.Индексирование;

	ЗаполнитьЗначенияСвойств(Струк, ОбъектМД);
	Если Струк.Indexing = Неопределено Тогда
		Значение = "";
	ИначеЕсли Струк.Indexing = пСвойствоИндексирование.НеИндексировать Тогда
		Значение = "";
	Иначе
		Значение = Струк.Indexing;
	КонецЕсли;

	Возврат Значение;
КонецФункции

&НаСервере
Процедура вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, ИмяГруппы, Сортировать = Истина, ВыводитьКоличество = Ложь)
	Если ОбъектМД[ИмяГруппы].Количество() <> 0 Тогда
		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из ОбъектМД[ИмяГруппы] Цикл
			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Indexing = вПолучитьСвойстовоИндексирование(Элем);
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = вОписаниеТиповВСтроку(Элем.Type);
		КонецЦикла;

		Если Сортировать Тогда
			Таблица.Сортировать("Name");
		КонецЕсли;

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = ИмяГруппы;
		Если ВыводитьКоличество Тогда
			РазделДЗ.Name = РазделДЗ.Name + " (" + Таблица.Количество() + ")";
		КонецЕсли;

		Для Каждого Стр Из Таблица Цикл
			ЗаполнитьЗначенияСвойств(РазделДЗ.ПолучитьЭлементы().Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ)
	Если вПроверитьНаличиеСвойства(ОбъектМД, "Команды") И ОбъектМД.Команды.Количество() <> 0 Тогда
		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из ОбъектМД.Команды Цикл
			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = Элем.FullName();
		КонецЦикла;

		Таблица.Сортировать("Name");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Команды (" + Таблица.Количество() + ")";

		Для Каждого Стр Из Таблица Цикл
			ЗаполнитьЗначенияСвойств(РазделДЗ.ПолучитьЭлементы().Добавить(), Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ)
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Реквизиты", Истина, Истина);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ)
	Список = Новый СписокЗначений;
	Для Каждого Элем Из ОбъектМД.ТабличныеЧасти Цикл
		Список.Добавить(Элем.Имя);
	КонецЦикла;
	Список.СортироватьПоЗначению();

	Для Каждого ЭлемХ Из Список Цикл
		Элем = ОбъектМД.ТабличныеЧасти[ЭлемХ.Значение];
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "ТЧ." + Элем.Name;

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого ЭлемТЧ Из Элем.Реквизиты Цикл
			Стр = Таблица.Добавить();
			Стр.Name = ЭлемТЧ.Name;
			Стр.Synonym = ЭлемТЧ.Представление();
			Стр.Comment = ЭлемТЧ.Comment;
			Стр.StringType = вОписаниеТиповВСтроку(ЭлемТЧ.Type);
		КонецЦикла;
		Таблица.Сортировать("Name");

		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьТипыЗначенийХарактеристик(ОбъектМД, УзелДЗ)
	Массив = ОбъектМД.Type.Типы();

	Если Массив.Количество() <> 0 Тогда
		Таблица = вСформироватьТаблицуСвойств();
		Таблица.Колонки.Добавить("НПП", Новый ОписаниеТипов("Число"));

		СтрукТипы = вСформироватьСтруктуруТипов();

		Для Каждого Элем Из Массив Цикл
			ЭлемМД = Метаданные.НайтиПоТипу(Элем);

			Стр = Таблица.Добавить();
			Если ЭлемМД <> Неопределено Тогда
				Стр.Name = ЭлемМД.Name;
				Стр.Synonym = ЭлемМД.Представление();
				Стр.Comment = "";
				Стр.StringType = ЭлемМД.FullName();
			Иначе
				ИмяТипа = вИмяТипаСтрокой(СтрукТипы, Элем, ОбъектМД.Type);

				Стр.НПП = -1;
				Стр.Name = Элем;
				Стр.Synonym = Элем;
				Стр.Comment = "";
				Стр.StringType = ИмяТипа;
			КонецЕсли;
		КонецЦикла;

		Если ОбъектМД.ДополнительныеЗначенияХарактеристик <> Неопределено Тогда
			ЭлемМД = ОбъектМД.ДополнительныеЗначенияХарактеристик;

			Если Таблица.Найти(ЭлемМД.FullName(), "StringType") = Неопределено Тогда
				Стр = Таблица.Добавить();
				Стр.Name = ЭлемМД.Name;
				Стр.Synonym = ЭлемМД.Представление();
				Стр.Comment = "";
				Стр.StringType = ЭлемМД.FullName();
			КонецЕсли;
		КонецЕсли;

		Таблица.Сортировать("НПП, StringType");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "ТипыЗначенийХарактеристик (" + Таблица.Количество() + ")";

		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьПредопределенныеЭлементыОбъекта(ОбъектМД, УзелДЗ)
	Если Метаданные.Справочники.Содержит(ОбъектМД) Тогда
		Менеджер = Справочники;
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМД) Тогда
		Менеджер = ПланыВидовРасчета;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМД) Тогда
		Менеджер = ПланыВидовХарактеристик;
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМД) Тогда
		Менеджер = ПланыСчетов;
	Иначе
		Возврат;
	КонецЕсли;

	Менеджер = Менеджер[ОбъектМД.Name];

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка, Presentation КАК Наименование ИЗ " + ОбъектМД.FullName() + " ГДЕ Предопределенный";

	Попытка
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Исключение
		// при отсутствии прав доступа
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецПопытки;

	Если ТаблицаЗначений.Количество() <> 0 Тогда
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Предопределенные (" + ТаблицаЗначений.Количество() + ")";

		Для Каждого Элем Из ТаблицаЗначений Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			СтрДЗ.Name = Менеджер.ПолучитьИмяПредопределенного(Элем.Ссылка);
			СтрДЗ.Synonym = Элем.Наименование;
			СтрДЗ.Comment = "";
			СтрДЗ.StringType = "Ссылка";
			СтрДЗ.Ссылка = Элем.Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойствоКоллекцияОбъекта(ОбъектМД, УзелДЗ, ИмяКоллекции, Сортировать = Истина,
	ПолеСортировки = "Name")
	Если ОбъектМД[ИмяКоллекции].Количество() <> 0 Тогда
		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из ОбъектМД[ИмяКоллекции] Цикл
			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = Элем.FullName();
		КонецЦикла;

		Если Сортировать Тогда
			Таблица.Сортировать(ПолеСортировки);
		КонецЕсли;

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = ИмяКоллекции + " (" + Таблица.Количество() + ")";
		Для Каждого Элем Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьВладельцевОбъекта(ОбъектМД, УзелДЗ)
	вЗаполнитьСвойствоКоллекцияОбъекта(ОбъектМД, УзелДЗ, "Владельцы");
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьГрафыЖурнала(ОбъектМД, УзелДЗ)
	Если ОбъектМД.Графы.Количество() <> 0 Тогда
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Графы";
		Для Каждого Элем Из ОбъектМД.Графы Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			СтрДЗ.Name = Элем.Name;
			СтрДЗ.Synonym = Элем.Представление();
			СтрДЗ.Comment = Элем.Comment;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьДвиженияОбъекта(ОбъектМД, УзелДЗ)
	Если ОбъектМД.Движения.Количество() <> 0 Тогда

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из ОбъектМД.Движения Цикл
			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = Элем.FullName();
		КонецЦикла;
		Таблица.Сортировать("StringType");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Движения (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьИсточникиСобытия(ОбъектМД, УзелДЗ)
	МассивТипов = ОбъектМД.Источник.Типы();
	Если МассивТипов.Количество() <> 0 Тогда

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Type Из МассивТипов Цикл
			Элем = Метаданные.НайтиПоТипу(Type);

			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = Элем.FullName();
		КонецЦикла;
		Таблица.Сортировать("StringType");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Источники (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьПараметрыКоманды(ОбъектМД, УзелДЗ)
	МассивТипов = ОбъектМД.ТипПараметраКоманды.Типы();
	Если МассивТипов.Количество() <> 0 Тогда

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Type Из МассивТипов Цикл
			Элем = Метаданные.НайтиПоТипу(Type);

			Стр = Таблица.Добавить();
			Стр.Name = Элем.Name;
			Стр.Synonym = Элем.Представление();
			Стр.Comment = Элем.Comment;
			Стр.StringType = Элем.FullName();
		КонецЦикла;
		Таблица.Сортировать("StringType");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Параметры команды (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьРегистраторовОбъекта(ОбъектМД, УзелДЗ)
	ТабРезультат = вПолучитьТаблицуРегистраторов(ОбъектМД.FullName());
	Если ТабРезультат.Количество() <> 0 Тогда
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Регистраторы (" + ТабРезультат.Количество() + ")";
		Для Каждого Элем Из ТабРезультат Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ)
	Если _ShowEventSubscriptions Тогда
		ТабРезультат = вПолучитьТаблицуПодписок(ОбъектМД.FullName());
		Если ТабРезультат.Количество() <> 0 Тогда
			РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
			РазделДЗ.Name = "ПодпискиНаСобытия (" + ТабРезультат.Количество() + ")";
			Для Каждого Элем Из ТабРезультат Цикл
				СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				СтрДЗ.StringType = "ПодпискаНаСобытие." + Элем.Name;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ)
	Если _ShowJbjectsSubsytems Тогда
		ТабРезультат = вПолучитьТаблицуПодсистем(ОбъектМД.FullName());
		Если ТабРезультат.Количество() <> 0 Тогда
			РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
			РазделДЗ.Name = "Подсистемы (" + ТабРезультат.Количество() + ")";
			Для Каждого Элем Из ТабРезультат Цикл
				СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				СтрДЗ.StringType = Элем.FullName;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ)
	Если _ShowCommonObjectCommands Тогда
		ТабРезультат = вПолучитьТаблицуОбщихКоманд(ОбъектМД.FullName());
		Если ТабРезультат.Количество() <> 0 Тогда
			РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
			РазделДЗ.Name = "ОбщиеКоманды (" + ТабРезультат.Количество() + ")";
			Для Каждого Элем Из ТабРезультат Цикл
				СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				СтрДЗ.StringType = "ОбщаяКоманда." + Элем.Name;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ)
	Если _ShowExternalObjectCommands Тогда
		ТабРезультат = вПолучитьТаблицуЧужихКоманд(ОбъектМД.FullName());
		Если ТабРезультат.Количество() <> 0 Тогда
			РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
			РазделДЗ.Name = "ЧужиеКоманды (" + ТабРезультат.Количество() + ")";
			Для Каждого Элем Из ТабРезультат Цикл
				СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрДЗ, Элем);
				СтрДЗ.StringType = Элем.Name;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ)
	Если ОбъектМД.СтандартныеРеквизиты.Количество() <> 0 Тогда
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "СтандартныеРеквизиты";
		Для Каждого Элем Из ОбъектМД.СтандартныеРеквизиты Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			СтрДЗ.Name = Элем.Name;
			СтрДЗ.Synonym = Элем.Представление();
			СтрДЗ.Comment = Элем.Comment;
			//СтрДЗ.StringType = Элем.FullName();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСпецСвойствоОбъекта(ОбъектМД, УзелДЗ, ИмяСвойства)
	Если ОбъектМД[ИмяСвойства].Количество() <> 0 Тогда
		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = ИмяСвойства;
		Для Каждого Элем Из ОбъектМД[ИмяСвойства] Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			СтрДЗ.Name = Элем.Name;
			СтрДЗ.Synonym = Элем.Представление();
			СтрДЗ.Comment = Элем.Comment;
			СтрДЗ.StringType = Элем.FullName();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваКонфигурации()
	ОбъектМД = Метаданные;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = ОбъектМД.FullName();

	ПереченьСвойств = "
					  |АвторскиеПрава, АдресИнформацииОКонфигурации, АдресИнформацииОПоставщике, АдресКаталогаОбновлений,
					  |ВариантВстроенногоЯзыка, Версия, ВключатьСправкуВСодержание,
					  |ИспользоватьОбычныеФормыВУправляемомПриложении, ИспользоватьУправляемыеФормыВОбычномПриложении,
					  |ОсновнаяФормаВариантаОтчета, ОсновнаяФормаКонстант, ОсновнаяФормаНастроекДинамическогоСписка, ОсновнаяФормаНастроекОтчета, ОсновнаяФормаОтчета, ОсновнаяФормаПоиска,
					  |ОсновнойИнтерфейс, ОсновнойРежимЗапуска, ОсновнойЯзык,
					  |РежимАвтонумерацииОбъектов, РежимИспользованияМодальности, РежимИспользованияСинхронныхВызововРасширенийПлатформыИВнешнихКомпонент,
					  |РежимОсновногоОкнаКлиентскогоПриложения, РежимСовместимости, РежимСовместимостиИнтерфейса, РежимУправленияБлокировкойДанных";

	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваСправочника(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = Справочники[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Автонумерация, Иерархический, ВидИерархии, ГруппыСверху, ТипКода, ДлинаКода, ДлинаНаименования, КонтрольУникальности, СерииКодов, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьВладельцевОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПредопределенныеЭлементыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваДокумента(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = Документы[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Автонумерация, ДлинаНомера, ОперативноеПроведение, Проведение, КонтрольУникальности, ПериодичностьНомера, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьДвиженияОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваЖурналаДокументов(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьГрафыЖурнала(ОбъектМД, УзелДЗ);
	вЗаполнитьСвойствоКоллекцияОбъекта(ОбъектМД, УзелДЗ, "РегистрируемыеДокументы");
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПВХ(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = ПланыВидовХарактеристик[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Автонумерация, Иерархический, ГруппыСверху, ДлинаКода, ДлинаНаименования, КонтрольУникальности, СерииКодов, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТипыЗначенийХарактеристик(ОбъектМД, УзелДЗ);
	вЗаполнитьПредопределенныеЭлементыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПВР(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = ПланыВидовРасчета[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ДлинаКода, ДлинаНаименования, ТипКода, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПредопределенныеЭлементыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПланаСчетов(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = ПланыСчетов[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "АвтоПорядокПоКоду, ДлинаКода, ДлинаНаименования, ДлинаПорядка, КонтрольУникальности, МаскаКода, СерииКодов, ПоляБлокировкиДанных, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьСпецСвойствоОбъекта(ОбъектМД, УзелДЗ, "ПризнакиУчета");
	вЗаполнитьСпецСвойствоОбъекта(ОбъектМД, УзелДЗ, "ПризнакиУчетаСубконто");
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПредопределенныеЭлементыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваРегистраСведений(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ПериодичностьРегистраСведений, РежимЗаписи, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Измерения", Ложь);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Ресурсы", Истина);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Реквизиты", Истина);
	вЗаполнитьРегистраторовОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваРегистраНакопления(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ВидРегистра, РазрешитьРазделениеИтогов, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Измерения", Ложь);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Ресурсы", Истина);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Реквизиты", Истина);
	вЗаполнитьРегистраторовОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваРегистраБухгалтерии(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Корреспонденция, ПланСчетов, РазрешитьРазделениеИтогов, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Измерения", Ложь);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Ресурсы", Истина);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Реквизиты", Истина);
	вЗаполнитьРегистраторовОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваРегистраРасчета(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "БазовыйПериод, ПериодДействия, Периодичность, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Измерения", Ложь);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Ресурсы", Истина);
	вЗаполнитьГруппуСвойствОбъекта(ОбъектМД, УзелДЗ, "Реквизиты", Истина);
	вЗаполнитьРегистраторовОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваБизнесПроцесса(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = БизнесПроцессы[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Автонумерация, ДлинаНомера, Задача, ТипНомера, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваЗадачи(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = Задачи[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Автонумерация, Адресация, ДлинаНомера, ДлинаНаименования, КонтрольУникальности, ТипНомера, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПланаОбмена(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	_ПустаяСсылкаНаОбъект = ПланыОбмена[ОбъектМД.Name].ПустаяСсылка();

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ДлинаКода, ДлинаНаименования, ДопустимаяДлинаКода, РежимУправленияБлокировкойДанных";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСтандартныеРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьРеквизитыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьТабличныеЧастиОбъекта(ОбъектМД, УзелДЗ);

	Если ОбъектМД.Состав.Количество() <> 0 Тогда
		СтрукТипы = вСформироватьСтруктуруТипов();

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из ОбъектМД.Состав Цикл
			Стр = Таблица.Добавить();
			//Стр.Name = Элем.Метаданные.Name;
			//Стр.Name = Элем.Метаданные.Name + " (" + Элем.АвтоРегистрация + ")";
			Стр.Name = "АвтоРегистрация: " + Элем.АвтоРегистрация;
			Стр.Synonym = Элем.Метаданные.Представление();
			Стр.Comment = Элем.Метаданные.Comment;
			Стр.StringType = Элем.Метаданные.FullName();
		КонецЦикла;
		Таблица.Сортировать("StringType");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Состав (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;

	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПеречисления(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	Для Каждого Элем Из ОбъектМД.ЗначенияПеречисления Цикл
		СтрДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		СтрДЗ.Name = Элем.Name;
		СтрДЗ.Synonym = Элем.Представление();
		СтрДЗ.Comment = Элем.Comment;
	КонецЦикла;

	вЗаполнитьКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваОбщегоМодуля(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ВнешнееСоединение, ВызовСервера, Глобальный, КлиентОбычноеПриложение, КлиентУправляемоеПриложение, ПовторноеИспользованиеВозвращаемыхЗначений, Привилегированный, Сервер";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваКонстанты(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	МассивТипов = ОбъектМД.Type.Типы();
	Если МассивТипов.Количество() <> 0 Тогда
		СтрукТипы = вСформироватьСтруктуруТипов();

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из МассивТипов Цикл
			Стр = Таблица.Добавить();
			Стр.Name = вИмяТипаСтрокой(СтрукТипы, Элем, ОбъектМД.Type);
			Стр.Synonym = Элем;
			Стр.StringType = Стр.Name;
		КонецЦикла;
		Таблица.Сортировать("Name");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Типы (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;

	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
	
	// проверка прав
	Если Не ПравоДоступа("Чтение", ОбъектМД) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ValuePage.Видимость = Истина;
	Элементы._ConstantValue.ОграничениеТипа = ОбъектМД.Type;
	Элементы._TextConstantValue.ТолькоПросмотр = Не ОбъектМД.Type.СодержитТип(Type("Строка"));
	Элементы._UseTextWhenWritingConstants.ТолькоПросмотр = Элементы._TextConstantValue.ТолькоПросмотр;

	пСтрук = вПрочитатьКонстанту(_FullName);
	Если пСтрук.Отказ Тогда
		_TypeOfConstantValue = пСтрук.ПричинаОтказа;
	Иначе
		_ConstantValue = пСтрук.Значение;
		_TypeOfConstantValue = пСтрук.ТипЗначения;
		Если ТипЗнч(пСтрук.Значение) = Type("Строка") Тогда
			_TextConstantValue = пСтрук.Значение;
		Иначе
			_TextConstantValue = пСтрук.Текст;
		КонецЕсли;
	КонецЕсли;

	Если пСтрук.ТолькоПросмотр Тогда
		Элементы._TextConstantValue.ТолькоПросмотр = Истина;
		Элементы._ConstantValue.ТолькоПросмотр = Истина;
		Элементы._RecordConstant.Доступность = Ложь;
	КонецЕсли;

	Элементы._UseTextWhenWritingConstants.ТолькоПросмотр = Элементы._TextConstantValue.ТолькоПросмотр;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПараметрСеанса(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	МассивТипов = ОбъектМД.Type.Типы();
	Если МассивТипов.Количество() <> 0 Тогда
		СтрукТипы = вСформироватьСтруктуруТипов();

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из МассивТипов Цикл
			Стр = Таблица.Добавить();
			Стр.Name = вИмяТипаСтрокой(СтрукТипы, Элем, ОбъектМД.Type);
			Стр.Synonym = Элем;
			Стр.StringType = Стр.Name;
		КонецЦикла;
		Таблица.Сортировать("Name");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Типы (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;

	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
	
	// проверка прав
	Если Не ПравоДоступа("Получение", ОбъектМД) Тогда
		Возврат;
	КонецЕсли;

	Элементы.ValuePage.Видимость = Истина;
	Элементы._ConstantValue.ОграничениеТипа = ОбъектМД.Type;
	Элементы._TextConstantValue.ТолькоПросмотр = Не ОбъектМД.Type.СодержитТип(Type("Строка"));
	Элементы._UseTextWhenWritingConstants.ТолькоПросмотр = Элементы._TextConstantValue.ТолькоПросмотр;

	пСтрук = вПрочитатьКонстанту(_FullName);
	Если пСтрук.Отказ Тогда
		_TypeOfConstantValue = пСтрук.ПричинаОтказа;
	Иначе
		_ConstantValue = пСтрук.Значение;
		_TypeOfConstantValue = пСтрук.ТипЗначения;
		Если ТипЗнч(пСтрук.Значение) = Type("Строка") Тогда
			_TextConstantValue = пСтрук.Значение;
		Иначе
			_TextConstantValue = пСтрук.Текст;
		КонецЕсли;
	КонецЕсли;

	Если пСтрук.ТолькоПросмотр Тогда
		Элементы._TextConstantValue.ТолькоПросмотр = Истина;
		Элементы._ConstantValue.ТолькоПросмотр = Истина;
		Элементы._RecordConstant.Доступность = Ложь;
	КонецЕсли;

	Элементы._UseTextWhenWritingConstants.ТолькоПросмотр = Элементы._TextConstantValue.ТолькоПросмотр;

	Элементы._ConstantValue.Заголовок = "Значение параметра";
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваОбщейКоманды(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Группа, ИзменяетДанные, Отображение, Подсказка, РежимИспользованияПараметра";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьПараметрыКоманды(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПодпискиНаСобытие(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "Обработчик, Событие";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьИсточникиСобытия(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваПодсистемы(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	ПереченьСвойств = "ВключатьВКомандныйИнтерфейс, Пояснение";
	вЗаполнитьСвойстваОбъекта(ОбъектМД, УзелДЗ, ПереченьСвойств);
	вЗаполнитьСвойствоКоллекцияОбъекта(ОбъектМД, УзелДЗ, "Подсистемы");
	вЗаполнитьСвойствоКоллекцияОбъекта(ОбъектМД, УзелДЗ, "Состав", Истина, "StringType");
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСвойстваОпределяемогоТипа(FullName)
	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УзелДЗ = PropertyTree.ПолучитьЭлементы().Добавить();
	УзелДЗ.Name = ОбъектМД.Name;
	УзелДЗ.Synonym = ОбъектМД.Представление();
	УзелДЗ.Comment = ОбъектМД.Comment;
	УзелДЗ.StringType = FullName;

	МассивТипов = ОбъектМД.Type.Типы();
	Если МассивТипов.Количество() <> 0 Тогда
		СтрукТипы = вСформироватьСтруктуруТипов();

		Таблица = вСформироватьТаблицуСвойств();
		Для Каждого Элем Из МассивТипов Цикл
			Стр = Таблица.Добавить();
			Стр.Name = вИмяТипаСтрокой(СтрукТипы, Элем, ОбъектМД.Type);
			Стр.Synonym = Элем;
			Стр.StringType = Стр.Name;
		КонецЦикла;
		Таблица.Сортировать("Name");

		РазделДЗ = УзелДЗ.ПолучитьЭлементы().Добавить();
		РазделДЗ.Name = "Типы (" + Таблица.Количество() + ")";
		Для Каждого Стр Из Таблица Цикл
			СтрДЗ = РазделДЗ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрДЗ, Стр);
		КонецЦикла;
	КонецЕсли;

	вЗаполнитьОбщиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьЧужиеКомандыОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодпискиОбъекта(ОбъектМД, УзелДЗ);
	вЗаполнитьПодсистемыОбъекта(ОбъектМД, УзелДЗ);
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьСраницуУправленияИтогами(FullName)
	Попытка
		пСтрук = вПолучитьСвойстваРегистраДляУправленияИтогами(FullName);
	Исключение
		Возврат;
	КонецПопытки;

	Если Не пСтрук.ЕстьДанные Тогда
		Возврат;
	КонецЕсли;

	Элементы.СтраницаУправлениеИтогами.Видимость = Истина;

	_AggregateMode = пСтрук.РежимАгрегатов;
	_UseAggregates = пСтрук.ИспользованиеАгрегатов;
	_UseTotals = пСтрук.ИспользованиеИтогов;
	_UseCurrentTotals = пСтрук.ИспользованиеТекущихИтогов;
	_DividingTotalsMode = пСтрук.РежимРазделенияИтогов;
	_MinimumPeriodOfCalculatedTotals = пСтрук.МинимальныйПериодРассчитанныхИтогов;
	_MaximumPeriodOfCalculatedTotals = пСтрук.МаксимальныйПериодРассчитанныхИтогов;

	Элементы._AggregateMode.Видимость = Не пСтрук.ЭтоРегистрБУ;
	Элементы._AggregateMode.Доступность = пСтрук.ЕстьРежимАгрегатов;
	Элементы._UseAggregates.Видимость = Не пСтрук.ЭтоРегистрБУ;
	Элементы._UseAggregates.Доступность = пСтрук.ЕстьРежимАгрегатов И _AggregateMode;

	Элементы._UseTotals.Доступность = Не _AggregateMode;
	Элементы._UseCurrentTotals.Доступность = пСтрук.ЕстьТекущиеИтоги И Не _AggregateMode;

	Элементы._RecalculateTotals.Доступность = Не _AggregateMode;
	Элементы._ПересчитатьТекущиеИтоги.Доступность = пСтрук.ЕстьТекущиеИтоги И Не _AggregateMode;

	Элементы.ГруппаПересчетИтоговЗаПериод.Доступность = Не _AggregateMode;
	Элементы.ГруппаПериодРассчитанныхИтогов.Доступность = Не пСтрук.ОборотныйРегистр И Не _AggregateMode;

КонецПроцедуры

&НаСервереБезКонтекста
Функция вПолучитьСвойстваРегистраДляУправленияИтогами(FullName)
	пСтрук = Новый Структура("ЕстьДанные, ЭтоРегистрБУ, ОборотныйРегистр", Ложь, Ложь, Ложь);

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат пСтрук;
	КонецЕсли;

	пСтрук.ЕстьДанные = Истина;
	пСтрук.Вставить("Name", ОбъектМД.Имя);

	пПустаяДата = '00010101';
	пСтрук.Вставить("Дата1", пПустаяДата);
	пСтрук.Вставить("Дата2", пПустаяДата);

	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		пСтрук.ЭтоРегистрБУ = Истина;
		пСтрук.Вставить("ЕстьПериодИтогов", Истина);
		пСтрук.Вставить("ЕстьРежимАгрегатов", Ложь);
		пСтрук.Вставить("ЕстьТекущиеИтоги", Истина);
		пМенеджер = РегистрыБухгалтерии[пСтрук.Name];
	Иначе
		пСтрук.ОборотныйРегистр = (ОбъектМД.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты);
		пСтрук.Вставить("ЕстьПериодИтогов", Не пСтрук.ОборотныйРегистр);
		пСтрук.Вставить("ЕстьРежимАгрегатов", пСтрук.ОборотныйРегистр);
		пСтрук.Вставить("ЕстьТекущиеИтоги", Не пСтрук.ОборотныйРегистр);
		пМенеджер = РегистрыНакопления[пСтрук.Name];
	КонецЕсли;

	Если пСтрук.ЕстьПериодИтогов Тогда
		пСтрук.Вставить("Дата1", пМенеджер.ПолучитьМинимальныйПериодРассчитанныхИтогов());
		пСтрук.Вставить("Дата2", пМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов());
	КонецЕсли;

	пСтрук.Вставить("РежимАгрегатов", ?(пСтрук.ЕстьРежимАгрегатов, пМенеджер.ПолучитьРежимАгрегатов(), Ложь));
	пСтрук.Вставить("ИспользованиеАгрегатов", ?(пСтрук.ЕстьРежимАгрегатов, пМенеджер.ПолучитьИспользованиеАгрегатов(),
		Ложь));
	пСтрук.Вставить("ИспользованиеТекущихИтогов", ?(пСтрук.ЕстьТекущиеИтоги,
		пМенеджер.ПолучитьИспользованиеТекущихИтогов(), Ложь));
	пСтрук.Вставить("ИспользованиеИтогов", пМенеджер.ПолучитьИспользованиеИтогов());
	пСтрук.Вставить("РежимРазделенияИтогов", пМенеджер.ПолучитьРежимРазделенияИтогов());
	пСтрук.Вставить("МинимальныйПериодРассчитанныхИтогов", ?(пСтрук.ОборотныйРегистр, пПустаяДата,
		пМенеджер.ПолучитьМинимальныйПериодРассчитанныхИтогов()));
	пСтрук.Вставить("МаксимальныйПериодРассчитанныхИтогов", ?(пСтрук.ОборотныйРегистр, пПустаяДата,
		пМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов()));

	Возврат пСтрук;
КонецФункции



// структура хранения

&НаКлиенте
Процедура _ПоказыватьСтруктуруХраненияВТерминах1СПриИзменении(Элемент)
	_SXIndexes.Очистить();
	_SXFielsd.Очистить();
	_SXIndexFields.Очистить();
	_SXTable.Очистить();

	вЗаполнитьРазделСтруктураХранения();
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьРазделСтруктураХранения(Знач ДанныеСХ = Неопределено)
	Если ДанныеСХ = Неопределено Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(_FullName);
		Если ОбъектМД <> Неопределено Тогда
			ДанныеСХ = ПолучитьСтруктуруХраненияБазыДанных(вЗначениеВМассив(ОбъектМД),
				Не _ShowStorageStructureIn1CTerms);
			Если ДанныеСХ = Неопределено Или ДанныеСХ.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НомерХ = 0;
	НомерХХ = 0;

	Для Каждого Стр Из ДанныеСХ Цикл
		НомерХ = НомерХ + 1;
		TableNumber = "(" + НомерХ + ")";

		НС = _SXTable.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		НС.TableNumber = TableNumber;
		Если ПустаяСтрока(НС.TableName) Тогда
			НС.TableName = _FullName + "(" + Стр.Purpose + ")";
		КонецЕсли;

		Для Каждого СтрХ Из Стр.Поля Цикл
			НС = _SXFielsd.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрХ);
			НС.StorageTableName = Стр.StorageTableName;
			НС.TableNumber = TableNumber;
		КонецЦикла;
		Для Каждого СтрХ Из Стр.Индексы Цикл
			НомерХХ = НомерХХ + 1;
			НомерИндекса = "(" + НомерХХ + ")";

			НС = _SXIndexes.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрХ);
			НС.StorageTableName = Стр.StorageTableName;
			НС.TableNumber = TableNumber;
			НС.НомерИндекса = НомерИндекса;

			Для Каждого СтрХХ Из СтрХ.Поля Цикл
				НС = _SXIndexFields.Добавить();
				ЗаполнитьЗначенияСвойств(НС, СтрХХ);
				НС.НомерИндекса = НомерИндекса;
			КонецЦикла;
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура _СХТаблицыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Элементы._SXFielsd.ОтборСтрок = Новый ФиксированнаяСтруктура("TableNumber", ТекДанные.TableNumber);
		Элементы._SXIndexes.ОтборСтрок = Новый ФиксированнаяСтруктура("TableNumber", ТекДанные.TableNumber);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _СХИндексыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Элементы._SXIndexFields.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерИндекса", ТекДанные.НомерИндекса);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _UpdateNumberOfObjects(Команда)
	Если Не вЕстьПраваАдминистратора() Тогда
		ПоказатьПредупреждение( , "Нет прав на выполнение операции!", 20);
		Возврат;
	КонецЕсли;

	пТекст = ?(_FullName = "Конфигурация", "Нумерация всех объектов будет обновлена. Продолжить?",
		"Нумерация обекта будет обновлена. Продолжить?");
	ПоказатьВопрос(Новый ОписаниеОповещения("вОбновитьНумерациюОбъектовОтвет", ЭтаФорма), пТекст,
		РежимДиалогаВопрос.ДаНетОтмена, 20);
КонецПроцедуры

&НаКлиенте
Процедура вОбновитьНумерациюОбъектовОтвет(РезультатВопроса, ДопПарам = Неопределено) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вОбновитьНумерациюОбъектов(_FullName);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вОбновитьНумерациюОбъектов(Знач FullName)
	Если FullName = "Конфигурация" Тогда
		Попытка
			ОбновитьНумерациюОбъектов();
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

	ИначеЕсли СтрНайти(FullName, ".") <> 0 Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);

		Если ОбъектМД <> Неопределено Тогда
			Попытка
				ОбновитьНумерациюОбъектов(ОбъектМД);
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции


// управление итогами
&НаКлиенте
Процедура _UpdateTotalsManagement(Команда)
	вЗаполнитьСраницуУправленияИтогами(_FullName);
КонецПроцедуры

&НаКлиенте
Процедура _RecalculateTotals(Команда)
	вПоказатьВопрос("вОбработатьКомандуУправленияИтогами", "Будет выполнен полный пересчет итогов. Продолжить?",
		"ПересчитатьИтоги");
КонецПроцедуры

&НаКлиенте
Процедура _RecalculateCurrentTotals(Команда)
	вПоказатьВопрос("вОбработатьКомандуУправленияИтогами", "Текущие итоги будут пересчитаны. Продолжить?",
		"ПересчитатьТекущиеИтоги");
КонецПроцедуры

&НаКлиенте
Процедура _RecalculateTotalsForThePeriod(Команда)
	вПоказатьВопрос("вОбработатьКомандуУправленияИтогами", "Будут пересчитаны итоги за заданный период. Продолжить?",
		"ПересчитатьИтогиЗаПериод");
КонецПроцедуры

&НаКлиенте
Процедура _InstallPriodOfCalculatedTotals(Команда)
	пИмя = ЭтаФорма.ТекущийЭлемент.Name;
	Если Прав(пИмя, 1) = "1" Тогда
		вПоказатьВопрос("вОбработатьКомандуУправленияИтогами",
			"Будет изменен минимальный период рассчитанных итогов. Продолжить?",
			"УстановитьМинимальныйПериодРассчитанныхИтогов");
	ИначеЕсли Прав(пИмя, 1) = "2" Тогда
		вПоказатьВопрос("вОбработатьКомандуУправленияИтогами",
			"Будет изменен максимальный период рассчитанных итогов. Продолжить?",
			"УстановитьМаксимальныйПериодРассчитанныхИтогов");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьКомандуУправленияИтогами(РезультатВопроса, ИмяКоманды) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		пСтрук = вПолучитьНовыеНастройкиУправленияИтогами();
		пСтрук.Вставить("ИмяКоманды", ИмяКоманды);

		пРезультат = вВыполнитКомандуУправленияИтогами(_FullName, ИмяКоманды, пСтрук);
		_ОбновитьУправлениеИтогами(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция вПолучитьНовыеНастройкиУправленияИтогами()
	пСтрук = Новый Структура;
	пСтрук.Вставить("ПериодПересчетаИтогов", _PeriodRecalculationTotals);
	пСтрук.Вставить("МинимальныйПериодРассчитанныхИтогов", _MinimumPeriodOfCalculatedTotals);
	пСтрук.Вставить("МаксимальныйПериодРассчитанныхИтогов", _MaximumPeriodOfCalculatedTotals);

	Возврат пСтрук;
КонецФункции

&НаКлиенте
Процедура СвойствоРегистраПриИзменении(Элемент)
	вПоказатьВопрос("вОбработатьИзменениеСвойстваРегистра", "Свойство регистра будет изменено. Продолжить?",
		Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура вОбработатьИзменениеСвойстваРегистра(РезультатВопроса, ИмяСвойства) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		вИзменитьСвойствоРегистра(_FullName, Сред(ИмяСвойства, 2), ЭтаФорма[ИмяСвойства]);
		_ОбновитьУправлениеИтогами(Неопределено);
	Иначе
		ЭтаФорма[ИмяСвойства] = Не ЭтаФорма[ИмяСвойства];
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция вВыполнитКомандуУправленияИтогами(Знач FullName, Знач ИмяКоманды, Знач пСтрукНастройки)
	Если Не вЕстьПраваАдминистратора() Тогда
		Сообщить("Нет прав на выполнение операции!");
		Возврат Ложь;
	КонецЕсли;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		пМенеджер = РегистрыБухгалтерии[ОбъектМД.Name];
	Иначе
		пМенеджер = РегистрыНакопления[ОбъектМД.Name];
	КонецЕсли;

	Попытка
		Если ИмяКоманды = "ПересчитатьИтоги" Тогда
			пМенеджер.ПересчитатьИтоги();
		ИначеЕсли ИмяКоманды = "ПересчитатьТекущиеИтоги" Тогда
			пМенеджер.ПересчитатьТекущиеИтоги();
		ИначеЕсли ИмяКоманды = "ПересчитатьИтогиЗаПериод" Тогда
			Дата1 = пСтрукНастройки.ПериодПересчетаИтогов.ДатаНачала;
			Дата2 = пСтрукНастройки.ПериодПересчетаИтогов.ДатаОкончания;
			пМенеджер.ПересчитатьИтогиЗаПериод(Дата1, Дата2);
		ИначеЕсли ИмяКоманды = "УстановитьМинимальныйПериодРассчитанныхИтогов" Тогда
			пМенеджер.УстановитьМинимальныйПериодРассчитанныхИтогов(пСтрукНастройки.МинимальныйПериодРассчитанныхИтогов);
		ИначеЕсли ИмяКоманды = "УстановитьМаксимальныйПериодРассчитанныхИтогов" Тогда
			пМенеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(
				пСтрукНастройки.МаксимальныйПериодРассчитанныхИтогов);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция вИзменитьСвойствоРегистра(Знач FullName, Знач ИмяСвойства, Знач пЗначение)
	Если Не вЕстьПраваАдминистратора() Тогда
		Сообщить("Нет прав на выполнение операции!");
		Возврат Ложь;
	КонецЕсли;

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если ОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		пМенеджер = РегистрыБухгалтерии[ОбъектМД.Name];
	Иначе
		пМенеджер = РегистрыНакопления[ОбъектМД.Name];
	КонецЕсли;

	Попытка
		Если ИмяСвойства = "РежимАгрегатов" Тогда
			пМенеджер.УстановитьРежимАгрегатов(пЗначение);
		ИначеЕсли ИмяСвойства = "ИспользованиеАгрегатов" Тогда
			пМенеджер.УстановитьИспользованиеАгрегатов(пЗначение);
		ИначеЕсли ИмяСвойства = "ИспользованиеИтогов" Тогда
			пМенеджер.УстановитьИспользованиеИтогов(пЗначение);
		ИначеЕсли ИмяСвойства = "ИспользованиеТекущихИтогов" Тогда
			пМенеджер.УстановитьИспользованиеТекущихИтогов(пЗначение);
		ИначеЕсли ИмяСвойства = "РежимРазделенияИтогов" Тогда
			пМенеджер.УстановитьРежимРазделенияИтогов(пЗначение);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции


// права доступа
&НаКлиенте
Процедура _ДоступныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	_ОткрытьОбъектПравДоступа(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _FullInAccessRights(Команда)
	пЭтоРоль = (СтрНайти(_FullName, "Роль.") = 1);

	UsersWithAccessTable.Очистить();

	Если пЭтоРоль Тогда
		_AvailableObjects.Очистить();

		Если ПустаяСтрока(_AccessRightToObject) Тогда
			Возврат;
		КонецЕсли;

		пСтрукРезультат = вПолучитьДоступныеОбъектыДляРоли(_FullName, _AccessRightToObject,
			_AdditionalVars.DescriptionOfAccessRights);
		Если пСтрукРезультат.ЕстьДанные Тогда
			Для Каждого Элем Из пСтрукРезультат.ДоступныеОбъекты Цикл
				ЗаполнитьЗначенияСвойств(_AvailableObjects.Добавить(), Элем);
			КонецЦикла;
			_AvailableObjects.Сортировать("Kind, FullName");

			Для Каждого Элем Из пСтрукРезультат.Пользователи Цикл
				ЗаполнитьЗначенияСвойств(UsersWithAccessTable.Добавить(), Элем);
			КонецЦикла;
			UsersWithAccessTable.Сортировать("Name");
		КонецЕсли;

	Иначе
		RolesWithAccessTable.Очистить();

		Если ПустаяСтрока(_AccessRightToObject) Тогда
			Возврат;
		КонецЕсли;

		пСтрукРезультат = вПолучитьПраваДоступаКОбъекту(_AccessRightToObject, _FullName);
		Если пСтрукРезультат.ЕстьДанные Тогда
			Для Каждого Элем Из пСтрукРезультат.Роли Цикл
				ЗаполнитьЗначенияСвойств(RolesWithAccessTable.Добавить(), Элем);
			КонецЦикла;

			Для Каждого Элем Из пСтрукРезультат.Пользователи Цикл
				ЗаполнитьЗначенияСвойств(UsersWithAccessTable.Добавить(), Элем);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ПравоДоступаКОбъектуПриИзменении(Элемент)
	_ЗаполнитьПраваДоступа(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТабРолиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	_ОткрытьОбъектПравДоступа(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТабПользователиСДоступомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	_ОткрытьОбъектПравДоступа(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура _OpenAccessRightsObject(Команда)
	пИмяСтраницы = Элементы.ПраваДоступаКОбъеткту.ТекущаяСтраница.Name;

	Если пИмяСтраницы = "ПраваДоступаКОбъекту_Роли" Тогда
		ТекДанные = Элементы.RolesWithAccessTable.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			вПоказатьСвойстваОбъекта("Роль." + ТекДанные.Name);
		КонецЕсли;

	ИначеЕсли пИмяСтраницы = "ПраваДоступаКОбъеткту_Пользователи" Тогда
		ТекДанные = Элементы.UsersWithAccessTable.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			пИдентификаторПользователя = вПолучитьИдентификаторПользователя(ТекДанные.Имя);

			Если Не ПустаяСтрока(пИдентификаторПользователя) Тогда
				пСтрук = Новый Структура("РежимРаботы, ИдентификаторПользователяИБ", 0, пИдентификаторПользователя);
				ОткрытьФорму(PathToForms + "UserForm", пСтрук, , , , , ,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли пИмяСтраницы = "ПраваДоступаДляРоли" Тогда
		ТекДанные = Элементы._AvailableObjects.ТекущиеДанные;
		Если ТекДанные <> Неопределено И Не ПустаяСтрока(ТекДанные.FullName) Тогда
			вПоказатьСвойстваОбъекта(ТекДанные.FullName);
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры
&НаСервереБезКонтекста
Функция вПолучитьИдентификаторПользователя(Знач Имя)
	пПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);

	Возврат ?(пПользователь = Неопределено, "", Строка(пПользователь.УникальныйИдентификатор));
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьОписаниеОграниченийДляПараметровДоступа()
	пОбъектыСОгрничением = Новый Соответствие;
	пОбъектыСОгрничением.Вставить("ПланОбмена", "Ссылка");
	пОбъектыСОгрничением.Вставить("Справочник", "Ссылка");
	пОбъектыСОгрничением.Вставить("Документ", "Ссылка");
	пОбъектыСОгрничением.Вставить("ЖурналДокументов", "Ссылка");
	пОбъектыСОгрничением.Вставить("ПланВидовХарактеристик", "Ссылка");
	пОбъектыСОгрничением.Вставить("ПланСчетов", "Ссылка");
	пОбъектыСОгрничением.Вставить("ПланВидовРасчета", "Ссылка");
	пОбъектыСОгрничением.Вставить("РегистрСведений", Неопределено);
	пОбъектыСОгрничением.Вставить("РегистрНакопления", "Регистратор");
	пОбъектыСОгрничением.Вставить("РегистрБухгалтерии", "Регистратор");
	пОбъектыСОгрничением.Вставить("РегистрРасчета", "Регистратор");
	пОбъектыСОгрничением.Вставить("БизнесПроцесс", "Ссылка");
	пОбъектыСОгрничением.Вставить("Задача", "Ссылка");

	Возврат пОбъектыСОгрничением;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьТаблицуРолиИПользователи()
	__ТабРолиИПользователи = Новый ТаблицаЗначений;
	__ТабРолиИПользователи.Колонки.Добавить("ИмяР", Новый ОписаниеТипов("Строка"));
	__ТабРолиИПользователи.Колонки.Добавить("ИмяП", Новый ОписаниеТипов("Строка"));
	__ТабРолиИПользователи.Колонки.Добавить("ПолноеИмяП", Новый ОписаниеТипов("Строка"));

	Для Каждого П Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Для Каждого Р Из П.Роли Цикл
			НС = __ТабРолиИПользователи.Добавить();
			НС.ИмяР = Р.Name;
			НС.ИмяП = П.Name;
			НС.ПолноеИмяП = П.FullName;
		КонецЦикла;
	КонецЦикла;

	__ТабРолиИПользователи.Индексы.Добавить("ИмяР");
	__ТабРолиИПользователи.Индексы.Добавить("ИмяП");

	Возврат __ТабРолиИПользователи;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьДоступныеОбъектыДляРоли(Знач пРоль, Знач пПраво, Знач DescriptionOfAccessRights)
	пРезультат = Новый Структура("ЕстьДанные, ДоступныеОбъекты, Пользователи", Ложь);

	пРольМД = Метаданные.НайтиПоПолномуИмени(пРоль);
	Если пРоль = Неопределено Тогда
		Возврат пРезультат;
	КонецЕсли;

	пРезультат.ЕстьДанные = Истина;
	пРезультат.Вставить("ДоступныеОбъекты", Новый Массив);
	пРезультат.Вставить("Пользователи", Новый Массив);

	Для Каждого П Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		Для Каждого Р Из П.Роли Цикл
			Если Р.Name = пРольМД.Name Тогда
				пСтрук = Новый Структура("Name, FullName");
				ЗаполнитьЗначенияСвойств(пСтрук, П);
				пРезультат.Пользователи.Добавить(пСтрук);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	пСтрукОбъектыСОгрничением = Новый Структура;
	пСтрукОбъектыСОгрничением.Вставить("Справочник");
	пСтрукОбъектыСОгрничением.Вставить("Документ");

	пОбъектыСОгрничением = вПолучитьОписаниеОграниченийДляПараметровДоступа();

	пПоляРезультата = "RestrictionCondition, Kind, Name, Presentation, FullName";

	ТабПользователи = Новый ТаблицаЗначений;
	ТабПользователи.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТабПользователи.Колонки.Добавить("FullName", Новый ОписаниеТипов("Строка"));

	пТабОбъекты = Новый ТаблицаЗначений;
	пТабОбъекты.Колонки.Добавить("FullName", Новый ОписаниеТипов("Строка"));
	пТабОбъекты.Колонки.Добавить("ОбъектМД", Новый ОписаниеТипов("ОбъектМетаданных"));

	пСтрук = Новый Структура("
							 |ПараметрыСеанса,
							 |ОбщиеКоманды,
							 |ПланыОбмена,
							 |Справочники,
							 |Документы,
							 |ЖурналыДокументов,
							 |БизнесПроцессы,
							 |Задачи,
							 |РегистрыСведений,
							 |РегистрыНакопления,
							 |РегистрыБухгалтерии,
							 |РегистрыРасчета
							 |");

	Для Каждого Элем Из пСтрук Цикл
		Для Каждого ОбъектМД Из Метаданные[Элем.Ключ] Цикл
			НС = пТабОбъекты.Добавить();
			НС.FullName = ОбъектМД.FullName();
			НС.ОбъектМД = ОбъектМД;

			пСтрук = Новый Структура("Команды");
			ЗаполнитьЗначенияСвойств(пСтрук, ОбъектМД);

			Если пСтрук.Команды <> Неопределено Тогда
				Для Каждого пКоманда Из ОбъектМД.Команды Цикл
					НС = пТабОбъекты.Добавить();
					НС.FullName = пКоманда.FullName();
					НС.ОбъектМД = пКоманда;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Стр Из пТабОбъекты Цикл
		пСтрук = Новый Структура(пПоляРезультата);

		пПолноеИмя = Стр.ОбъектМД.FullName();
		Если СтрНайти(пПолноеИмя, ".Команда.") <> 0 Тогда
			Поз1 = СтрНайти(пПолноеИмя, ".", НаправлениеПоиска.СКонца);
			пСтрук.Kind = "ЧужаяКоманда";
			пСтрук.Name = Сред(пПолноеИмя, Поз1 + 1);
		Иначе
			Поз1 = СтрНайти(пПолноеИмя, ".");
			пСтрук.Kind = Лев(пПолноеИмя, Поз1 - 1);
			пСтрук.Name = Сред(пПолноеИмя, Поз1 + 1);
		КонецЕсли;

		пСписокПрав = DescriptionOfAccessRights[пСтрук.Kind];

		Если пСписокПрав = Неопределено Тогда
			Продолжить;
		ИначеЕсли СтрНайти(пСписокПрав, пПраво) = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ПравоДоступа(пПраво, Стр.ОбъектМД, пРольМД) Тогда

			пСтрук.FullName = пПолноеИмя;
			пСтрук.Presentation = Стр.ОбъектМД.Представление();

			пПоле = пОбъектыСОгрничением[пСтрук.Kind];
			Если пПоле <> Неопределено Тогда
				пСтрук.RestrictionCondition = ПараметрыДоступа(пПраво, Стр.ОбъектМД, пПоле, пРольМД).RestrictionCondition;
			ИначеЕсли пСтрук.Kind = "РегистрСведений" И Стр.ОбъектМД.Измерения.Количество() <> 0 Тогда
				пПоле = Стр.ОбъектМД.Измерения[0].Name;
				пСтрук.RestrictionCondition = ПараметрыДоступа(пПраво, Стр.ОбъектМД, пПоле, пРольМД).RestrictionCondition;
			КонецЕсли;

			пРезультат.ДоступныеОбъекты.Добавить(пСтрук);
		КонецЕсли;
	КонецЦикла;

	Возврат пРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция вПолучитьПраваДоступаКОбъекту(Знач ИмяПрава, Знач FullName)
	СтрукРезультат = Новый Структура("ЕстьДанные, Роли, Пользователи", Ложь);

	Если ПустаяСтрока(ИмяПрава) Тогда
		Возврат СтрукРезультат;
	КонецЕсли;

	пОбъектыСОгрничением = вПолучитьОписаниеОграниченийДляПараметровДоступа();

	ТабРоли = Новый ТаблицаЗначений;
	ТабРоли.Колонки.Добавить("RestrictionCondition", Новый ОписаниеТипов("Булево"));
	ТабРоли.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТабРоли.Колонки.Добавить("Synonym", Новый ОписаниеТипов("Строка"));

	ТабПользователи = Новый ТаблицаЗначений;
	ТабПользователи.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	ТабПользователи.Колонки.Добавить("FullName", Новый ОписаниеТипов("Строка"));

	Если СтрНайти(FullName, ".Команда.") <> 0 Тогда
		ТипМД = "ЧужаяКоманда";
	Иначе
		ТипМД = Лев(FullName, СтрНайти(FullName, ".") - 1);
	КонецЕсли;

	Если ТипМД <> "Пользователь" Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);

		Если ОбъектМД = Неопределено Тогда
			Возврат СтрукРезультат;
		КонецЕсли;
	КонецЕсли;

	Если ТипМД = "РегистрСведений" И ОбъектМД.Измерения.Количество() <> 0 Тогда
		пПоле = ОбъектМД.Измерения[0].Name;
		пОбъектыСОгрничением[ТипМД] = пПоле;
	КонецЕсли;

	ЭтоОбычныйРежим = Истина;

	Если ЭтоОбычныйРежим И ПустаяСтрока(ИмяПрава) Тогда
		Возврат СтрукРезультат;
	КонецЕсли;
	Если ЭтоОбычныйРежим Тогда
		Для Каждого Элем Из Метаданные.Роли Цикл
			Если ПравоДоступа(ИмяПрава, ОбъектМД, Элем) Тогда
				НС = ТабРоли.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);

				пПоле = пОбъектыСОгрничением[ТипМД];
				Если пПоле <> Неопределено Тогда
					НС.RestrictionCondition = ПараметрыДоступа(ИмяПрава, ОбъектМД, пПоле, Элем).RestrictionCondition;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		ТабРоли.Сортировать("Name");
	КонецЕсли;

	__ТабРолиИПользователи = вПолучитьТаблицуРолиИПользователи();

	Если ЭтоОбычныйРежим Тогда
		СтрукР = Новый Структура("ИмяР");
		СтрукП = Новый Структура("Name");

		Для Каждого Стр Из ТабРоли Цикл
			СтрукР.ИмяР = Стр.Name;
			Для Каждого СтрХ Из __ТабРолиИПользователи.НайтиСтроки(СтрукР) Цикл
				СтрукП.Name = СтрХ.ИмяП;
				Если ТабПользователи.НайтиСтроки(СтрукП).Количество() = 0 Тогда
					НС = ТабПользователи.Добавить();
					НС.Name = СтрХ.ИмяП;
					НС.FullName = СтрХ.ПолноеИмяП;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		ТабПользователи.Сортировать("Name");
	КонецЕсли;

	СтрукРезультат.ЕстьДанные = Истина;
	СтрукРезультат.Роли = Новый Массив;
	СтрукРезультат.Пользователи = Новый Массив;

	Для Каждого Стр Из ТабРоли Цикл
		Струк = Новый Структура("Name, Synonym, RestrictionCondition");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Роли.Добавить(Струк);
	КонецЦикла;

	Для Каждого Стр Из ТабПользователи Цикл
		Струк = Новый Структура("Name, FullName");
		ЗаполнитьЗначенияСвойств(Струк, Стр);
		СтрукРезультат.Пользователи.Добавить(Струк);
	КонецЦикла;

	Возврат СтрукРезультат;
КонецФункции
&НаКлиенте
Процедура _FillInDependentObjects(Команда)
	_DependentObjects.ПолучитьЭлементы().Очистить();
	_WhereFound = "";

	вЗаполнитьЗависимыеОбъекты();

	Для Каждого Элем Из _DependentObjects.ПолучитьЭлементы() Цикл
		Элементы._DependentObjects.Развернуть(Элем.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура вЗаполнитьЗависимыеОбъекты()

	пОбъектМД = Метаданные.НайтиПоПолномуИмени(_FullName);
	Если пОбъектМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	пКорневойУзел = _DependentObjects.ПолучитьЭлементы().Добавить();
	пКорневойУзел.ВидУзла = 1;
	пКорневойУзел.Name = пОбъектМД.Name;
	пКорневойУзел.Presentation = пОбъектМД.Представление();
	пКорневойУзел.FullName = _FullName;

	Поз = СтрНайти(_FullName, ".");
	пТипДляПоиска = Type(Лев(_FullName, Поз - 1) + "Ссылка" + Сред(_FullName, Поз));

	пНадоСмотретьВидыСубконтоПС = (Лев(_FullName, Поз - 1) = "ПланВидовХарактеристик");

	пТабРезультат = Новый ТаблицаЗначений;
	пТабРезультат.Колонки.Добавить("Name", Новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("Presentation", Новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("FullName", Новый ОписаниеТипов("Строка"));
	пТабРезультат.Колонки.Добавить("WhereFound", Новый ОписаниеТипов("Строка"));
	
	
	// ---
	пСтрукРазделы = Новый Структура("ПараметрыСеанса, ОпределяемыеТипы, Константы");

	пСоотв = Новый Соответствие;

	Для Каждого пЭлем Из пСтрукРазделы Цикл
		пТабРезультат.Очистить();

		пРазделМД = Метаданные[пЭлем.Ключ];

		Для Каждого ОбъектМД Из пРазделМД Цикл
			пПолноеИмя = ОбъектМД.FullName();
			пГдеНайдено = "";
			пСчетчик = 0;

			Если ОбъектМД.Type.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
				пПуть = "Объект.Type";
				Если пСчетчик = 0 Тогда
					пГдеНайдено = пПуть;
				Иначе
					пГдеНайдено = пГдеНайдено + "," + пПуть;
				КонецЕсли;
				пСчетчик = пСчетчик + 1;

				пСоотв[пПолноеИмя] = 1;
			КонецЕсли;

			Если пСоотв[пПолноеИмя] <> Неопределено Тогда
				НС = пТабРезультат.Добавить();
				НС.Name = ОбъектМД.Name;
				НС.Presentation = ОбъектМД.Представление();
				НС.FullName = пПолноеИмя;
				НС.WhereFound = пГдеНайдено;
			КонецЕсли;
		КонецЦикла;

		пКоличество = пТабРезультат.Количество();
		Если пКоличество <> 0 Тогда
			пТабРезультат.Сортировать("Name");

			пУзелРаздела = пКорневойУзел.ПолучитьЭлементы().Добавить();
			пУзелРаздела.Name = пЭлем.Ключ + " (" + пКоличество + ")";
			пУзелРаздела.ВидУзла = 2;
			пКоллекцияЭлементов = пУзелРаздела.ПолучитьЭлементы();

			Для Каждого Стр Из пТабРезультат Цикл
				ЗаполнитьЗначенияСвойств(пКоллекцияЭлементов.Добавить(), Стр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// ---
	пСтрукРазделы = Новый Структура("ПланыОбмена, Справочники, Документы, ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыСчетов,
									|РегистрыСведений, РегистрыНакопления, РегистрыБухгалтерии, РегистрыРасчета,
									|БизнесПроцессы, Задачи");

	пСтрукОбласти = Новый Структура("Измерения, Ресурсы, Реквизиты");

	пСоотв = Новый Соответствие;

	Для Каждого пЭлем Из пСтрукРазделы Цикл
		пТабРезультат.Очистить();

		пРазделМД = Метаданные[пЭлем.Ключ];

		пЭтоПланСчетов = (пЭлем.Ключ = "ПланыСчетов");
		пЭтоПланОбмена = (пЭлем.Ключ = "ПланыОбмена");
		пЭтоРегистр = (СтрНайти(пЭлем.Ключ, "Регистры") = 1);

		Для Каждого ОбъектМД Из пРазделМД Цикл
			пПолноеИмя = ОбъектМД.FullName();
			пГдеНайдено = "";
			пСчетчик = 0;

			Если пЭтоРегистр Тогда
				Для Каждого пОбласть Из пСтрукОбласти Цикл
					Для Каждого пРеквизит Из ОбъектМД[пОбласть.Ключ] Цикл
						Если пРеквизит.Type.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
							пПуть = "Объект." + пОбласть.Ключ + "." + пРеквизит.Name;
							Если пСчетчик = 0 Тогда
								пГдеНайдено = пПуть;
							Иначе
								пГдеНайдено = пГдеНайдено + "," + пПуть;
							КонецЕсли;
							пСчетчик = пСчетчик + 1;

							пСоотв[пПолноеИмя] = 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;

				Если пСоотв[пПолноеИмя] <> Неопределено Тогда
					НС = пТабРезультат.Добавить();
					НС.Name = ОбъектМД.Name;
					НС.Presentation = ОбъектМД.Представление();
					НС.FullName = пПолноеИмя;
					НС.WhereFound = пГдеНайдено;
				КонецЕсли;

			Иначе
				Для Каждого пРеквизит Из ОбъектМД.Реквизиты Цикл
					Если пРеквизит.Type.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Реквизиты." + пРеквизит.Name;
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Реквизиты." + пРеквизит.Name;
						КонецЕсли;
						пСчетчик = пСчетчик + 1;

						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЦикла;

				Для Каждого пТабличнаяЧасть Из ОбъектМД.ТабличныеЧасти Цикл
					Для Каждого пРеквизит Из пТабличнаяЧасть.Реквизиты Цикл
						Если пРеквизит.Type.Типы().Найти(пТипДляПоиска) <> Неопределено Тогда
							Если пСчетчик = 0 Тогда
								пГдеНайдено = "Объект." + пТабличнаяЧасть.Name + ".Реквизиты." + пРеквизит.Name;
							Иначе
								пГдеНайдено = пГдеНайдено + ",Объект." + пТабличнаяЧасть.Name + ".Реквизиты."
									+ пРеквизит.Name;
							КонецЕсли;
							пСчетчик = пСчетчик + 1;

							пСоотв[пПолноеИмя] = 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;

				Если пЭтоПланОбмена Тогда
					Если ОбъектМД.Состав.Содержит(пОбъектМД) Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.Состав";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.Состав";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;

						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;

				Если пЭтоПланСчетов И пНадоСмотретьВидыСубконтоПС Тогда
					Если ОбъектМД.ВидыСубконто = пОбъектМД Тогда
						Если пСчетчик = 0 Тогда
							пГдеНайдено = "Объект.ВидыСубконто";
						Иначе
							пГдеНайдено = пГдеНайдено + ",Объект.ВидыСубконто";
						КонецЕсли;
						пСчетчик = пСчетчик + 1;

						пСоотв[пПолноеИмя] = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если пСоотв[пПолноеИмя] <> Неопределено Тогда
				НС = пТабРезультат.Добавить();
				НС.Name = ОбъектМД.Name;
				НС.Presentation = ОбъектМД.Представление();
				НС.FullName = пПолноеИмя;
				НС.WhereFound = пГдеНайдено;
			КонецЕсли;
		КонецЦикла;

		пКоличество = пТабРезультат.Количество();
		Если пКоличество <> 0 Тогда
			пТабРезультат.Сортировать("Name");

			пУзелРаздела = пКорневойУзел.ПолучитьЭлементы().Добавить();
			пУзелРаздела.Name = пЭлем.Ключ + " (" + пКоличество + ")";
			пУзелРаздела.ВидУзла = 2;
			пКоллекцияЭлементов = пУзелРаздела.ПолучитьЭлементы();

			Для Каждого Стр Из пТабРезультат Цикл
				ЗаполнитьЗначенияСвойств(пКоллекцияЭлементов.Добавить(), Стр);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура _ЗависимыеОбъектыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("вОбработкаАктивизацииСтрокиЗависимых", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура вОбработкаАктивизацииСтрокиЗависимых()
	ТекДанные = Элементы._DependentObjects.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		_WhereFound = СтрЗаменить(ТекДанные.ГдеНайдено, ",", Символы.ПС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _ЗависимыеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы._DependentObjects.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = 0 Тогда
		СтандартнаяОбработка = Ложь;
		вПоказатьСвойстваОбъекта(ТекДанные.FullName);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _OpenSubordinateObject(Команда)
	ТекДанные = Элементы._DependentObjects.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ВидУзла = 0 Тогда
		вПоказатьСвойстваОбъекта(ТекДанные.FullName);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура _ReadConstant(Команда)
	пРезультат = вПрочитатьКонстанту(_FullName);
	Если Не пРезультат.Отказ Тогда
		_ConstantValue = пРезультат.Значение;
		_TypeOfConstantValue = пРезультат.ТипЗначения;

		Если ТипЗнч(пРезультат.Значение) = Type("Строка") Тогда
			_TextConstantValue = пРезультат.Значение;
		Иначе
			_TextConstantValue = пРезультат.Текст;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура _RecordConstant(Команда)
	Если вЗаписатьКонстанту() Тогда
		пВидОбъекта = Лев(_FullName, СтрНайти(_FullName, ".") - 1);

		Если пВидОбъекта = "Константа" Тогда
			ПоказатьПредупреждение( , "Значение константы изменено!", 20);
		ИначеЕсли пВидОбъекта = "ПараметрСеанса" Тогда
			ПоказатьПредупреждение( , "Значение параметра сеанса изменено!", 20);
		КонецЕсли;

		_ПрочитатьКонстанту(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция вЗаписатьКонстанту()
	УстановитьПривилегированныйРежим(Истина);

	пОбъектМД = Метаданные.НайтиПоПолномуИмени(_FullName);
	Если пОбъектМД = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	пВидОбъекта = Лев(_FullName, СтрНайти(_FullName, ".") - 1);

	Если пВидОбъекта = "Константа" Тогда
		пМенеджерЗначения = Константы[пОбъектМД.Name].СоздатьМенеджерЗначения();
		Если _UseTextWhenWritingConstants Тогда
			пМенеджерЗначения.Значение = _TextConstantValue;
		Иначе
			пМенеджерЗначения.Значение = _ConstantValue;
		КонецЕсли;

		Попытка
			пМенеджерЗначения.Записать();
			Возврат Истина;
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;

	ИначеЕсли пВидОбъекта = "ПараметрСеанса" Тогда
		Попытка
			Если _UseTextWhenWritingConstants Тогда
				ПараметрыСеанса[пОбъектМД.Name] = _TextConstantValue;
			Иначе
				ПараметрыСеанса[пОбъектМД.Name] = _ConstantValue;
			КонецЕсли;
			Возврат Истина;
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;

	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция вПрочитатьКонстанту(Знач FullName)
	УстановитьПривилегированныйРежим(Истина);

	пРезультат = Новый Структура("Отказ, ПричинаОтказа, ТолькоПросмотр, Текст, Значение, ТипЗначения", Ложь, "", Ложь,
		"");

	пОбъектМД = Метаданные.НайтиПоПолномуИмени(FullName);
	Если пОбъектМД = Неопределено Тогда
		пРезультат.Отказ = Истина;
		пРезультат.ТолькоПросмотр = Истина;
		пРезультат.ПричинаОтказа = "Не удалость найти объект метаданных!";
		Возврат пРезультат;
	КонецЕсли;

	пВидОбъекта = Лев(FullName, СтрНайти(FullName, ".") - 1);

	Если пВидОбъекта = "Константа" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					   |	т.Значение КАК Значение
					   |ИЗ
					   |	" + FullName + " КАК т";

		Попытка
			Выборка = Запрос.Выполнить().Выбрать();

			пРезультат.Значение = ?(Выборка.Следующий(), Выборка.Значение, Неопределено);
			пРезультат.ТипЗначения = вИмяТипаСтрокой(вСформироватьСтруктуруТипов(), ТипЗнч(пРезультат.Значение),
				пОбъектМД.Type);
		Исключение
			Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			пРезультат.Отказ = Истина;
			пРезультат.ПричинаОтказа = ОписаниеОшибки();
			Возврат пРезультат;
		КонецПопытки;

	ИначеЕсли пВидОбъекта = "ПараметрСеанса" Тогда
		Попытка
			пРезультат.Значение = ПараметрыСеанса[пОбъектМД.Name];
			пРезультат.ТипЗначения = вИмяТипаСтрокой(вСформироватьСтруктуруТипов(), ТипЗнч(пРезультат.Значение),
				пОбъектМД.Type);
		Исключение
			пРезультат.Отказ = Истина;
			пРезультат.ПричинаОтказа = "значение не установлено!";
		КонецПопытки;

	Иначе
		пРезультат.Отказ = Истина;
		пРезультат.ТолькоПросмотр = Истина;
		пРезультат.ПричинаОтказа = пВидОбъекта + " не поддерживается!";
		Возврат пРезультат;
	КонецЕсли;

	пНеПоддерживаемыеТипы = Новый Массив;
	пНеПоддерживаемыеТипы.Добавить(Type("ХранилищеЗначения"));
	пНеПоддерживаемыеТипы.Добавить(Type("ДвоичныеДанные"));
	пНеПоддерживаемыеТипы.Добавить(Type("ОписаниеТипов"));
	пНеПоддерживаемыеТипы.Добавить(Type("ФиксированныйМассив"));
	пНеПоддерживаемыеТипы.Добавить(Type("ФиксированнаяСтруктура"));
	пНеПоддерживаемыеТипы.Добавить(Type("ФиксированноеСоответствие"));

	Для Каждого Элем Из пНеПоддерживаемыеТипы Цикл
		Если пОбъектМД.Type.СодержитТип(Элем) Тогда
			пРезультат.ТолькоПросмотр = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Ложь Тогда
		пТипЗначения = ТипЗнч(пРезультат.Значение);
		Если пТипЗначения = Type("ФиксированныйМассив") Тогда
			Для Сч = 0 По пРезультат.Значение.ВГраница() Цикл
				пРезультат.Текст = пРезультат.Текст + Символы.ПС + Строка(пРезультат.Значение[Сч]);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат пРезультат;
КонецФункции