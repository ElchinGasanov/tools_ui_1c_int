///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, 1C-Soft LLC
// All Rights reserved. This application and supporting materials are provided under the terms of 
// Attribution 4.0 International license (CC BY 4.0)
// The license text is available at:
// https://creativecommons.org/licenses/by/4.0/legalcode
// Translated by Neti Company
///////////////////////////////////////////////////////////////////////////////////////////////////////
#Region EventHandlers

&AtServer
Procedure OnCreateAtServer(Cancel, StandardProcessing)
	
	// Checking the access rights must be the first action in this procedure.
	If Not AccessRight("Administration", Metadata) Then
		Raise NStr("ru = 'Использование обработки в интерактивном режиме доступно только администратору.'; en = 'Running the data processor manually requires administrator rights.'");
	EndIf;
	
	CheckPlatformVersionAndCompatibilityMode();
	
	Object.IsInteractiveMode = True;
	Object.SafeMode = True;
	Object.ExchangeLogFileEncoding = "TextEncoding.UTF8";

	FormHeader = NStr("ru = 'Универсальный обмен данными в формате XML (%DataProcessorVersion%)'; en = 'Universal data exchange in XML format (%DataProcessorVersion%)'");
	FormHeader = StrReplace(FormHeader, "%DataProcessorVersion%", ObjectVersionAsStringAtServer());
	
	Title = FormHeader;
	
	FillTypeAvailableToDeleteList();
	UT_Common.ToolFormOnCreateAtServer(ThisObject, Cancel, StandardProcessing);

EndProcedure

&AtClient
Procedure OnOpen(Cancel)
	
	Items.RulesFileName.ChoiceList.LoadValues(ExchangeRules.UnloadValues());
	Items.ExchangeFileName.ChoiceList.LoadValues(DataImportFromFile.UnloadValues());
	Items.DataFileName.ChoiceList.LoadValues(DataExportToFile.UnloadValues());
	
	OnPeriodChange();
	
	OnChangeChangesRegistrationDeletionType();
	
	ClearDataImportFileData();
	
	DirectExport = ?(Object.DirectReadingFromDestinationIB, 1, 0);

	СохраненныйРежимЗагрузки = (Object.ExchangeMode = "Загрузка");

	Если СохраненныйРежимЗагрузки Тогда
		
		// Нужную страницу устанавливаем.
		Элементы.FormMainPanel.ТекущаяСтраница = Элементы.FormMainPanel.ПодчиненныеЭлементы.Загрузка;

	КонецЕсли;

	ОбработатьДоступностьЭлементовУправленияТранзакциями();

	РазвернутьСтрокиДерева(DataToDelete, Элементы.DataToDelete, "Check");

	АрхивироватьФайлПриИзмененииЗначения();
	ПрямаяВыгрузкаПриИзмененииЗначения();

	ИзменитьРежимОбработки(IsClient);

#Если ВебКлиент Тогда
	Элементы.ExportDebugPages.ТекущаяСтраница = Элементы.ExportDebugPages.ПодчиненныеЭлементы.WebClientExportGroup;
	Элементы.СтраницыОтладкиЗагрузки.ТекущаяСтраница = Элементы.СтраницыОтладкиЗагрузки.ПодчиненныеЭлементы.ГруппаЗагрузкаВебКлиент;
	Object.HandlersDebugModeFlag = Ложь;
#КонецЕсли

	УстановитьДоступностьКомандОтладки();

	Если СохраненныйРежимЗагрузки И Object.AutomaticDataImportSettings <> 0 Тогда

		Если Object.AutomaticDataImportSettings = 1 Тогда

			ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Выполнить загрузку данных из файла обмена?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Иначе

			ПриОткрытииЗавершение(КодВозвратаДиалога.Да, Неопределено);

		КонецЕсли;

	КонецЕсли;

	Если Не ЭтоWindowsКлиент() Тогда
		Элементы.CDGroup.ТекущаяСтраница = Элементы.CDGroup.ПодчиненныеЭлементы.LinuxGroup;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ВыполнитьЗагрузкуИзФормы();
		ExportPeriodPresentation = ПредставлениеПериода(Object.StartDate, Object.EndDate);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ArchiveFileOnChange(Элемент)

	АрхивироватьФайлПриИзмененииЗначения();

КонецПроцедуры

&НаКлиенте
Процедура RulesFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, ЭтотОбъект, "RulesFileName", Истина, , Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура RulesFileNameOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура DirectExportOnChange(Элемент)

	ПрямаяВыгрузкаПриИзмененииЗначения();

КонецПроцедуры

&НаКлиенте
Процедура FormMainPanelOnCurrentPageChange(Элемент, ТекущаяСтраница)

	Если ТекущаяСтраница.Имя = "Export" Тогда

		Object.ExchangeMode = "Export";

	ИначеЕсли ТекущаяСтраница.Имя = "Загрузка" Тогда

		Object.ExchangeMode = "Загрузка";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура DebugModeFlagOnChnange(Элемент)

	Если Object.DebugModeFlag Тогда

		Object.UseTransactions = Ложь;

	КонецЕсли;

	ОбработатьДоступностьЭлементовУправленияТранзакциями();

КонецПроцедуры

&НаКлиенте
Процедура ProcessedObjectsCountToUpdateStatusOnChange(Элемент)

	Если Object.ProcessedObjectsCountToUpdateStatus = 0 Тогда
		Object.ProcessedObjectsCountToUpdateStatus = 100;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExchangeFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, ЭтотОбъект, "ExchangeFileName", Ложь, , Object.ArchiveFile);

КонецПроцедуры

&НаКлиенте
Процедура ExchangeLogFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, Object, "ExchangeLogFileName", Ложь, "txt", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ImportExchangeLogFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, Object, "ImportExchangeLogFileName", Ложь, "txt", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура DataFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, ЭтотОбъект, "DataFileName", Ложь, , Object.ArchiveFile);

КонецПроцедуры

&НаКлиенте
Процедура InfobaseConnectionDirectoryStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);

	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите каталог информационной базы'");
	ДиалогВыбораФайла.Каталог = Object.InfobaseConnectionDirectory;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;

	Оповещение = Новый ОписаниеОповещения("КаталогИнформационнойБазыДляПодключенияОбработкаВыбора", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КаталогИнформационнойБазыДляПодключенияОбработкаВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Object.InfobaseConnectionDirectory = ВыбранныеФайлы[0];

КонецПроцедуры

&НаКлиенте
Процедура ExchangeLogFileNameOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ImportExchangeLogFileNameOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура InfobaseConnectionDirectoryOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура InfobaseConnectionWindowsAuthenticationOnChange(Элемент)

	Элементы.InfobaseConnectionUsername.Доступность = Не Object.InfobaseConnectionWindowsAuthentication;
	Элементы.InfobaseConnectionPassword.Доступность = Не Object.InfobaseConnectionWindowsAuthentication;

КонецПроцедуры

&НаКлиенте
Процедура RulesFileNameOnChange(Элемент)

	Файл = Новый Файл(RulesFileName);

	Оповещение = Новый ОписаниеОповещения("ИмяФайлаПравилПослеПроверкиСуществования", ЭтотОбъект);
	Файл.НачатьПроверкуСуществования(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилПослеПроверкиСуществования(Существует, ДополнительныеПараметры) Экспорт

	Если Не Существует Тогда
		СообщитьПользователю(НСтр("ru = 'Не найден файл правил обмена'"), "RulesFileName");
		УстановитьПризнакЗагрузкиПравил(Ложь);
		Возврат;
	КонецЕсли;

	Если ИменаФайловПравилИОбменаСовпадают() Тогда
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаПравилПриИзмененииЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Загрузить правила обмена данными?'"), РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		ВыполнитьЗагрузкуПравилОбмена();

	Иначе

		УстановитьПризнакЗагрузкиПравил(Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExchangeFileNameOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ExchangeFileNameOnChange(Элемент)

	ОчиститьДанныеОФайлеДляЗагрузкиДанных();

КонецПроцедуры

&НаКлиенте
Процедура UseTransactionsOnChange(Элемент)

	ОбработатьДоступностьЭлементовУправленияТранзакциями();

КонецПроцедуры

&НаКлиенте
Процедура ImportHandlersDebugModeFlagOnChange(Элемент)

	УстановитьДоступностьКомандОтладки();

КонецПроцедуры

&НаКлиенте
Процедура ExportHandlersDebugModeFlagOnChange(Элемент)

	УстановитьДоступностьКомандОтладки();

КонецПроцедуры

&НаКлиенте
Процедура DataFileNameOpening(Элемент, СтандартнаяОбработка)

	ОткрытьВПриложении(Элемент.ТекстРедактирования, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура DataFileNameOnChange(Элемент)

	Если ПустоеЗначениеРеквизита(DataFileName, "DataFileName", Элементы.DataFileName.Заголовок)
		Или ИменаФайловПравилИОбменаСовпадают() Тогда
		Возврат;
	КонецЕсли;

	Object.ExchangeFileName = DataFileName;

	Файл = Новый Файл(Object.ExchangeFileName);
	Object.ArchiveFile = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));

КонецПроцедуры

&НаКлиенте
Процедура ConnectedInfobaseTypeOnChange(Элемент)

	ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения();

КонецПроцедуры

&НаКлиенте
Процедура PlatformVersionForInfobaseConnectionOnChange(Элемент)

	Если ПустаяСтрока(Object.PlatformVersionForInfobaseConnection) Тогда

		Object.PlatformVersionForInfobaseConnection = "V8";

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ChangesRegistrationDeletionTypeForExportedExchangeNodes(Элемент)

	ПриИзмененииТипаУдаленияРегистрацииИзменений();

КонецПроцедуры

&НаКлиенте
Процедура ExportPeriodOnChange(Элемент)

	ПриИзмененииПериода();

КонецПроцедуры

&НаКлиенте
Процедура DeletionPeriodOnChange(Элемент)

	ПриИзмененииПериода();

КонецПроцедуры

&НаКлиенте
Процедура SafeImportOnChange(Элемент)

	ИзменитьРежимБезопаснаяЗагрузка();

КонецПроцедуры

&НаКлиенте
Процедура ImportRulesFileNameStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ВыборФайла(Элемент, ЭтотОбъект, "ImportRulesFileName", Истина, , Ложь, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПравилЗагрузкиПриИзменении(Элемент)

	ПоместитьФайлПравилЗагрузкиВХранилище();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПравилВыгрузки

&НаКлиенте
Процедура ExportRulesTableBeforeRowChange(Элемент, Отказ)

	Если Элемент.ТекущийЭлемент.Имя = "ExchangeNodeRef" Тогда

		Если Элемент.ТекущиеДанные.IsFolder Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExportRulesTableOnChange(Элемент)

	Если Элемент.ТекущийЭлемент.Имя = "DER" Тогда

		ТекСтрока = Элемент.ТекущиеДанные;

		Если ТекСтрока.Check = 2 Тогда
			ТекСтрока.Check = 0;
		КонецЕсли;

		УстановитьПометкиПодчиненных(ТекСтрока, "Check");
		УстановитьПометкиРодителей(ТекСтрока, "Check");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExportRulesTableFilterStartChoice(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущаяСтрока = Элементы.ExportRulesTable.ТекущиеДанные;

	Если ТекущаяСтрока = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	Если ТекущаяСтрока.ИмяМетаданных = "" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	КомпоновщикНастроек = ИнициализироватьКомпоновщикНастроекОтбораПравилВыгрузки(
		Элементы.ExportRulesTable.ТекущаяСтрока);
	ТекущаяСтрока.Filter = КомпоновщикНастроек.Настройки.Filter;

КонецПроцедуры
&НаКлиенте
Процедура ExportRulesTableFilterOnChange(Элемент)
	ТекущаяСтрока = Элементы.ExportRulesTable.ТекущиеДанные;
	Если ТекущаяСтрока.Filter.Элементы.Количество() > 0 Тогда
		ТекущаяСтрока.UseFilter = Истина;
	Иначе
		ТекущаяСтрока.UseFilter = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ExportRulesTableFilterClearing(Элемент, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ExportRulesTable.ТекущиеДанные;
	Если ТекущаяСтрока.Filter.Элементы.Количество() > 0 Тогда
		ТекущаяСтрока.UseFilter = Истина;
	Иначе
		ТекущаяСтрока.UseFilter = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУдаляемыеДанные

&НаКлиенте
Процедура DataToDeleteOnChange(Элемент)

	ТекСтрока = Элемент.ТекущиеДанные;

	УстановитьПометкиПодчиненных(ТекСтрока, "Check");
	УстановитьПометкиРодителей(ТекСтрока, "Check");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ConnectionTest(Команда)

	ВыполнитьПодключениеКИБПриемникуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура GetExchangeFileInfo(Команда)

	АдресФайла = "";

	Если IsClient Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьИнформациюОФайлеОбменаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, , , УникальныйИдентификатор);

	Иначе

		ПолучитьИнформациюОФайлеОбменаЗавершение(Истина, АдресФайла, "", Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОФайлеОбменаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда

		Попытка

			ОткрытьФайлЗагрузкиНаСервере(Адрес);
			ExportPeriodPresentation = ПредставлениеПериода(Object.StartDate, Object.EndDate);

		Исключение

			СообщитьПользователю(НСтр("ru = 'Не удалось прочитать файл обмена.'"));
			ОчиститьДанныеОФайлеДляЗагрузкиДанных();

		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура DeletionCheckAll(Команда)

	Для Каждого Строка Из DataToDelete.ПолучитьЭлементы() Цикл

		Строка.Check = 1;
		УстановитьПометкиПодчиненных(Строка, "Check");

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура DeletionUncheckAll(Команда)

	Для Каждого Строка Из DataToDelete.ПолучитьЭлементы() Цикл
		Строка.Check = 0;
		УстановитьПометкиПодчиненных(Строка, "Check");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура DeletionDelete(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеУдалитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить выбранные данные в информационной базе?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура УдалениеУдалитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда

		УдалитьНаСервере();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExportCheckAll(Команда)

	Для Каждого Строка Из Object.ExportRulesTable.ПолучитьЭлементы() Цикл
		Строка.Check = 1;
		УстановитьПометкиПодчиненных(Строка, "Check");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ExportUncheckAll(Команда)

	Для Каждого Строка Из Object.ExportRulesTable.ПолучитьЭлементы() Цикл
		Строка.Check = 0;
		УстановитьПометкиПодчиненных(Строка, "Check");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ExportUncheckAllExchangeNodes(Команда)

	УстановитьУзелОбменаУСтрокДереваНаСервере(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ExportSetExchangeNode(Команда)

	Если Элементы.ExportRulesTable.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьУзелОбменаУСтрокДереваНаСервере(Элементы.ExportRulesTable.ТекущиеДанные.СсылкаНаУзелОбмена);

КонецПроцедуры

&НаКлиенте
Процедура SaveParameters(Команда)

	СохранитьПараметрыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура RestoreParameters(Команда)

	ВосстановитьПараметрыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ExportDebugSetup(Команда)

	Object.ExchangeRulesFileName = ИмяФайлаНаСервереИлиКлиенте(RulesFileName, АдресФайлаПравилВХранилище);

	ОткрытьФормуНастройкиОтладкиОбработчиков(Истина);

КонецПроцедуры

&НаКлиенте
Процедура AtClient(Команда)

	Если Не IsClient Тогда

		IsClient = Истина;

		ИзменитьРежимОбработки(IsClient);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура AtServer(Команда)

	Если IsClient Тогда

		IsClient = Ложь;

		ИзменитьРежимОбработки(IsClient);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ImportDebugSetup(Команда)

	АдресФайлаОбменаВХранилище = "";
	ИмяФайлаДляРасширения = "";

	Если IsClient Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтладкиЗагрузкиЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаОбменаВХранилище, , , УникальныйИдентификатор);

	Иначе

		Если ПустоеЗначениеРеквизита(ExchangeFileName, "ExchangeFileName", Элементы.ExchangeFileName.Заголовок) Тогда
			Возврат;
		КонецЕсли;

		НастройкаОтладкиЗагрузкиЗавершение(Истина, АдресФайлаОбменаВХранилище, ИмяФайлаДляРасширения, Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтладкиЗагрузкиЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда

		Object.ExchangeFileName = ИмяФайлаНаСервереИлиКлиенте(ExchangeFileName, Адрес, ВыбранноеИмяФайла);

		ОткрытьФормуНастройкиОтладкиОбработчиков(Ложь);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ExecuteExport(Команда)

	ВыполнитьВыгрузкуИзФормы();

КонецПроцедуры

&НаКлиенте
Процедура ExecuteImport(Команда)

	ВыполнитьЗагрузкуИзФормы();

КонецПроцедуры

&НаКлиенте
Процедура ReadExchangeRules(Команда)

	Если Не ЭтоWindowsКлиент() И DirectExport = 1 Тогда
		ПоказатьПредупреждение( , НСтр(
			"ru = 'Прямое подключение к информационной базе поддерживается только в клиенте под управлением ОС Windows.'"));
		Возврат;
	КонецЕсли;

	ИмяФайлаДляРасширения = "";

	Если IsClient Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьПравилаОбменаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаПравилВХранилище, , , УникальныйИдентификатор);

	Иначе

		АдресФайлаПравилВХранилище = "";
		Если ПустоеЗначениеРеквизита(RulesFileName, "RulesFileName", Элементы.RulesFileName.Заголовок) Тогда
			Возврат;
		КонецЕсли;

		ПрочитатьПравилаОбменаЗавершение(Истина, АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения, Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПравилаОбменаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда

		АдресФайлаПравилВХранилище = Адрес;

		ВыполнитьЗагрузкуПравилОбмена(Адрес, ВыбранноеИмяФайла);

		Если Object.ErrorFlag Тогда

			УстановитьПризнакЗагрузкиПравил(Ложь);

		Иначе

			УстановитьПризнакЗагрузкиПравил(Истина);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура UT_WebServiceConnectionTest(Команда)
	Путь=Object.UT_DestinationPublicationAddress + "/hs/tools-ui-1c/exchange";

	ДопПараметры=Новый Структура;
	ДопПараметры.Вставить("Таймаут", 10);

	Аутентификация=Новый Структура;
	Аутентификация.Вставить("Пользователь", Object.InfobaseConnectionUsername);
	Аутентификация.Вставить("Пароль", Object.InfobaseConnectionPassword);
	ДопПараметры.Вставить("Аутентификация", Аутентификация);

	Попытка
		РезультатПодключения=УИ_КоннекторHTTP.Get(Путь, , ДопПараметры);
		РезультатПодключения=УИ_КоннекторHTTP.КакТекст(РезультатПодключения);
	Исключение
		РезультатПодключения=Неопределено;
		СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	Если РезультатПодключения = "OK" Тогда
		ПоказатьПредупреждение( , "Тест подключения пройден успешно");
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Attachable_ExecuteToolsCommonCommand(Команда) 
	UT_CommonClient.Attachable_ExecuteToolsCommonCommand(ЭтотОбъект, Команда);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Открывает файл обмена во внешнем приложении.
//
// Parameters:
//  
// 
&НаКлиенте
Процедура ОткрытьВПриложении(ИмяФайла, СтандартнаяОбработка = Ложь)

	СтандартнаяОбработка = Ложь;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения);

	Файл = Новый Файл(ИмяФайла);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОпределенияСуществованияФайла", ЭтотОбъект,
		ДополнительныеПараметры);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);

КонецПроцедуры

// Продолжение процедуры (см. выше).
&НаКлиенте
Процедура ПослеОпределенияСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт

	Если Существует Тогда
		НачатьЗапускПриложения(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ИмяФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()

	Object.ExchangeRulesVersion = "";
	Object.DataExportDate = "";
	ExportPeriodPresentation = "";

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДоступностьЭлементовУправленияТранзакциями()

	Элементы.UseTransactions.Доступность = Не Object.DebugModeFlag;

	Элементы.ObjectsPerTransaction.Доступность = Object.UseTransactions;

КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьФайлПриИзмененииЗначения()

	Если Object.ArchiveFile Тогда
		DataFileName = СтрЗаменить(DataFileName, ".xml", ".zip");
	Иначе
		DataFileName = СтрЗаменить(DataFileName, ".zip", ".xml");
	КонецЕсли;

	Элементы.ExchangeFileCompressionPassword.Доступность = Object.ArchiveFile;

КонецПроцедуры

&НаСервере
Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)

	Для Каждого Строка Из Дерево Цикл

		Если Строка.IsFolder Тогда

			УстановитьУзелОбменаУСтрокДерева(Строка.ПолучитьЭлементы(), УзелОбмена);

		Иначе

			Строка.ExchangeNodeRef = УзелОбмена;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ИменаФайловПравилИОбменаСовпадают()

	Если ВРег(СокрЛП(RulesFileName)) = ВРег(СокрЛП(DataFileName)) Тогда

		СообщитьПользователю(НСтр("ru = 'Файл правил обмена не может совпадать с файлом данных.
								  |Выберите другой файл для выгрузки данных.'"));
		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции

// Заполняет дерево метаданных, доступных для удаления.
&НаСервере
Процедура ЗаполнитьСписокТиповДоступныхДляУдаления()

	ДеревоДанных = РеквизитФормыВЗначение("DataToDelete");

	ДеревоДанных.Строки.Очистить();

	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Presentation = НСтр("ru = 'Справочники'");

	Для Каждого ОбъектМД Из Метаданные.Справочники Цикл

		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Presentation = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "СправочникСсылка." + ОбъектМД.Имя;

	КонецЦикла;

	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Presentation = НСтр("ru = 'Планы видов характеристик'");

	Для Каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл

		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Presentation = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "ПланВидовХарактеристикСсылка." + ОбъектМД.Имя;

	КонецЦикла;

	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Presentation = НСтр("ru = 'Документы'");

	Для Каждого ОбъектМД Из Метаданные.Документы Цикл

		Если Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Presentation = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "ДокументСсылка." + ОбъектМД.Имя;

	КонецЦикла;

	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Presentation = "РегистрыСведений";

	Для Каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл

		Если Не ПравоДоступа("Изменение", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;

		Подчинен = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		Если Подчинен Тогда
			Продолжить;
		КонецЕсли
		;

		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Presentation = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "РегистрСведенийЗапись." + ОбъектМД.Имя;

	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоДанных, "DataToDelete");

КонецПроцедуры

// Возвращает версию обработки.
&НаСервере
Функция ВерсияОбъектаСтрокойНаСервере()

	Возврат РеквизитФормыВЗначение("Object").ВерсияОбъектаСтрокой();

КонецФункции

&НаКлиенте
Процедура ВыполнитьЗагрузкуПравилОбмена(АдресФайлаПравилВХранилище = "", ИмяФайлаДляРасширения = "")

	Object.ErrorFlag = Ложь;

	ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения);

	Если Object.ErrorFlag Тогда

		УстановитьПризнакЗагрузкиПравил(Ложь);

	Иначе

		УстановитьПризнакЗагрузкиПравил(Истина);
		РазвернутьСтрокиДерева(Object.ExportRulesTable, Элементы.ExportRulesTable, "Check");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиДерева(ДеревоДанных, ПредставлениеНаФорме, ИмяФлажка)

	СтрокиДерева = ДеревоДанных.ПолучитьЭлементы();

	Для Каждого Строка Из СтрокиДерева Цикл

		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		ПредставлениеНаФорме.Развернуть(ИдентификаторСтроки, Ложь);
		ВключитьРодителяЕслиВключеныПодчиненные(Строка, ИмяФлажка);

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВключитьРодителяЕслиВключеныПодчиненные(СтрокаДерева, ИмяФлажка)

	Включить = СтрокаДерева[ИмяФлажка];

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл

		Если ПодчиненнаяСтрока[ИмяФлажка] = 1 Тогда

			Включить = 1;

		КонецЕсли;

		Если ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда

			ВключитьРодителяЕслиВключеныПодчиненные(ПодчиненнаяСтрока, ИмяФлажка);

		КонецЕсли;

	КонецЦикла;

	СтрокаДерева[ИмяФлажка] = Включить;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()

	Object.StartDate = ExportPeriod.ДатаНачала;
	Object.EndDate = ExportPeriod.ДатаОкончания;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПравилаОбменаИПараметрыНаСервере(АдресФайлаПравилВХранилище, ИмяФайлаДляРасширения)

	ИмяФайлаПравилОбмена = ИмяФайлаНаСервереИлиКлиенте(RulesFileName, АдресФайлаПравилВХранилище,
		ИмяФайлаДляРасширения);

	Если ИмяФайлаПравилОбмена = Неопределено Тогда

		Возврат;

	Иначе

		Object.ExchangeRulesFileName = ИмяФайлаПравилОбмена;

	КонецЕсли;

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");
	ОбъектДляСервера.ExportRulesTable = РеквизитФормыВЗначение("Object.ExportRulesTable");
	ОбъектДляСервера.ParametersSettingsTable = РеквизитФормыВЗначение("Object.ParametersSettingsTable");

	ОбъектДляСервера.ЗагрузитьПравилаОбмена();
	ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();
	ОбъектДляСервера.Parameters.Очистить();
	Object.ErrorFlag = ОбъектДляСервера.ErrorFlag;

	Если IsClient Тогда

		УдалитьФайлы(Object.ExchangeRuleFileName);

	КонецЕсли;

	ЗначениеВРеквизитФормы(ОбъектДляСервера.ExportRulesTable, "Object.ExportRulesTable");
	ЗначениеВРеквизитФормы(ОбъектДляСервера.ParametersSettingsTable, "Object.ParametersSettingsTable");

КонецПроцедуры

// Открывает диалог выбора файла.
//
&НаКлиенте
Процедура ВыборФайла(Элемент, ОбъектХранения, ИмяСвойства, ПроверятьСуществование, Знач РасширениеПоУмолчанию = "xml",
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда

		ДиалогВыбораФайла.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение = "txt";

	ИначеЕсли Object.ExchangeMode = "Export" Тогда

		Если АрхивироватьФайлДанных Тогда

			ДиалогВыбораФайла.Фильтр = "Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "zip";

		ИначеЕсли ВыборФайлаПравил Тогда

			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "xml";

		Иначе

			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";

		КонецЕсли;

	Иначе
		Если ВыборФайлаПравил Тогда
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";
		Иначе
			ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение = "xml";
		КонецЕсли;
	КонецЕсли;

	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбъектХранения", ОбъектХранения);
	ДополнительныеПараметры.Вставить("ИмяСвойства", ИмяСвойства);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);

	Оповещение = Новый ОписаниеОповещения("ДиалогВыбораФайлаОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

// Parameters:
//   ВыбранныеФайлы - Массив из Строка - результат выбора файла.
//   ДополнительныеПараметры - Структура - произвольные дополнительные параметры:
//     * ОбъектХранения - Структура, ФормаКлиентскогоПриложения - приемник для хранения свойства.
//     * ИмяСвойства - Строка - имя свойства объекта хранения.
//     * Элемент - ПолеФормы - источник события выбора файла.
//
&НаКлиенте
Процедура ДиалогВыбораФайлаОбработкаВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.ОбъектХранения[ДополнительныеПараметры.ИмяСвойства] = ВыбранныеФайлы[0];

	Элемент = ДополнительныеПараметры.Элемент;

	Если Элемент = Элементы.RulesFileName Тогда
		ИмяФайлаПравилПриИзменении(Элемент);
	ИначеЕсли Элемент = Элементы.ExchangeFileName Тогда
		ИмяФайлаОбменаПриИзменении(Элемент);
	ИначеЕсли Элемент = Элементы.DataFileName Тогда
		ИмяФайлаДанныхПриИзменении(Элемент);
	ИначеЕсли Элемент = Элементы.ImportRulesFileName Тогда
		ИмяФайлаПравилЗагрузкиПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПодключениеКИБПриемникуНаСервере()

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Object);
	РезультатПодключения = ОбъектДляСервера.ВыполнитьПодключениеКИБПриемнику();

	Если РезультатПодключения <> Неопределено Тогда

		СообщитьПользователю(НСтр("ru = 'Подключение успешно установлено.'"));

	КонецЕсли;

КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Parameters:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекСтрока, ИмяФлажка)

	Подчиненные = ТекСтрока.ПолучитьЭлементы();

	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из Подчиненные Цикл

		Строка[ИмяФлажка] = ТекСтрока[ИмяФлажка];

		УстановитьПометкиПодчиненных(Строка, ИмяФлажка);

	КонецЦикла;

КонецПроцедуры

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки.
//
// Parameters:
//  ТекСтрока      - Строка дерева значений.
// 
&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекСтрока, ИмяФлажка)

	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСостояние = Родитель[ИмяФлажка];

	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;

	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Если Строка[ИмяФлажка] = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли Строка[ИмяФлажка] = 1 Или Строка[ИмяФлажка] = 2 Тогда
			НайденыВключенные  = Истина;
		КонецЕсли;
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;

	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[ИмяФлажка] = Включить;
		УстановитьПометкиРодителей(Родитель, ИмяФлажка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОткрытьФайлЗагрузкиНаСервере(АдресФайла)

	Если IsClient Тогда

		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла); // ДвоичныеДанные
		АдресНаСервере = ПолучитьИмяВременногоФайла(".xml");
		// Удаление временного файла происходит не через УдалитьФайлы(АдресНаСервере), а через
		// УдалитьФайлы(Object.ExchangeFileName) далее.
		ДвоичныеДанные.Записать(АдресНаСервере);
		Object.ExchangeFileName = АдресНаСервере;

	Иначе

		ФайлНаСервере = Новый Файл(ExchangeFileName);

		Если Не ФайлНаСервере.Существует() Тогда

			СообщитьПользователю(НСтр("ru = 'Не найден файл обмена на сервере.'"), "ExchangeFileName");
			Возврат;

		КонецЕсли;

		Object.ExchangeFileName = ExchangeFileName;

	КонецЕсли;

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");

	ОбъектДляСервера.ОткрытьФайлЗагрузки(Истина);

	Object.StartDate = ОбъектДляСервера.StartDate;
	Object.EndDate = ОбъектДляСервера.EndDate;
	Object.DataExportDate = ОбъектДляСервера.DataExportDate;
	Object.ExchangeRulesVersion = ОбъектДляСервера.ExchangeRulesVersion;
	Object.Comment = ОбъектДляСервера.Comment;

КонецПроцедуры

// Удаляет помеченные строки дерева метаданных.
//
&НаСервере
Процедура УдалитьНаСервере()

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");
	ДеревоУдаляемыхДанных = РеквизитФормыВЗначение("DataToDelete");

	ОбъектДляСервера.ИнициализироватьМенеджерыИСообщения();

	Для Каждого СтрокаДерева Из ДеревоУдаляемыхДанных.Строки Цикл

		Для Каждого СтрокаМД Из СтрокаДерева.Строки Цикл

			Если Не СтрокаМД.Check Тогда
				Продолжить;
			КонецЕсли;

			ТипСтрокой = СтрокаМД.Метаданные;
			ОбъектДляСервера.УдалитьОбъектыТипа(ТипСтрокой);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Устанавливает узел обмена у строк дерева.
//
&НаСервере
Процедура УстановитьУзелОбменаУСтрокДереваНаСервере(УзелОбмена)

	УстановитьУзелОбменаУСтрокДерева(Object.ExportRulesTable.ПолучитьЭлементы(), УзелОбмена);

КонецПроцедуры

// Сохраняет значения параметров.
//
&НаСервере
Процедура СохранитьПараметрыНаСервере()

	ТаблицаПараметров = РеквизитФормыВЗначение("Object.ParametersSettingsTable");

	СохраняемыеПараметры = Новый Соответствие;

	Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
		СохраняемыеПараметры.Вставить(СтрокаТаблицы.Наименование, СтрокаТаблицы.Значение);
	КонецЦикла;

	ХранилищеСистемныхНастроек.Сохранить("УниверсальныйОбменДаннымиXML", "Parameters", СохраняемыеПараметры);

КонецПроцедуры

// Восстанавливает значения параметров.
//
&НаСервере
Процедура ВосстановитьПараметрыНаСервере()

	ТаблицаПараметров = РеквизитФормыВЗначение("Object.ParametersSettingsTable");
	ВосстановленныеПараметры = ХранилищеСистемныхНастроек.Загрузить("УниверсальныйОбменДаннымиXML", "Parameters");

	Если ТипЗнч(ВосстановленныеПараметры) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;

	Если ВосстановленныеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Парам Из ВосстановленныеПараметры Цикл

		ИмяПараметра = Парам.Ключ;

		СтрокаТаблицы = ТаблицаПараметров.Найти(Парам.Ключ, "Description");

		Если СтрокаТаблицы <> Неопределено Тогда

			СтрокаТаблицы.Value = Парам.Value;

		КонецЕсли;

	КонецЦикла;

	ЗначениеВРеквизитФормы(ТаблицаПараметров, "Object.ParametersSettingsTable");

КонецПроцедуры

// Интерактивная выгрузка данных.
//
&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормы()

	АдресФайла = "";
	ИмяФайлаДляРасширения = "";

	ДобавитьСтрокуКСпискуВыбора(Элементы.ExchangeFileName.СписокВыбора, ExchangeFileName, DataImportFromFile);

	Если IsClient Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьЗагрузкуИзФормыЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, , , УникальныйИдентификатор);

	Иначе

		Если ПустоеЗначениеРеквизита(ExchangeFileName, "ExchangeFileName", Элементы.ExchangeFileName.Заголовок) Тогда
			Возврат;
		КонецЕсли;

		ВыполнитьЗагрузкуИзФормыЗавершение(Истина, АдресФайла, ИмяФайлаДляРасширения, Неопределено);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзФормыЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда

		ВыполнитьЗагрузкуНаСервере(Адрес, ВыбранноеИмяФайла);

		ОткрытьДанныеПротоколовОбменаПриНеобходимости();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере(АдресФайла, ИмяФайлаДляРасширения)

	ИмяЗагружаемогоФайла = ИмяФайлаНаСервереИлиКлиенте(ExchangeFileName, АдресФайла, ИмяФайлаДляРасширения);

	Если ИмяЗагружаемогоФайла = Неопределено Тогда

		Возврат;

	Иначе

		Object.ExchangeFileName = ИмяЗагружаемогоФайла;

	КонецЕсли;

	Если Object.SafeImport Тогда
		Если ЭтоАдресВременногоХранилища(АдресФайлаПравилЗагрузкиВХранилище) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаПравилЗагрузкиВХранилище); // ДвоичныеДанные
			АдресНаСервере = ПолучитьИмяВременногоФайла("xml");
			// Удаление временного файла происходит не через УдалитьФайлы(АдресНаСервере), а через
			// УдалитьФайлы(Object.ExchangeRulesFileName) далее.
			ДвоичныеДанные.Записать(АдресНаСервере);
			Object.ExchangeRulesFileName = АдресНаСервере;
		Иначе
			СообщитьПользователю(НСтр("ru = 'Не указан файл правил для загрузки данных.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Object);
	ОбъектДляСервера.ВыполнитьЗагрузку();

	Попытка

		Если Не ПустаяСтрока(АдресФайла) Тогда
			УдалитьФайлы(ИмяЗагружаемогоФайла);
		КонецЕсли;

	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Универсальный обмен данными в формате XML'",
			ОбъектДляСервера.DefaultLanguageCode()), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
	КонецПопытки;

	ОбъектДляСервера.Parameters.Очистить();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Object");

	ПравилаЗагружены = Ложь;
	Элементы.FormExecuteExport.Доступность = Ложь;
	Элементы.ExportNoteLabel.Видимость = Истина;
	Элементы.ExportDebugAvailableGroup.Доступность = Ложь;

КонецПроцедуры

&НаСервере
Функция ИмяФайлаНаСервереИлиКлиенте(ИмяРеквизита, Знач АдресФайла, Знач ИмяФайлаДляРасширения = ".xml",
	СоздатьНовый = Ложь, ПроверятьСуществование = Истина)

	ИмяФайла = Неопределено;

	Если IsClient Тогда

		Если СоздатьНовый Тогда

			Расширение = ?(Object.ArchiveFile, ".zip", ".xml");

			ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);

		Иначе

			Расширение = РасширениеФайла(ИмяФайлаДляРасширения);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла); // ДвоичныеДанные
			АдресНаСервере = ПолучитьИмяВременногоФайла(Расширение);
			// Удаление временного файла происходит не через УдалитьФайлы(АдресНаСервере),
			// а через УдалитьФайлы(Object.ExchangeRulesFileName) и УдалитьФайлы(Object.ExchangeFileName) далее.
			ДвоичныеДанные.Записать(АдресНаСервере);
			ИмяФайла = АдресНаСервере;

		КонецЕсли;

	Иначе

		ФайлНаСервере = Новый Файл(ИмяРеквизита);

		Если Не ФайлНаСервере.Существует() И ПроверятьСуществование Тогда

			СообщитьПользователю(НСтр("ru = 'Указанный файл не существует.'"));

		Иначе

			ИмяФайла = ИмяРеквизита;

		КонецЕсли;

	КонецЕсли;

	Возврат ИмяФайла;

КонецФункции

&НаСервере
Функция РасширениеФайла(Знач ИмяФайла)

	ПозицияТочки = ПоследнийРазделитель(ИмяФайла);

	Расширение = Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияТочки + 1);

	Возврат Расширение;

КонецФункции

&НаСервере
Функция ПоследнийРазделитель(СтрокаСРазделителем, Разделитель = ".")

	ДлинаСтроки = СтрДлина(СтрокаСРазделителем);

	Пока ДлинаСтроки > 0 Цикл

		Если Сред(СтрокаСРазделителем, ДлинаСтроки, 1) = Разделитель Тогда

			Возврат ДлинаСтроки;

		КонецЕсли;

		ДлинаСтроки = ДлинаСтроки - 1;

	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ВыполнитьВыгрузкуИзФормы()
	
	// Запомним файл правил и файл выгрузки.
	ДобавитьСтрокуКСпискуВыбора(Элементы.RulesFileName.СписокВыбора, RulesFileName, ExchangeRules);

	Если Не Object.DirectReadFromDestinationIB И Не IsClient Тогда

		Если ИменаФайловПравилИОбменаСовпадают() Тогда
			Возврат;
		КонецЕсли;

		ДобавитьСтрокуКСпискуВыбора(Элементы.DataFileName.СписокВыбора, DataFileName, DataExportToFile);

	КонецЕсли;

	АдресФайлаДанныхВХранилище = ВыполнитьВыгрузкуНаСервере();

	Если АдресФайлаДанныхВХранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РазвернутьСтрокиДерева(Object.ExportRulesTable, Элементы.ExportRulesTable, "Check");

	Если IsClient И Не DirectExport И Не Object.ErrorFlag Тогда

		ИмяСохраняемогоФайла = ?(Object.ArchiveFile, НСтр("ru = 'Файл выгрузки.zip'"), НСтр(
			"ru = 'Файл выгрузки.xml'"));

		ПолучитьФайл(АдресФайлаДанныхВХранилище, ИмяСохраняемогоФайла);

	КонецЕсли
	;

	ОткрытьДанныеПротоколовОбменаПриНеобходимости();

КонецПроцедуры

&НаСервере
Функция ВыполнитьВыгрузкуНаСервере()

	Object.ExchangeRulesFileName = ИмяФайлаНаСервереИлиКлиенте(RulesFileName, АдресФайлаПравилВХранилище);

	Если Не DirectExport Тогда

		ИмяВременногоФайлаДанных = ИмяФайлаНаСервереИлиКлиенте(DataFileName, "", , Истина, Ложь);

		Если ИмяВременногоФайлаДанных = Неопределено Тогда

			СообщитьПользователю(НСтр("ru = 'Не определен файл данных'"));
			Возврат Неопределено;

		Иначе

			Object.ExchangeFileName = ИмяВременногоФайлаДанных;

		КонецЕсли;
	//УИ++
	ИначеЕсли DirectExport = 2 Тогда
		ИмяВременногоФайлаДанных=ПолучитьИмяВременногоФайла(".xml");
		Object.ExchangeFileName = ИмяВременногоФайлаДанных;
		Object.УИ_ВыгрузкаЧерезВебСервис=Истина;
	//УИ--

	КонецЕсли;

	ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Object.ExportRulesTable");
	ТаблицаНастройкиПараметров = РеквизитФормыВЗначение("Object.ParametersSettingsTable");

	ОбъектДляСервера = РеквизитФормыВЗначение("Object");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Object);

	Если ОбъектДляСервера.HandlersDebugModeFlag Тогда

		Отказ = Ложь;

		Файл = Новый Файл(ОбъектДляСервера.EventHandlerExternalDataProcessorFileName);

		Если Не Файл.Существует() Тогда

			СообщитьПользователю(НСтр("ru = 'Файл внешней обработки отладчиков событий не существует на сервере'"));
			Возврат Неопределено;

		КонецЕсли;

		ОбъектДляСервера.ВыгрузитьОбработчикиСобытий(Отказ);

		Если Отказ Тогда

			СообщитьПользователю(НСтр("ru = 'Не удалось выгрузить обработчики событий'"));
			Возврат "";

		КонецЕсли;

	Иначе

		ОбъектДляСервера.ЗагрузитьПравилаОбмена();
		ОбъектДляСервера.ИнициализироватьПервоначальныеЗначенияПараметров();

	КонецЕсли;

	ИзменитьДеревоПравилВыгрузки(ОбъектДляСервера.ExportRulesTable.Строки, ТаблицаПравилВыгрузки.Строки);
	ИзменитьТаблицуПараметров(ОбъектДляСервера.ParametersSettingsTable, ТаблицаНастройкиПараметров);

	ОбъектДляСервера.ВыполнитьВыгрузку();
	ОбъектДляСервера.ExportRulesTable = РеквизитФормыВЗначение("Object.ExportRulesTable");

	Если IsClient И Не DirectExport Тогда

		АдресФайлаДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Object.ExchangeFileName),
			УникальныйИдентификатор);
		УдалитьФайлы(Object.ExchangeFileName);
	
	//УИ++
	ИначеЕсли DirectExport = 2 Тогда
		АдресФайлаДанных = "";
		УдалитьФайлы(Object.ExchangeFileName);
			
	//УИ--	

	Иначе

		АдресФайлаДанных = "";

	КонецЕсли;

	Если IsClient Тогда

		УдалитьФайлы(ОбъектДляСервера.ExchangeRulesFileName);

	КонецЕсли;

	ОбъектДляСервера.Parameters.Очистить();
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Object");

	Возврат АдресФайлаДанных;

КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандОтладки()
	;
	
	Элементы.ImportDebugSetup.Доступность = Object.HandlersDebugModeFlag;
	Элементы.ExportDebugSetup.Доступность = Object.HandlersDebugModeFlag;

КонецПроцедуры

// Изменяет дерево DER в соответствии с деревом на форме.
//
&НаСервере
Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)

	КолонкаВключить = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Check");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВключить, "Check");
	КолонкаУзел = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ExchangeNodeRef");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаУзел, "ExchangeNodeRef");

	КолонкаИспользоватьОтбор = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("UseFilter");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаИспользоватьОтбор, "UseFilter");

	КолонкаОтбор = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Filter");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаОтбор, "Filter");

	КолонкаИмяМетаданных = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("ИмяМетаданных");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаИмяМетаданных, "ИмяМетаданных");
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл

		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);

		ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);

	КонецЦикла;

КонецПроцедуры

// Изменяет таблицу параметров в соответствии с таблицей на форме.
//
&НаСервере
Процедура ИзменитьТаблицуПараметров(ТаблицаБазы, ТаблицаФормы)

	КолонкаНаименование = ТаблицаФормы.ВыгрузитьКолонку("Description");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаНаименование, "Description");
	КолонкаЗначение = ТаблицаФормы.ВыгрузитьКолонку("Value");
	ТаблицаБазы.ЗагрузитьКолонку(КолонкаЗначение, "Value");

КонецПроцедуры

&НаКлиенте
Процедура ПрямаяВыгрузкаПриИзмененииЗначения()

	ПараметрыВыгрузки = Элементы.ExportParameters;
	
	//УИ++
//	ExportParameters.ТекущаяСтраница = ?(DirectExport = 0,
//										  ExportParameters.ПодчиненныеЭлементы.ExportToFile,
//										  ExportParameters.ПодчиненныеЭлементы.ExportToDestinationIB);
	Если DirectExport = 0 Тогда
		ПараметрыВыгрузки.ТекущаяСтраница=ПараметрыВыгрузки.ПодчиненныеЭлементы.ExportToFile;
	ИначеЕсли DirectExport = 1 Тогда
		ПараметрыВыгрузки.ТекущаяСтраница=ПараметрыВыгрузки.ПодчиненныеЭлементы.ExportToDestinationIB;
	Иначе
		ПараметрыВыгрузки.ТекущаяСтраница=ПараметрыВыгрузки.ПодчиненныеЭлементы.UT_ExportViaWebServiceGroup;
	КонецЕсли;

	Object.УИ_ВыгрузкаЧерезВебСервис=(DirectExport = 2);
	//УИ--

	Object.DirectReadFromDestinationIB = (DirectExport = 1);

	ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ТипИнформационнойБазыДляПодключенияПриИзмененииЗначения()

	ТипБазы = Элементы.InfobaseType;
	ТипБазы.ТекущаяСтраница = ?(Object.ConnectedInfobaseType, ТипБазы.ПодчиненныеЭлементы.ФайловаяБаза,
		ТипБазы.ПодчиненныеЭлементы.БазаНаСервере);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКСпискуВыбора(СписокСохраняемыхЗначений, ЗначениеСохранения, ИмяПараметраДляСохранения)

	Если ПустаяСтрока(ЗначениеСохранения) Тогда
		Возврат;
	КонецЕсли;

	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ЗначениеСохранения);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;

	СписокСохраняемыхЗначений.Вставить(0, ЗначениеСохранения);

	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;

	ИмяПараметраДляСохранения = СписокСохраняемыхЗначений;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОтладкиОбработчиков(ОбработчикиСобытийИзФайлаПравил)

	ИмяОбработки = Лев(ИмяФормы, ПоследнийРазделитель(ИмяФормы));
	ИмяВызываемойФормы = ИмяОбработки + "УправляемаяФормаНастройкиОтладкиОбработчиков";

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("EventHandlerExternalDataProcessorFileName",
		Object.EventHandlerExternalDataProcessorFileName);
	ПараметрыФормы.Вставить("AlgorithmDebugMode", Object.AlgorithmDebugMode);
	ПараметрыФормы.Вставить("ExchangeRulesFileName", Object.ExchangeRuleFileName);
	ПараметрыФормы.Вставить("ExchangeFileName", Object.ExchangeFileName);
	ПараметрыФормы.Вставить("ReadEventHandlersFromExchangeRulesFile", ОбработчикиСобытийИзФайлаПравил);
	ПараметрыФормы.Вставить("ИмяОбработки", ИмяОбработки);

	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Обработчик = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОтладкиОбработчиковЗавершение", ЭтотОбъект,
		ОбработчикиСобытийИзФайлаПравил);

	ОткрытьФорму(ИмяВызываемойФормы, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОтладкиОбработчиковЗавершение(ПараметрыОтладки, ОбработчикиСобытийИзФайлаПравил) Экспорт

	Если ПараметрыОтладки <> Неопределено Тогда

		ЗаполнитьЗначенияСвойств(Object, ПараметрыОтладки);

		Если IsClient Тогда

			Если ОбработчикиСобытийИзФайлаПравил Тогда

				ИмяФайла = Object.ExchangeRulesFileName;

			Иначе

				ИмяФайла = Object.ExchangeFileName;

			КонецЕсли;

			Оповещение = Новый ОписаниеОповещения("ОткрытьФормуНастройкиОтладкиОбработчиковЗавершениеУдалениеФайлов",
				ЭтотОбъект);
			НачатьУдалениеФайлов(Оповещение, ИмяФайла);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОтладкиОбработчиковЗавершениеУдалениеФайлов(ДополнительныеПараметры) Экспорт

	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасположениеФайла()

	Элементы.RulesFileName.Видимость = Не IsClient;
	Элементы.DataFileName.Видимость = Не IsClient;
	Элементы.ExchangeFileName.Видимость = Не IsClient;
	Элементы.ГруппаБезопаснаяЗагрузка.Видимость = Не IsClient;

	УстановитьПризнакЗагрузкиПравил(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимОбработки(РежимРаботы)

	ГруппаРежима = КоманднаяПанель.ПодчиненныеЭлементы.ProcessingMode.ПодчиненныеЭлементы;

	ГруппаРежима.FormAtClient.Check = РежимРаботы;
	ГруппаРежима.FormAtServer.Check = Не РежимРаботы;

	КоманднаяПанель.ПодчиненныеЭлементы.ProcessingMode.Заголовок = ?(РежимРаботы, НСтр(
		"ru = 'Режим работы (на клиенте)'"), НСтр("ru = 'Режим работы (на сервере)'"));

	Object.ExportRulesTable.ПолучитьЭлементы().Очистить();
	Object.ParametersSettingsTable.Очистить();

	ИзменитьРасположениеФайла();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДанныеПротоколовОбменаПриНеобходимости()

	Если Не Object.OpenExchangeLogAfterExecutingOperations Тогда
		Возврат;
	КонецЕсли;

#Если Не ВебКлиент Тогда

	Если Не ПустаяСтрока(Object.ExchangeLogFileName) Тогда
		ОткрытьВПриложении(Object.ExchangeLogFileName);
	КонецЕсли;

	Если Object.DirectReadFromDestinationIB Тогда

		Object.ImportExchangeLogFileName = ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединенияНаСервере();

		Если Не ПустаяСтрока(Object.ImportExchangeLogFileName) Тогда
			ОткрытьВПриложении(Object.ImportExchangeLogFileName);
		КонецЕсли;

	КонецЕсли;

#КонецЕсли

КонецПроцедуры

&НаСервере
Функция ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединенияНаСервере()

	Возврат РеквизитФормыВЗначение("Object").ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединения();

КонецФункции

&НаКлиенте
Функция ПустоеЗначениеРеквизита(Реквизит, ПутьКДанным, Заголовок)

	Если ПустаяСтрока(Реквизит) Тогда

		ТекстСообщения = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Заголовок);

		СообщитьПользователю(ТекстСообщения, ПутьКДанным);

		Возврат Истина;

	Иначе

		Возврат Ложь;

	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УстановитьПризнакЗагрузкиПравил(Признак)

	ПравилаЗагружены = Признак;
	Элементы.FormExecuteExport.Доступность = Признак;
	Элементы.ExportNoteLabel.Видимость = Не Признак;
	Элементы.ExportDebugGroup.Доступность = Признак;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаУдаленияРегистрацииИзменений()

	Если ПустаяСтрока(ChangesRegistrationDeletionTypeForExportedExchangeNodes) Тогда
		Object.ChangesRegistrationDeletionTypeForExportedExchangeNodes = 0;
	Иначе
		Object.ChangesRegistrationDeletionTypeForExportedExchangeNodes = Число(
			ChangesRegistrationDeletionTypeForExportedExchangeNodes);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, ПутьКДанным = "")

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.ПутьКДанным = ПутьКДанным;
	Сообщение.Сообщить();

КонецПроцедуры

// Возвращает Истина, если клиентское приложение запущено под управлением ОС Windows.
//
// Возвращаемое значение:
//  Булево -  Если нет клиентского приложения, возвращается Ложь.
//
&НаКлиенте
Функция ЭтоWindowsКлиент()

	СистемнаяИнформация = Новый СистемнаяИнформация;

	ЭтоWindowsКлиент = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Или СистемнаяИнформация.ТипПлатформы
		= ТипПлатформы.Windows_x86_64;

	Возврат ЭтоWindowsКлиент;

КонецФункции

&НаСервере
Процедура ПроверитьВерсиюИРежимСовместимостиПлатформы()

	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3" И (Метаданные.РежимСовместимости
		= Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Или (Метаданные.РежимСовместимости
		<> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1 И Метаданные.РежимСовместимости
		<> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13 И Метаданные.РежимСовместимости
		<> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"] И Метаданные.РежимСовместимости
		<> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"] И Метаданные.РежимСовместимости
		<> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда

		ВызватьИсключение НСтр("ru = 'Обработка предназначена для запуска на версии платформы
							   |1С:Предприятие 8.3 с отключенным режимом совместимости или выше'");

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимБезопаснаяЗагрузка(Интерактивно = Истина)

	Элементы.ГруппаБезопаснаяЗагрузка.Доступность = Object.SafeImport;

	ЧерезХранилище = IsClient;
#Если ВебКлиент Тогда
	ЧерезХранилище = Истина;
#КонецЕсли

	Если Object.SafeImport И ЧерезХранилище Тогда
		ПоместитьФайлПравилЗагрузкиВХранилище();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлПравилЗагрузкиВХранилище()

	ЧерезХранилище = IsClient;
#Если ВебКлиент Тогда
	ЧерезХранилище = Истина;
#КонецЕсли

	АдресФайла = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлПравилЗагрузкиВХранилищеЗавершить", ЭтотОбъект);

	Если ЧерезХранилище Тогда
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, , , УникальныйИдентификатор);
	Иначе
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, ImportRulesFileName, Ложь, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьФайлПравилЗагрузкиВХранилищеЗавершить(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		АдресФайлаПравилЗагрузкиВХранилище = Адрес;
	КонецЕсли;

КонецПроцедуры
&НаСервере
Функция ИнициализироватьКомпоновщикНастроекОтбораПравилВыгрузки(Знач ИндексСтроки = Неопределено,
	Знач СтрокаДереваМетаданных = Неопределено)

	Если СтрокаДереваМетаданных = Неопределено Тогда
		СтрокаДереваМетаданных = Object.ExportRulesTable.НайтиПоИдентификатору(ИндексСтроки);
	КонецЕсли;

	ОбъектОбработка = РеквизитФормыВЗначение("Object");
	ТекстЗапроса = ОбъектОбработка.ПолучитьТекстЗапросаПоСтроке(СтрокаДереваМетаданных, Ложь);
	СхемаКомпоновкиДанных = ОбъектОбработка.СхемаКомпоновкиДанных(ТекстЗапроса);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(
		СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

	ЕстьДополнительныеОтборы  = СтрокаДереваМетаданных.Filter.Элементы.Количество() <> 0;

	Если ЕстьДополнительныеОтборы Тогда
		UT_CommonClientServer.CopyItems(КомпоновщикНастроек.Настройки.Отбор,
			СтрокаДереваМетаданных.Отбор);
	КонецЕсли;

	Возврат КомпоновщикНастроек;

КонецФункции
#КонецОбласти