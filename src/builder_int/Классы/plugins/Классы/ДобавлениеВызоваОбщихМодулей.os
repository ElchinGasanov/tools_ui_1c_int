Перем Типы;
Перем Токены;
Перем Исходник;
Перем ТаблицаТокенов;
Перем ТаблицаОшибок;
Перем ТаблицаЗамен;
Перем Стек;
Перем Счетчики;
Перем Директивы;
Перем Аннотации;
Перем СимволыПрепроцессора;

Перем Результат;
Перем ПрефиксПеременных;
Перем ЭтоМодульФормы;
Перем ЭтоГлавнаяОбработка;
Перем ЭтоКлиентскийОбщийМодуль;
Перем ТекстСтроковыхФункцийРежимСовместимости;
Перем ОписаниеРасширения;

// Перем КаталогИсходныхФайловРасширения;

Перем УстановилиОбъявлениеСпискаПеременных;

Процедура Открыть(Парсер, Параметры) Экспорт
	
	Типы = Парсер.Типы();
	Токены = Парсер.Токены();
	Исходник = Парсер.Исходник();
	ТаблицаТокенов = Парсер.ТаблицаТокенов();
	ТаблицаОшибок = Парсер.ТаблицаОшибок();
	ТаблицаЗамен = Парсер.ТаблицаЗамен();
	Стек = Парсер.Стек();
	Счетчики = Парсер.Счетчики();
	Директивы = Парсер.Директивы();
	Аннотации = Парсер.Аннотации();
	СимволыПрепроцессора = Парсер.СимволыПрепроцессора();
	
	Результат = Новый Массив;
	
	ЭтоМодульФормы = Параметры.ЭтоМодульФормы;
	ЭтоГлавнаяОбработка = Параметры.ЭтоГлавнаяОбработка;
	ПрефиксПеременных = Параметры.ПрефиксПеременныхИПроцедур;
	ЭтоКлиентскийОбщийМодуль = Параметры.ЭтоКлиентскийОбщийМодуль;
	
	Если ЭтоМодульФормы Тогда
		ТекстСтроковыхФункцийРежимСовместимости= Параметры.ТекстыСтроковыхФункцияДляСовместимости.МодульФормы;
	Иначе
		ТекстСтроковыхФункцийРежимСовместимости= Параметры.ТекстыСтроковыхФункцияДляСовместимости.Модуль;
	КонецЕсли;
	
	ОписаниеРасширения= Параметры.ОписаниеРасширения;
КонецПроцедуры

Функция Закрыть() Экспорт
	// ...
	Возврат СтрСоединить(Результат);
КонецФункции

Функция Подписки() Экспорт
	Перем Подписки;
	Подписки = Новый Массив;
	Подписки.Добавить("ПосетитьОбъявления");
	Подписки.Добавить("ПосетитьМодуль");
	Возврат Подписки;
КонецФункции

#Область РеализацияПодписок

Процедура ПосетитьОбъявлениеСпискаПеременныхМодуля(Объявление) Экспорт
	Если УстановилиОбъявлениеСпискаПеременных = Истина Тогда
		Возврат;
	КонецЕсли;
	УстановилиОбъявлениеСпискаПеременных=Истина;
	
	КодДляВставки = "
	// |&AtClient
	// |Var "+ПрефиксПеременных+"МестоположениеОбработки;
	|" + ?(ЭтоМодульФормы,"&AtClient", "") + "
	|Var " + ПрефиксПеременных + "CommonModuleCache;
	|";
	ПозицияВставки = Объявление.Начало.Позиция;
	
	Если Объявление.Тип = Типы.ОбъявлениеСпискаПеременныхМодуля Тогда
		Если Объявление.Директивы.Количество() > 0 Тогда
			ПозицияВставки = Объявление.Директивы[0].Начало.Позиция;
		КонецЕсли;
	ИначеЕсли Объявление.Тип = Типы.ОбъявлениеМетода Тогда
		Если Объявление.Сигнатура.Директивы.Количество() > 0 Тогда
			ПозицияВставки = Объявление.Сигнатура.Директивы[0].Начало.Позиция;
		КонецЕсли;
	КонецЕсли;
	
	Вставка(КодДляВставки, ПозицияВставки);
КонецПроцедуры // ПосетитьОбъявлениеСпискаПеременныхМодуля()

Процедура ПосетитьОбъявления(Объявления) Экспорт
	ЕстьОбъявлениеПеременныхМодуля=Ложь;
	Для Каждого ТекОбъявление Из Объявления Цикл
		Если ТекОбъявление.Тип = Типы.ОбъявлениеСпискаПеременныхМодуля Тогда
			ПосетитьОбъявлениеСпискаПеременныхМодуля(ТекОбъявление);
			ЕстьОбъявлениеПеременныхМодуля=Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОбъявлениеПеременныхМодуля и Объявления.Количество()>0 Тогда
		ПосетитьОбъявлениеСпискаПеременныхМодуля(Объявления[0]);
	КонецЕсли;
КонецПроцедуры // ПосетитьОбъявления()

Функция ТекстОпределенияПеременныхОбщихМодулей()
	
	Если ЭтоМодульФормы Тогда
		ТекстПроцедур = "
		|&AtClientAtServerNoContext
		|Function " + ПрефиксПеременных + "CommonModulesByName(ModuleName, UT_GENERATION_CommonModuleCache=Undefined, Form = Undefined)
		|";
		
	Иначе
		ТекстПроцедур = "
		|Function " + ПрефиксПеременных + "CommonModulesByName(ModuleName)
		|";
		
	КонецЕсли;
	
	ТекстПроцедур = ТекстПроцедур + "
	|
	|	If UT_GENERATION_CommonModuleCache=Undefined Then
	|		UT_GENERATION_CommonModuleCache=New Map;
	|	EndIf;
	|
	|";
	Если ЭтоМодульФормы Тогда
		ТекстПроцедур = ТекстПроцедур + "
		|	#If Client Then
		|		If UT_GENERATION_CommonModuleCache[Lower(ModuleName)]<>Undefined Then
		|			Return UT_GENERATION_CommonModuleCache[Lower(ModuleName)];
		|		EndIf;
		|	#EndIf
		|
		| 	#If ThickClientManagedApplication Or ThickClientOrdinaryApplication  Then 
		|	If " + ПрефиксПеременных + "IsFileDatabse() Then
		|		CommonModule=ExternalDataProcessors.Create(ModuleName);
		|	Else
		|		CommonModule=GetForm(""ExternalDataProcessor.""+ModuleName+"".Form"",,,False);
		|	EndIf;
		|	UT_GENERATION_CommonModuleCache.Insert(Lower(ModuleName),CommonModule);
		|	#ElsIf Client Then
		|
		|	CommonModule=ПолучитьФорму(""ExternalDataProcessor.""+ModuleName+"".Form"",,,False);
		|	UT_GENERATION_CommonModuleCache.Insert(Lower(ModuleName),CommonModule);
		|	#Else
		|	CommonModule=ExternalDataProcessors.Create(ModuleName);
		|	#EndIf";
	Иначе
		
		Если ЭтоГлавнаяОбработка Тогда
			ТекстПроцедур = ТекстПроцедур + "
			|	If Не IsTempStorageURL(ThisObject.ИспользуемоеИмяФайла) Then
			|		Try
			|			CommonModule=ExternalDataProcessors.Create(ModuleName);
			|		Except
			|			" + ПрефиксПеременных + "ConnectCommonModules();
			|		EndTry;
			|	EndIf;
			|";
		КонецЕсли;
		ТекстПроцедур = ТекстПроцедур + "
		| 	CommonModule = ExternalDataProcessors.Create(ModuleName);
		|	UT_GENERATION_CommonModuleCache.Insert(Lower(ModuleName), CommonModule);
		|";
	КонецЕсли;
	ТекстПроцедур = ТекстПроцедур + "
	|
	|	Return CommonModule;
	|EndFunction
	|
	|" + ?(ЭтоМодульФормы, "&AtServerNoContext", "") + "
	|Function " + ПрефиксПеременных + "UT_LibraryPictures()
	|	LibraryAddress = UT_Common.CommonSettingsStorageLoad(UT_CommonClientServer.ObjectKeyInSettingsStorage(), ""LocalImageLibraryAddress"", , , 
	|		UserName());
	|
	|	Return GetFromTempStorage(LibraryAddress);
	|EndFunction
	|
	|// Returns a flag that the work is happening in the file database
	|" + ?(ЭтоМодульФормы,"&AtClientAtServerNoContext","") + "
	|Function " + ПрефиксПеременных + "IsFileDatabse() Export
	|	Return StrFind(InfoBaseConnectionString(), ""File="") > 0;
	|EndFunction
	|";
	
	ТекстПроцедур = ТекстПроцедур+ТекстСтроковыхФункцийРежимСовместимости + Символы.ПС;
	
	Если ЭтоМодульФормы Или ЭтоКлиентскийОбщийМодуль Тогда
		Если ЭтоМодульФормы Тогда
			ТекстПроцедур = ТекстПроцедур+"
			|&AtClient";
		ИначеЕсли ЭтоКлиентскийОбщийМодуль Тогда
			ТекстПроцедур = ТекстПроцедур+"
			|#If Client Then";
		КонецЕсли;
		
		ТекстПроцедур = ТекстПроцедур + "
		|Function " + ПрефиксПеременных + "UT_ApplicationParameters()
		|Windows = GetWindows();
		|
		|For Each ТекОкно In Windows Do
		|	For Each Form In ТекОкно.Содержимое Do
		|		If TypeOf(Form) <> UT_CommonClientServer.ManagedFormType() Then
		|			Continue;
		|		EndIf;
		|
		|		If Form.FormName = ""ExternalDataProcessor.UT_PortableUniversalTools.Form.Form"" Then
		|			Return Form.UT_ApplicationParameters_Portable;
		|		EndIf;
		|	EndDo;
		|EndDo;
		|
		|Return New Map;
		|
		|EndFunction
		|
		|";
		
		Если ЭтоКлиентскийОбщийМодуль Тогда
			ТекстПроцедур = ТекстПроцедур + "
			|#EndIf";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоМодульФормы И ЭтоГлавнаяОбработка Тогда
		ТекстПроцедур = ТекстПроцедур + "
		|	Function " + ПрефиксПеременных + "StructureOfCommonModules()
		|		Structure=New Structure;
		|";
		
		Для Каждого ОбщийМодуль Из ОписаниеРасширения.ОбщиеМодули Цикл
			ТекстПроцедур=ТекстПроцедур+"
			|		Structure.Insert(""" + ОбщийМодуль.Имя + """,""" + ОбщийМодуль.Имя + ".epf"");";
		КонецЦикла;
		
		ТекстПроцедур = ТекстПроцедур + "
		|		Return Structure;
		|	EndFunction
		|
		|	Procedure " + ПрефиксПеременных + "ConnectCommonModules()
		|		PathSeparator=GetPathSeparator();
		|
		|		ArrayName = _СтрРазделить(ThisObject.ИспользуемоеИмяФайла, GetPathSeparator());
		|		ArrayName.Delete(ArrayName.Count()-1);
		|		ArrayName.Add(""CommonModules"");
		|		
		|		UnsafeOperationProtectionDescription = New UnsafeOperationProtectionDescription;
		|		UnsafeOperationProtectionDescription.UnsafeOperationWarnings = False;
		|		
		|		CommonModulesDirectoryName = _СтрСоединить(ArrayName, PathSeparator);
		|		StructureOfCommonModules =" + ПрефиксПеременных + "StructureOfCommonModules();
		|		
		|		For Each KeyValue In StructureOfCommonModules Do
		|			ModuleFileName = CommonModulesDirectoryName + PathSeparator+KeyValue.Value;
		|			BinaryData = New BinaryData(ModuleFileName);
		|			Address = PutToTempStorage(BinaryData);
		|			ExternalDataProcessors.Connect(Address, ,False, UnsafeOperationProtectionDescription);
		|		EndDo;
		|
		|
		|	EndProcedure
		|";
	КонецЕсли;
	
	ТекстПроцедур = Символы.ПС + ТекстПроцедур+Символы.ПС;
	Возврат ТекстПроцедур;
КонецФункции

Процедура ПосетитьМодуль(Модуль) Экспорт
	Позиция=Неопределено;
	КоличествоОбъявлений=Модуль.Объявления.Количество();
	Для НомерОбъявления=1 По КоличествоОбъявлений Цикл
		ТекОбъявление=Модуль.Объявления[КоличествоОбъявлений-НомерОбъявления];
		Если ТекОбъявление.Тип=Типы.ИнструкцияПрепроцессораЕсли
			Или ТекОбъявление.Тип=Типы.ИнструкцияПрепроцессораИначеЕсли Тогда
			Продолжить;
		КонецЕсли;
		Позиция=ТекОбъявление.Конец.Позиция+ТекОбъявление.Конец.Длина;
		Прервать;
		
	КонецЦикла;
	
	Если Позиция=Неопределено Тогда
		Если Модуль.Операторы.Количество() > 0 Тогда
			Позиция=Модуль.Операторы[0].Начало.Позиция;
		КонецЕсли;
	КонецЕсли;
	
	Если Позиция=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Вставка(ТекстОпределенияПеременныхОбщихМодулей(), Позиция);
	// Если Модуль.Операторы.Количество() > 0 Тогда
	// 	Вставка(ТекстОпределенияПеременныхОбщихМодулей(), Модуль.Операторы[0].Начало.Позиция);
	// ИначеЕсли Модуль.Объявления.Количество() > 0 Тогда
	// 	Вставка(ТекстОпределенияПеременныхОбщихМодулей(), Модуль.Объявления[Модуль.Объявления.Количество() - 1].Конец.Позиция + Модуль.Объявления[Модуль.Объявления.Количество() - 1].Конец.Длина);
	// КонецЕсли;
КонецПроцедуры

#КонецОбласти

Процедура Ошибка(Текст, Начало, Конец = Неопределено, ЕстьЗамена = Ложь)
	Ошибка = ТаблицаОшибок.Добавить();
	Ошибка.Источник = "ДобавлениеВызововОбщихМодулей";
	Ошибка.Текст = Текст;
	Ошибка.ПозицияНачала = Начало.Позиция;
	Ошибка.НомерСтрокиНачала = Начало.НомерСтроки;
	Ошибка.НомерКолонкиНачала = Начало.НомерКолонки;
	Если Конец = Неопределено Или Конец = Начало Тогда
		Ошибка.ПозицияКонца = Начало.Позиция + Начало.Длина;
		Ошибка.НомерСтрокиКонца = Начало.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Начало.НомерКолонки + Начало.Длина;
	Иначе
		Ошибка.ПозицияКонца = Конец.Позиция + Конец.Длина;
		Ошибка.НомерСтрокиКонца = Конец.НомерСтроки;
		Ошибка.НомерКолонкиКонца = Конец.НомерКолонки + Конец.Длина;
	КонецЕсли;
	Ошибка.ЕстьЗамена = ЕстьЗамена;
КонецПроцедуры

Процедура Замена(Текст, Начало, Конец = Неопределено)
	НоваяЗамена = ТаблицаЗамен.Добавить();
	НоваяЗамена.Источник = "ДобавлениеВызововОбщихМодулей";
	НоваяЗамена.Текст = Текст;
	НоваяЗамена.Позиция = Начало.Позиция;
	Если Конец = Неопределено Тогда
		НоваяЗамена.Длина = Начало.Длина;
	Иначе
		НоваяЗамена.Длина = Конец.Позиция + Конец.Длина - Начало.Позиция;
	КонецЕсли;
КонецПроцедуры

Процедура Вставка(Текст, Позиция)
	НоваяЗамена = ТаблицаЗамен.Добавить();
	НоваяЗамена.Источник = "ДобавлениеВызововОбщихМодулей";
	НоваяЗамена.Текст = Текст;
	НоваяЗамена.Позиция = Позиция;
	НоваяЗамена.Длина = 0;
КонецПроцедуры

УстановилиОбъявлениеСпискаПеременных=Ложь;